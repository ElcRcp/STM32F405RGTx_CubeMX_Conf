
STM32F405RGTx_CubeMX_Conf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08009e54  08009e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ee8  08009ee8  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08009ee8  08009ee8  00019ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ef0  08009ef0  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ef0  08009ef0  00019ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ef4  08009ef4  00019ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d28  20000184  0800a07c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005eac  0800a07c  00025eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029c8a  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005834  00000000  00000000  00049e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb0  00000000  00000000  0004f678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d88  00000000  00000000  00051628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002828b  00000000  00000000  000533b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025565  00000000  00000000  0007b63b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6694  00000000  00000000  000a0ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00187234  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085bc  00000000  00000000  00187288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000184 	.word	0x20000184
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e3c 	.word	0x08009e3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000188 	.word	0x20000188
 80001cc:	08009e3c 	.word	0x08009e3c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	200001a0 	.word	0x200001a0
 80004f8:	200001f4 	.word	0x200001f4

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fee1 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f82d 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fa97 	bl	8000a3c <MX_GPIO_Init>
  MX_ADC3_Init();
 800050e:	f000 f8ab 	bl	8000668 <MX_ADC3_Init>
  MX_CAN1_Init();
 8000512:	f000 f8fb 	bl	800070c <MX_CAN1_Init>
  MX_DAC_Init();
 8000516:	f000 f92d 	bl	8000774 <MX_DAC_Init>
  MX_I2C1_SMBUS_Init();
 800051a:	f000 f955 	bl	80007c8 <MX_I2C1_SMBUS_Init>
  MX_RTC_Init();
 800051e:	f000 f97f 	bl	8000820 <MX_RTC_Init>
  MX_SPI1_Init();
 8000522:	f000 f9d7 	bl	80008d4 <MX_SPI1_Init>
  MX_UART5_Init();
 8000526:	f000 fa0b 	bl	8000940 <MX_UART5_Init>
  MX_USART3_UART_Init();
 800052a:	f000 fa5d 	bl	80009e8 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800052e:	f000 fa31 	bl	8000994 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of StatusBlinkerTa */
  osThreadDef(StatusBlinkerTa, StatusBlinkerTask_Init, osPriorityNormal, 0, 128);
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <main+0x60>)
 8000534:	1d3c      	adds	r4, r7, #4
 8000536:	461d      	mov	r5, r3
 8000538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000540:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StatusBlinkerTaHandle = osThreadCreate(osThread(StatusBlinkerTa), NULL);
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f007 fd2b 	bl	8007fa4 <osThreadCreate>
 800054e:	4603      	mov	r3, r0
 8000550:	4a03      	ldr	r2, [pc, #12]	; (8000560 <main+0x64>)
 8000552:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000554:	f007 fd1f 	bl	8007f96 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	e7fe      	b.n	8000558 <main+0x5c>
 800055a:	bf00      	nop
 800055c:	08009e64 	.word	0x08009e64
 8000560:	20004584 	.word	0x20004584

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b098      	sub	sp, #96	; 0x60
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f009 fc5a 	bl	8009e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 031c 	add.w	r3, r7, #28
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	4b31      	ldr	r3, [pc, #196]	; (8000660 <SystemClock_Config+0xfc>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059e:	4a30      	ldr	r2, [pc, #192]	; (8000660 <SystemClock_Config+0xfc>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a4:	6413      	str	r3, [r2, #64]	; 0x40
 80005a6:	4b2e      	ldr	r3, [pc, #184]	; (8000660 <SystemClock_Config+0xfc>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <SystemClock_Config+0x100>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a2a      	ldr	r2, [pc, #168]	; (8000664 <SystemClock_Config+0x100>)
 80005bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c0:	6013      	str	r3, [r2, #0]
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <SystemClock_Config+0x100>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005ce:	2309      	movs	r3, #9
 80005d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e6:	2308      	movs	r3, #8
 80005e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005ea:	23a8      	movs	r3, #168	; 0xa8
 80005ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f2:	2307      	movs	r3, #7
 80005f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 ff3c 	bl	8003478 <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000606:	f000 faf1 	bl	8000bec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2302      	movs	r3, #2
 8000610:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000616:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000620:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2105      	movs	r1, #5
 8000628:	4618      	mov	r0, r3
 800062a:	f003 f99d 	bl	8003968 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000634:	f000 fada 	bl	8000bec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000638:	2302      	movs	r3, #2
 800063a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800063c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000640:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fbba 	bl	8003dc0 <HAL_RCCEx_PeriphCLKConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000652:	f000 facb 	bl	8000bec <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3760      	adds	r7, #96	; 0x60
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <MX_ADC3_Init+0x98>)
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <MX_ADC3_Init+0x9c>)
 800067e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <MX_ADC3_Init+0x98>)
 8000682:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000686:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_ADC3_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MX_ADC3_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_ADC3_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_ADC3_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_ADC3_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_ADC3_Init+0x98>)
 80006aa:	4a17      	ldr	r2, [pc, #92]	; (8000708 <MX_ADC3_Init+0xa0>)
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_ADC3_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_ADC3_Init+0x98>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_ADC3_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_ADC3_Init+0x98>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <MX_ADC3_Init+0x98>)
 80006ca:	f000 fe63 	bl	8001394 <HAL_ADC_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006d4:	f000 fa8a 	bl	8000bec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006d8:	2300      	movs	r3, #0
 80006da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_ADC3_Init+0x98>)
 80006ea:	f000 fe97 	bl	800141c <HAL_ADC_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006f4:	f000 fa7a 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200043f4 	.word	0x200043f4
 8000704:	40012200 	.word	0x40012200
 8000708:	0f000001 	.word	0x0f000001

0800070c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_CAN1_Init+0x60>)
 8000712:	4a17      	ldr	r2, [pc, #92]	; (8000770 <MX_CAN1_Init+0x64>)
 8000714:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_CAN1_Init+0x60>)
 8000718:	2210      	movs	r2, #16
 800071a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_CAN1_Init+0x60>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_CAN1_Init+0x60>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000728:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_CAN1_Init+0x60>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_CAN1_Init+0x60>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_CAN1_Init+0x60>)
 8000736:	2200      	movs	r2, #0
 8000738:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_CAN1_Init+0x60>)
 800073c:	2200      	movs	r2, #0
 800073e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_CAN1_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_CAN1_Init+0x60>)
 8000748:	2200      	movs	r2, #0
 800074a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_CAN1_Init+0x60>)
 800074e:	2200      	movs	r2, #0
 8000750:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_CAN1_Init+0x60>)
 8000754:	2200      	movs	r2, #0
 8000756:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_CAN1_Init+0x60>)
 800075a:	f001 f87d 	bl	8001858 <HAL_CAN_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000764:	f000 fa42 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000455c 	.word	0x2000455c
 8000770:	40006400 	.word	0x40006400

08000774 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800077a:	463b      	mov	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_DAC_Init+0x4c>)
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <MX_DAC_Init+0x50>)
 8000786:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_DAC_Init+0x4c>)
 800078a:	f001 fa43 	bl	8001c14 <HAL_DAC_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000794:	f000 fa2a 	bl	8000bec <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000798:	2300      	movs	r3, #0
 800079a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_DAC_Init+0x4c>)
 80007a8:	f001 faba 	bl	8001d20 <HAL_DAC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007b2:	f000 fa1b 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000443c 	.word	0x2000443c
 80007c4:	40007400 	.word	0x40007400

080007c8 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2C1_SMBUS_Init+0x50>)
 80007ce:	4a13      	ldr	r2, [pc, #76]	; (800081c <MX_I2C1_SMBUS_Init+0x54>)
 80007d0:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.OwnAddress1 = 0;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_I2C1_SMBUS_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_I2C1_SMBUS_Init+0x50>)
 80007da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007de:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_I2C1_SMBUS_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_I2C1_SMBUS_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_I2C1_SMBUS_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_I2C1_SMBUS_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_I2C1_SMBUS_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_I2C1_SMBUS_Init+0x50>)
 8000800:	2202      	movs	r2, #2
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_I2C1_SMBUS_Init+0x50>)
 8000806:	f003 fe25 	bl	8004454 <HAL_SMBUS_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_SMBUS_Init+0x4c>
  {
    Error_Handler();
 8000810:	f000 f9ec 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200044c8 	.word	0x200044c8
 800081c:	40005400 	.word	0x40005400

08000820 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000834:	2300      	movs	r3, #0
 8000836:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <MX_RTC_Init+0xac>)
 800083a:	4a25      	ldr	r2, [pc, #148]	; (80008d0 <MX_RTC_Init+0xb0>)
 800083c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_RTC_Init+0xac>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_RTC_Init+0xac>)
 8000846:	227f      	movs	r2, #127	; 0x7f
 8000848:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_RTC_Init+0xac>)
 800084c:	22ff      	movs	r2, #255	; 0xff
 800084e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_RTC_Init+0xac>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_RTC_Init+0xac>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_RTC_Init+0xac>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000862:	481a      	ldr	r0, [pc, #104]	; (80008cc <MX_RTC_Init+0xac>)
 8000864:	f003 fb8e 	bl	8003f84 <HAL_RTC_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800086e:	f000 f9bd 	bl	8000bec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000872:	2300      	movs	r3, #0
 8000874:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000876:	2300      	movs	r3, #0
 8000878:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800087a:	2300      	movs	r3, #0
 800087c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2201      	movs	r2, #1
 800088a:	4619      	mov	r1, r3
 800088c:	480f      	ldr	r0, [pc, #60]	; (80008cc <MX_RTC_Init+0xac>)
 800088e:	f003 fc0a 	bl	80040a6 <HAL_RTC_SetTime>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000898:	f000 f9a8 	bl	8000bec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800089c:	2301      	movs	r3, #1
 800089e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80008a0:	2301      	movs	r3, #1
 80008a2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	2201      	movs	r2, #1
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	; (80008cc <MX_RTC_Init+0xac>)
 80008b4:	f003 fcb4 	bl	8004220 <HAL_RTC_SetDate>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80008be:	f000 f995 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20004450 	.word	0x20004450
 80008d0:	40002800 	.word	0x40002800

080008d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_SPI1_Init+0x64>)
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <MX_SPI1_Init+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_SPI1_Init+0x64>)
 80008e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_SPI1_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_SPI1_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_SPI1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_SPI1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_SPI1_Init+0x64>)
 8000900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000904:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_SPI1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_SPI1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_SPI1_Init+0x64>)
 8000920:	220a      	movs	r2, #10
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_SPI1_Init+0x64>)
 8000926:	f003 fe4d 	bl	80045c4 <HAL_SPI_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000930:	f000 f95c 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20004470 	.word	0x20004470
 800093c:	40013000 	.word	0x40013000

08000940 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_UART5_Init+0x4c>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <MX_UART5_Init+0x50>)
 8000948:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <MX_UART5_Init+0x4c>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_UART5_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_UART5_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_UART5_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_UART5_Init+0x4c>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_UART5_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_UART5_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_UART5_Init+0x4c>)
 8000978:	f004 f95a 	bl	8004c30 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000982:	f000 f933 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200043b0 	.word	0x200043b0
 8000990:	40005000 	.word	0x40005000

08000994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <MX_USART2_UART_Init+0x50>)
 800099c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009cc:	f004 f930 	bl	8004c30 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009d6:	f000 f909 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20004518 	.word	0x20004518
 80009e4:	40004400 	.word	0x40004400

080009e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <MX_USART3_UART_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a14:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a18:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_USART3_UART_Init+0x4c>)
 8000a22:	f004 f905 	bl	8004c30 <HAL_UART_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8000a2c:	f000 f8de 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000436c 	.word	0x2000436c
 8000a38:	40004800 	.word	0x40004800

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b4b      	ldr	r3, [pc, #300]	; (8000b84 <MX_GPIO_Init+0x148>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a4a      	ldr	r2, [pc, #296]	; (8000b84 <MX_GPIO_Init+0x148>)
 8000a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b48      	ldr	r3, [pc, #288]	; (8000b84 <MX_GPIO_Init+0x148>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b44      	ldr	r3, [pc, #272]	; (8000b84 <MX_GPIO_Init+0x148>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a43      	ldr	r2, [pc, #268]	; (8000b84 <MX_GPIO_Init+0x148>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <MX_GPIO_Init+0x148>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	4b3d      	ldr	r3, [pc, #244]	; (8000b84 <MX_GPIO_Init+0x148>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a3c      	ldr	r2, [pc, #240]	; (8000b84 <MX_GPIO_Init+0x148>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b3a      	ldr	r3, [pc, #232]	; (8000b84 <MX_GPIO_Init+0x148>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <MX_GPIO_Init+0x148>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a35      	ldr	r2, [pc, #212]	; (8000b84 <MX_GPIO_Init+0x148>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <MX_GPIO_Init+0x148>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <MX_GPIO_Init+0x148>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a2e      	ldr	r2, [pc, #184]	; (8000b84 <MX_GPIO_Init+0x148>)
 8000acc:	f043 0308 	orr.w	r3, r3, #8
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <MX_GPIO_Init+0x148>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CS_Pin|PC5_Pin|PC6_Pin|PC7_Pin
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8000ae4:	4828      	ldr	r0, [pc, #160]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000ae6:	f001 fb11 	bl	800210c <HAL_GPIO_WritePin>
                          |PC8_Pin|ESP_EN_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, uC_BLE_RST_Pin|uC_BLE_IO0_Pin|Status_LED_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f240 4122 	movw	r1, #1058	; 0x422
 8000af0:	4826      	ldr	r0, [pc, #152]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000af2:	f001 fb0b 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0_Pin PC1_Pin PC2_Pin PC3_Pin */
  GPIO_InitStruct.Pin = PC0_Pin|PC1_Pin|PC2_Pin|PC3_Pin;
 8000af6:	230f      	movs	r3, #15
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	481f      	ldr	r0, [pc, #124]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000b0a:	f001 f963 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin PC5_Pin PC6_Pin PC7_Pin
                           PC8_Pin ESP_EN_CTRL_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|PC5_Pin|PC6_Pin|PC7_Pin
 8000b0e:	f44f 631f 	mov.w	r3, #2544	; 0x9f0
 8000b12:	617b      	str	r3, [r7, #20]
                          |PC8_Pin|ESP_EN_CTRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	4818      	ldr	r0, [pc, #96]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000b28:	f001 f954 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ext_Int0_Pin */
  GPIO_InitStruct.Pin = Ext_Int0_Pin;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <MX_GPIO_Init+0x154>)
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Ext_Int0_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4813      	ldr	r0, [pc, #76]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000b40:	f001 f948 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_BLE_RST_Pin uC_BLE_IO0_Pin Status_LED_Pin */
  GPIO_InitStruct.Pin = uC_BLE_RST_Pin|uC_BLE_IO0_Pin|Status_LED_Pin;
 8000b44:	f240 4322 	movw	r3, #1058	; 0x422
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480b      	ldr	r0, [pc, #44]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000b5e:	f001 f939 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ext_Int9_Pin */
  GPIO_InitStruct.Pin = Ext_Int9_Pin;
 8000b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_GPIO_Init+0x154>)
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Ext_Int9_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000b78:	f001 f92c 	bl	8001dd4 <HAL_GPIO_Init>

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	40020400 	.word	0x40020400
 8000b90:	10110000 	.word	0x10110000

08000b94 <StatusBlinkerTask_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StatusBlinkerTask_Init */
void StatusBlinkerTask_Init(void const * argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b9c:	f008 fc2e 	bl	80093fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(Status_LED_GPIO_Port, Status_LED_Pin);
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <StatusBlinkerTask_Init+0x30>)
 8000ba4:	f001 facb 	bl	800213e <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000ba8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bac:	f007 fa46 	bl	800803c <osDelay>
    HAL_GPIO_TogglePin(Status_LED_GPIO_Port, Status_LED_Pin);
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <StatusBlinkerTask_Init+0x30>)
 8000bb4:	f001 fac3 	bl	800213e <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000bb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bbc:	f007 fa3e 	bl	800803c <osDelay>
	HAL_GPIO_TogglePin(Status_LED_GPIO_Port, Status_LED_Pin);
 8000bc0:	e7ee      	b.n	8000ba0 <StatusBlinkerTask_Init+0xc>
 8000bc2:	bf00      	nop
 8000bc4:	40020400 	.word	0x40020400

08000bc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d101      	bne.n	8000bde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bda:	f000 fb97 	bl	800130c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40001000 	.word	0x40001000

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <Error_Handler+0x8>
	...

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_MspInit+0x54>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	4a11      	ldr	r2, [pc, #68]	; (8000c4c <HAL_MspInit+0x54>)
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_MspInit+0x54>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_MspInit+0x54>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_MspInit+0x54>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_MspInit+0x54>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	210f      	movs	r1, #15
 8000c3a:	f06f 0001 	mvn.w	r0, #1
 8000c3e:	f000 ffbf 	bl	8001bc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <HAL_ADC_MspInit+0x7c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d127      	bne.n	8000cc2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_ADC_MspInit+0x80>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <HAL_ADC_MspInit+0x80>)
 8000c7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_ADC_MspInit+0x80>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_ADC_MspInit+0x80>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <HAL_ADC_MspInit+0x80>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_ADC_MspInit+0x80>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0-WKUP     ------> ADC3_IN0
    PA1     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000caa:	2303      	movs	r3, #3
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <HAL_ADC_MspInit+0x84>)
 8000cbe:	f001 f889 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40012200 	.word	0x40012200
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <HAL_CAN_MspInit+0x84>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d12c      	bne.n	8000d54 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <HAL_CAN_MspInit+0x88>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <HAL_CAN_MspInit+0x88>)
 8000d04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <HAL_CAN_MspInit+0x88>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_CAN_MspInit+0x88>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <HAL_CAN_MspInit+0x88>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_CAN_MspInit+0x88>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d44:	2309      	movs	r3, #9
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <HAL_CAN_MspInit+0x8c>)
 8000d50:	f001 f840 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40006400 	.word	0x40006400
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020400 	.word	0x40020400

08000d68 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <HAL_DAC_MspInit+0x8c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d12f      	bne.n	8000dea <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <HAL_DAC_MspInit+0x90>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <HAL_DAC_MspInit+0x90>)
 8000d94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_DAC_MspInit+0x90>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HAL_DAC_MspInit+0x90>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <HAL_DAC_MspInit+0x90>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <HAL_DAC_MspInit+0x90>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4809      	ldr	r0, [pc, #36]	; (8000dfc <HAL_DAC_MspInit+0x94>)
 8000dd6:	f000 fffd 	bl	8001dd4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2036      	movs	r0, #54	; 0x36
 8000de0:	f000 feee 	bl	8001bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000de4:	2036      	movs	r0, #54	; 0x36
 8000de6:	f000 ff07 	bl	8001bf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	; 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40007400 	.word	0x40007400
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000

08000e00 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hsmbus->Instance==I2C1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <HAL_SMBUS_MspInit+0x84>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d12b      	bne.n	8000e7a <HAL_SMBUS_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_SMBUS_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_SMBUS_MspInit+0x88>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_SMBUS_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e3e:	23c0      	movs	r3, #192	; 0xc0
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e42:	2312      	movs	r3, #18
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	480c      	ldr	r0, [pc, #48]	; (8000e8c <HAL_SMBUS_MspInit+0x8c>)
 8000e5a:	f000 ffbb 	bl	8001dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_SMBUS_MspInit+0x88>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <HAL_SMBUS_MspInit+0x88>)
 8000e68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_SMBUS_MspInit+0x88>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40005400 	.word	0x40005400
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020400 	.word	0x40020400

08000e90 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <HAL_RTC_MspInit+0x24>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d102      	bne.n	8000ea8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_RTC_MspInit+0x28>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40002800 	.word	0x40002800
 8000eb8:	42470e3c 	.word	0x42470e3c

08000ebc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a19      	ldr	r2, [pc, #100]	; (8000f40 <HAL_SPI_MspInit+0x84>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d12b      	bne.n	8000f36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_SPI_MspInit+0x88>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <HAL_SPI_MspInit+0x88>)
 8000ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_SPI_MspInit+0x88>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_SPI_MspInit+0x88>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <HAL_SPI_MspInit+0x88>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_SPI_MspInit+0x88>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f16:	23e0      	movs	r3, #224	; 0xe0
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f26:	2305      	movs	r3, #5
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <HAL_SPI_MspInit+0x8c>)
 8000f32:	f000 ff4f 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40013000 	.word	0x40013000
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000

08000f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b090      	sub	sp, #64	; 0x40
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a6a      	ldr	r2, [pc, #424]	; (8001114 <HAL_UART_MspInit+0x1c8>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d14b      	bne.n	8001006 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f72:	4b69      	ldr	r3, [pc, #420]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a68      	ldr	r2, [pc, #416]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 8000f78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b66      	ldr	r3, [pc, #408]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f88:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f8e:	4b62      	ldr	r3, [pc, #392]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a61      	ldr	r2, [pc, #388]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b5f      	ldr	r3, [pc, #380]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
 8000faa:	4b5b      	ldr	r3, [pc, #364]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a5a      	ldr	r2, [pc, #360]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b58      	ldr	r3, [pc, #352]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	623b      	str	r3, [r7, #32]
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fdc:	4619      	mov	r1, r3
 8000fde:	484f      	ldr	r0, [pc, #316]	; (800111c <HAL_UART_MspInit+0x1d0>)
 8000fe0:	f000 fef8 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4848      	ldr	r0, [pc, #288]	; (8001120 <HAL_UART_MspInit+0x1d4>)
 8001000:	f000 fee8 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001004:	e082      	b.n	800110c <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a46      	ldr	r2, [pc, #280]	; (8001124 <HAL_UART_MspInit+0x1d8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d12c      	bne.n	800106a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	4b40      	ldr	r3, [pc, #256]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	4a3f      	ldr	r2, [pc, #252]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 800101a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101e:	6413      	str	r3, [r2, #64]	; 0x40
 8001020:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001028:	61fb      	str	r3, [r7, #28]
 800102a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	4a38      	ldr	r2, [pc, #224]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6313      	str	r3, [r2, #48]	; 0x30
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001048:	230c      	movs	r3, #12
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001058:	2307      	movs	r3, #7
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001060:	4619      	mov	r1, r3
 8001062:	4831      	ldr	r0, [pc, #196]	; (8001128 <HAL_UART_MspInit+0x1dc>)
 8001064:	f000 feb6 	bl	8001dd4 <HAL_GPIO_Init>
}
 8001068:	e050      	b.n	800110c <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART3)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a2f      	ldr	r2, [pc, #188]	; (800112c <HAL_UART_MspInit+0x1e0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d14b      	bne.n	800110c <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	4a26      	ldr	r2, [pc, #152]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 800107e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001082:	6413      	str	r3, [r2, #64]	; 0x40
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	4b20      	ldr	r3, [pc, #128]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	6313      	str	r3, [r2, #48]	; 0x30
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	4a18      	ldr	r2, [pc, #96]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6313      	str	r3, [r2, #48]	; 0x30
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_UART_MspInit+0x1cc>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80010c8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010da:	2307      	movs	r3, #7
 80010dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e2:	4619      	mov	r1, r3
 80010e4:	4812      	ldr	r0, [pc, #72]	; (8001130 <HAL_UART_MspInit+0x1e4>)
 80010e6:	f000 fe75 	bl	8001dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010fc:	2307      	movs	r3, #7
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001104:	4619      	mov	r1, r3
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_UART_MspInit+0x1d0>)
 8001108:	f000 fe64 	bl	8001dd4 <HAL_GPIO_Init>
}
 800110c:	bf00      	nop
 800110e:	3740      	adds	r7, #64	; 0x40
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40005000 	.word	0x40005000
 8001118:	40023800 	.word	0x40023800
 800111c:	40020800 	.word	0x40020800
 8001120:	40020c00 	.word	0x40020c00
 8001124:	40004400 	.word	0x40004400
 8001128:	40020000 	.word	0x40020000
 800112c:	40004800 	.word	0x40004800
 8001130:	40020400 	.word	0x40020400

08001134 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	2036      	movs	r0, #54	; 0x36
 800114a:	f000 fd39 	bl	8001bc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800114e:	2036      	movs	r0, #54	; 0x36
 8001150:	f000 fd52 	bl	8001bf8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_InitTick+0xa4>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <HAL_InitTick+0xa4>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <HAL_InitTick+0xa4>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001170:	f107 0210 	add.w	r2, r7, #16
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f002 fdee 	bl	8003d5c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001180:	f002 fdc4 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 8001184:	4603      	mov	r3, r0
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118c:	4a13      	ldr	r2, [pc, #76]	; (80011dc <HAL_InitTick+0xa8>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	0c9b      	lsrs	r3, r3, #18
 8001194:	3b01      	subs	r3, #1
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_InitTick+0xac>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <HAL_InitTick+0xb0>)
 800119c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_InitTick+0xac>)
 80011a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <HAL_InitTick+0xac>)
 80011a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <HAL_InitTick+0xac>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_InitTick+0xac>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <HAL_InitTick+0xac>)
 80011ba:	f003 fa8c 	bl	80046d6 <HAL_TIM_Base_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011c4:	4806      	ldr	r0, [pc, #24]	; (80011e0 <HAL_InitTick+0xac>)
 80011c6:	f003 fadf 	bl	8004788 <HAL_TIM_Base_Start_IT>
 80011ca:	4603      	mov	r3, r0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3730      	adds	r7, #48	; 0x30
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	431bde83 	.word	0x431bde83
 80011e0:	20004588 	.word	0x20004588
 80011e4:	40001000 	.word	0x40001000

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <NMI_Handler+0x4>

080011ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <MemManage_Handler+0x4>

080011fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <UsageFault_Handler+0x4>

08001206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <TIM6_DAC_IRQHandler+0x20>)
 800121a:	791b      	ldrb	r3, [r3, #4]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001222:	4804      	ldr	r0, [pc, #16]	; (8001234 <TIM6_DAC_IRQHandler+0x20>)
 8001224:	f000 fd18 	bl	8001c58 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <TIM6_DAC_IRQHandler+0x24>)
 800122a:	f003 fb1d 	bl	8004868 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000443c 	.word	0x2000443c
 8001238:	20004588 	.word	0x20004588

0800123c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <OTG_FS_IRQHandler+0x10>)
 8001242:	f001 f8e6 	bl	8002412 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20005aa4 	.word	0x20005aa4

08001250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <SystemInit+0x20>)
 8001256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <SystemInit+0x20>)
 800125c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800127a:	490e      	ldr	r1, [pc, #56]	; (80012b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800127c:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001290:	4c0b      	ldr	r4, [pc, #44]	; (80012c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800129e:	f7ff ffd7 	bl	8001250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a2:	f008 fd9f 	bl	8009de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a6:	f7ff f929 	bl	80004fc <main>
  bx  lr    
 80012aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80012b8:	08009ef8 	.word	0x08009ef8
  ldr r2, =_sbss
 80012bc:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80012c0:	20005eac 	.word	0x20005eac

080012c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <HAL_Init+0x40>)
 80012d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_Init+0x40>)
 80012de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_Init+0x40>)
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 fc5a 	bl	8001baa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff ff1c 	bl	8001134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012fc:	f7ff fc7c 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023c00 	.word	0x40023c00

0800130c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x20>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_IncTick+0x24>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000008 	.word	0x20000008
 8001330:	200045d0 	.word	0x200045d0

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200045d0 	.word	0x200045d0

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff ffee 	bl	8001334 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d005      	beq.n	8001372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_Delay+0x44>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001372:	bf00      	nop
 8001374:	f7ff ffde 	bl	8001334 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8f7      	bhi.n	8001374 <HAL_Delay+0x28>
  {
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008

08001394 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e033      	b.n	8001412 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d109      	bne.n	80013c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fc4c 	bl	8000c50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d118      	bne.n	8001404 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013da:	f023 0302 	bic.w	r3, r3, #2
 80013de:	f043 0202 	orr.w	r2, r3, #2
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f93a 	bl	8001660 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f023 0303 	bic.w	r3, r3, #3
 80013fa:	f043 0201 	orr.w	r2, r3, #1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
 8001402:	e001      	b.n	8001408 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001410:	7bfb      	ldrb	r3, [r7, #15]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x1c>
 8001434:	2302      	movs	r3, #2
 8001436:	e105      	b.n	8001644 <HAL_ADC_ConfigChannel+0x228>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b09      	cmp	r3, #9
 8001446:	d925      	bls.n	8001494 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68d9      	ldr	r1, [r3, #12]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	3b1e      	subs	r3, #30
 800145e:	2207      	movs	r2, #7
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43da      	mvns	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	400a      	ands	r2, r1
 800146c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68d9      	ldr	r1, [r3, #12]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	4603      	mov	r3, r0
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4403      	add	r3, r0
 8001486:	3b1e      	subs	r3, #30
 8001488:	409a      	lsls	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	e022      	b.n	80014da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6919      	ldr	r1, [r3, #16]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	2207      	movs	r2, #7
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	400a      	ands	r2, r1
 80014b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6919      	ldr	r1, [r3, #16]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	4603      	mov	r3, r0
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4403      	add	r3, r0
 80014d0:	409a      	lsls	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d824      	bhi.n	800152c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	3b05      	subs	r3, #5
 80014f4:	221f      	movs	r2, #31
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	400a      	ands	r2, r1
 8001502:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	3b05      	subs	r3, #5
 800151e:	fa00 f203 	lsl.w	r2, r0, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	635a      	str	r2, [r3, #52]	; 0x34
 800152a:	e04c      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b0c      	cmp	r3, #12
 8001532:	d824      	bhi.n	800157e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	3b23      	subs	r3, #35	; 0x23
 8001546:	221f      	movs	r2, #31
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43da      	mvns	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	400a      	ands	r2, r1
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	b29b      	uxth	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	3b23      	subs	r3, #35	; 0x23
 8001570:	fa00 f203 	lsl.w	r2, r0, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	631a      	str	r2, [r3, #48]	; 0x30
 800157c:	e023      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	3b41      	subs	r3, #65	; 0x41
 8001590:	221f      	movs	r2, #31
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	400a      	ands	r2, r1
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	3b41      	subs	r3, #65	; 0x41
 80015ba:	fa00 f203 	lsl.w	r2, r0, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <HAL_ADC_ConfigChannel+0x234>)
 80015c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a21      	ldr	r2, [pc, #132]	; (8001654 <HAL_ADC_ConfigChannel+0x238>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d109      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x1cc>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b12      	cmp	r3, #18
 80015da:	d105      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a19      	ldr	r2, [pc, #100]	; (8001654 <HAL_ADC_ConfigChannel+0x238>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d123      	bne.n	800163a <HAL_ADC_ConfigChannel+0x21e>
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b10      	cmp	r3, #16
 80015f8:	d003      	beq.n	8001602 <HAL_ADC_ConfigChannel+0x1e6>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b11      	cmp	r3, #17
 8001600:	d11b      	bne.n	800163a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b10      	cmp	r3, #16
 8001614:	d111      	bne.n	800163a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_ADC_ConfigChannel+0x23c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <HAL_ADC_ConfigChannel+0x240>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9a      	lsrs	r2, r3, #18
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800162c:	e002      	b.n	8001634 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3b01      	subs	r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f9      	bne.n	800162e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40012300 	.word	0x40012300
 8001654:	40012000 	.word	0x40012000
 8001658:	20000000 	.word	0x20000000
 800165c:	431bde83 	.word	0x431bde83

08001660 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001668:	4b79      	ldr	r3, [pc, #484]	; (8001850 <ADC_Init+0x1f0>)
 800166a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	431a      	orrs	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	021a      	lsls	r2, r3, #8
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6859      	ldr	r1, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6899      	ldr	r1, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	4a58      	ldr	r2, [pc, #352]	; (8001854 <ADC_Init+0x1f4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d022      	beq.n	800173e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001706:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6899      	ldr	r1, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6899      	ldr	r1, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	e00f      	b.n	800175e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800174c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800175c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0202 	bic.w	r2, r2, #2
 800176c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6899      	ldr	r1, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7e1b      	ldrb	r3, [r3, #24]
 8001778:	005a      	lsls	r2, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d01b      	beq.n	80017c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800179a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6859      	ldr	r1, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	3b01      	subs	r3, #1
 80017b8:	035a      	lsls	r2, r3, #13
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	e007      	b.n	80017d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	051a      	lsls	r2, r3, #20
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001808:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6899      	ldr	r1, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001816:	025a      	lsls	r2, r3, #9
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800182e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6899      	ldr	r1, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	029a      	lsls	r2, r3, #10
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	609a      	str	r2, [r3, #8]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	40012300 	.word	0x40012300
 8001854:	0f000001 	.word	0x0f000001

08001858 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0ed      	b.n	8001a46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fa2e 	bl	8000cd8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0202 	bic.w	r2, r2, #2
 800188a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800188c:	f7ff fd52 	bl	8001334 <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001892:	e012      	b.n	80018ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001894:	f7ff fd4e 	bl	8001334 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b0a      	cmp	r3, #10
 80018a0:	d90b      	bls.n	80018ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2205      	movs	r2, #5
 80018b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0c5      	b.n	8001a46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1e5      	bne.n	8001894 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d8:	f7ff fd2c 	bl	8001334 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018de:	e012      	b.n	8001906 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018e0:	f7ff fd28 	bl	8001334 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b0a      	cmp	r3, #10
 80018ec:	d90b      	bls.n	8001906 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2205      	movs	r2, #5
 80018fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e09f      	b.n	8001a46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0e5      	beq.n	80018e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7e1b      	ldrb	r3, [r3, #24]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d108      	bne.n	800192e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e007      	b.n	800193e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7e5b      	ldrb	r3, [r3, #25]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d108      	bne.n	8001958 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e007      	b.n	8001968 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001966:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7e9b      	ldrb	r3, [r3, #26]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d108      	bne.n	8001982 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0220 	orr.w	r2, r2, #32
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e007      	b.n	8001992 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0220 	bic.w	r2, r2, #32
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7edb      	ldrb	r3, [r3, #27]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d108      	bne.n	80019ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0210 	bic.w	r2, r2, #16
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e007      	b.n	80019bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0210 	orr.w	r2, r2, #16
 80019ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7f1b      	ldrb	r3, [r3, #28]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d108      	bne.n	80019d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0208 	orr.w	r2, r2, #8
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e007      	b.n	80019e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0208 	bic.w	r2, r2, #8
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7f5b      	ldrb	r3, [r3, #29]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d108      	bne.n	8001a00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0204 	orr.w	r2, r2, #4
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e007      	b.n	8001a10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0204 	bic.w	r2, r2, #4
 8001a0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	ea42 0103 	orr.w	r1, r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	1e5a      	subs	r2, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	; (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	; (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff4c 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd2:	f7ff ff61 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001bd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	68b9      	ldr	r1, [r7, #8]
 8001bdc:	6978      	ldr	r0, [r7, #20]
 8001bde:	f7ff ffb1 	bl	8001b44 <NVIC_EncodePriority>
 8001be2:	4602      	mov	r2, r0
 8001be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff80 	bl	8001af0 <__NVIC_SetPriority>
}
 8001bf0:	bf00      	nop
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff54 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e014      	b.n	8001c50 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	791b      	ldrb	r3, [r3, #4]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff f896 	bl	8000d68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c6e:	d120      	bne.n	8001cb2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c7e:	d118      	bne.n	8001cb2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2204      	movs	r2, #4
 8001c84:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001caa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f82d 	bl	8001d0c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cc0:	d120      	bne.n	8001d04 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cd0:	d118      	bne.n	8001d04 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	f043 0202 	orr.w	r2, r3, #2
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001cfc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f85d 	bl	8001dbe <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	795b      	ldrb	r3, [r3, #5]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_DAC_ConfigChannel+0x18>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e03c      	b.n	8001db2 <HAL_DAC_ConfigChannel+0x92>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2202      	movs	r2, #2
 8001d42:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6819      	ldr	r1, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	22c0      	movs	r2, #192	; 0xc0
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	400a      	ands	r2, r1
 8001da2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2201      	movs	r2, #1
 8001da8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	371c      	adds	r7, #28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	e16b      	b.n	80020c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f040 815a 	bne.w	80020c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d005      	beq.n	8001e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d130      	bne.n	8001e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	2203      	movs	r2, #3
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 0201 	and.w	r2, r3, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d017      	beq.n	8001ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d123      	bne.n	8001f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	08da      	lsrs	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3208      	adds	r2, #8
 8001ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	69b9      	ldr	r1, [r7, #24]
 8001f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0203 	and.w	r2, r3, #3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80b4 	beq.w	80020c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b60      	ldr	r3, [pc, #384]	; (80020e0 <HAL_GPIO_Init+0x30c>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a5f      	ldr	r2, [pc, #380]	; (80020e0 <HAL_GPIO_Init+0x30c>)
 8001f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b5d      	ldr	r3, [pc, #372]	; (80020e0 <HAL_GPIO_Init+0x30c>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f76:	4a5b      	ldr	r2, [pc, #364]	; (80020e4 <HAL_GPIO_Init+0x310>)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a52      	ldr	r2, [pc, #328]	; (80020e8 <HAL_GPIO_Init+0x314>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d02b      	beq.n	8001ffa <HAL_GPIO_Init+0x226>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a51      	ldr	r2, [pc, #324]	; (80020ec <HAL_GPIO_Init+0x318>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d025      	beq.n	8001ff6 <HAL_GPIO_Init+0x222>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a50      	ldr	r2, [pc, #320]	; (80020f0 <HAL_GPIO_Init+0x31c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01f      	beq.n	8001ff2 <HAL_GPIO_Init+0x21e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4f      	ldr	r2, [pc, #316]	; (80020f4 <HAL_GPIO_Init+0x320>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d019      	beq.n	8001fee <HAL_GPIO_Init+0x21a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4e      	ldr	r2, [pc, #312]	; (80020f8 <HAL_GPIO_Init+0x324>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x216>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4d      	ldr	r2, [pc, #308]	; (80020fc <HAL_GPIO_Init+0x328>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_GPIO_Init+0x212>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4c      	ldr	r2, [pc, #304]	; (8002100 <HAL_GPIO_Init+0x32c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x20e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4b      	ldr	r2, [pc, #300]	; (8002104 <HAL_GPIO_Init+0x330>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_GPIO_Init+0x20a>
 8001fda:	2307      	movs	r3, #7
 8001fdc:	e00e      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001fde:	2308      	movs	r3, #8
 8001fe0:	e00c      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001fe2:	2306      	movs	r3, #6
 8001fe4:	e00a      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001fe6:	2305      	movs	r3, #5
 8001fe8:	e008      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001fea:	2304      	movs	r3, #4
 8001fec:	e006      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e004      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e002      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	f002 0203 	and.w	r2, r2, #3
 8002002:	0092      	lsls	r2, r2, #2
 8002004:	4093      	lsls	r3, r2
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800200c:	4935      	ldr	r1, [pc, #212]	; (80020e4 <HAL_GPIO_Init+0x310>)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	3302      	adds	r3, #2
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800201a:	4b3b      	ldr	r3, [pc, #236]	; (8002108 <HAL_GPIO_Init+0x334>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800203e:	4a32      	ldr	r2, [pc, #200]	; (8002108 <HAL_GPIO_Init+0x334>)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002044:	4b30      	ldr	r3, [pc, #192]	; (8002108 <HAL_GPIO_Init+0x334>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002068:	4a27      	ldr	r2, [pc, #156]	; (8002108 <HAL_GPIO_Init+0x334>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800206e:	4b26      	ldr	r3, [pc, #152]	; (8002108 <HAL_GPIO_Init+0x334>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002092:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <HAL_GPIO_Init+0x334>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_GPIO_Init+0x334>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020bc:	4a12      	ldr	r2, [pc, #72]	; (8002108 <HAL_GPIO_Init+0x334>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3301      	adds	r3, #1
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b0f      	cmp	r3, #15
 80020cc:	f67f ae90 	bls.w	8001df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40013800 	.word	0x40013800
 80020e8:	40020000 	.word	0x40020000
 80020ec:	40020400 	.word	0x40020400
 80020f0:	40020800 	.word	0x40020800
 80020f4:	40020c00 	.word	0x40020c00
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40021400 	.word	0x40021400
 8002100:	40021800 	.word	0x40021800
 8002104:	40021c00 	.word	0x40021c00
 8002108:	40013c00 	.word	0x40013c00

0800210c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
 8002118:	4613      	mov	r3, r2
 800211a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800211c:	787b      	ldrb	r3, [r7, #1]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002128:	e003      	b.n	8002132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800212a:	887b      	ldrh	r3, [r7, #2]
 800212c:	041a      	lsls	r2, r3, #16
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	619a      	str	r2, [r3, #24]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800213e:	b480      	push	{r7}
 8002140:	b085      	sub	sp, #20
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002150:	887a      	ldrh	r2, [r7, #2]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4013      	ands	r3, r2
 8002156:	041a      	lsls	r2, r3, #16
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	43d9      	mvns	r1, r3
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	400b      	ands	r3, r1
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	619a      	str	r2, [r3, #24]
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002172:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002174:	b08f      	sub	sp, #60	; 0x3c
 8002176:	af0a      	add	r7, sp, #40	; 0x28
 8002178:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e10f      	b.n	80023a4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f007 fb0c 	bl	80097bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2203      	movs	r2, #3
 80021a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 f85f 	bl	8005286 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	687e      	ldr	r6, [r7, #4]
 80021d0:	466d      	mov	r5, sp
 80021d2:	f106 0410 	add.w	r4, r6, #16
 80021d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80021e6:	1d33      	adds	r3, r6, #4
 80021e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ea:	6838      	ldr	r0, [r7, #0]
 80021ec:	f002 ff36 	bl	800505c <USB_CoreInit>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2202      	movs	r2, #2
 80021fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0d0      	b.n	80023a4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f003 f84d 	bl	80052a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	e04a      	b.n	80022aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	333d      	adds	r3, #61	; 0x3d
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	333c      	adds	r3, #60	; 0x3c
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	b298      	uxth	r0, r3
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	3342      	adds	r3, #66	; 0x42
 8002250:	4602      	mov	r2, r0
 8002252:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	333f      	adds	r3, #63	; 0x3f
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	3344      	adds	r3, #68	; 0x44
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	3348      	adds	r3, #72	; 0x48
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	3350      	adds	r3, #80	; 0x50
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	3301      	adds	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d3af      	bcc.n	8002214 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]
 80022b8:	e044      	b.n	8002344 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	3301      	adds	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	d3b5      	bcc.n	80022ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	687e      	ldr	r6, [r7, #4]
 8002356:	466d      	mov	r5, sp
 8002358:	f106 0410 	add.w	r4, r6, #16
 800235c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800235e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002364:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002368:	e885 0003 	stmia.w	r5, {r0, r1}
 800236c:	1d33      	adds	r3, r6, #4
 800236e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002370:	6838      	ldr	r0, [r7, #0]
 8002372:	f002 ffc3 	bl	80052fc <USB_DevInit>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e00d      	b.n	80023a4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f004 f80b 	bl	80063b8 <USB_DevDisconnect>

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_PCD_Start+0x1c>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e020      	b.n	800240a <HAL_PCD_Start+0x5e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d109      	bne.n	80023ec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d005      	beq.n	80023ec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f002 ff37 	bl	8005264 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 ffbb 	bl	8006376 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002412:	b590      	push	{r4, r7, lr}
 8002414:	b08d      	sub	sp, #52	; 0x34
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f004 f879 	bl	8006520 <USB_GetMode>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 839d 	bne.w	8002b70 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f003 ffdd 	bl	80063fa <USB_ReadInterrupts>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 8393 	beq.w	8002b6e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f003 ffd4 	bl	80063fa <USB_ReadInterrupts>
 8002452:	4603      	mov	r3, r0
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b02      	cmp	r3, #2
 800245a:	d107      	bne.n	800246c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f002 0202 	and.w	r2, r2, #2
 800246a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f003 ffc2 	bl	80063fa <USB_ReadInterrupts>
 8002476:	4603      	mov	r3, r0
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b10      	cmp	r3, #16
 800247e:	d161      	bne.n	8002544 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0210 	bic.w	r2, r2, #16
 800248e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f003 020f 	and.w	r2, r3, #15
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	3304      	adds	r3, #4
 80024ae:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	0c5b      	lsrs	r3, r3, #17
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d124      	bne.n	8002506 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d035      	beq.n	8002534 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	6a38      	ldr	r0, [r7, #32]
 80024dc:	f003 fe28 	bl	8006130 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ec:	441a      	add	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024fe:	441a      	add	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	619a      	str	r2, [r3, #24]
 8002504:	e016      	b.n	8002534 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	0c5b      	lsrs	r3, r3, #17
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	2b06      	cmp	r3, #6
 8002510:	d110      	bne.n	8002534 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002518:	2208      	movs	r2, #8
 800251a:	4619      	mov	r1, r3
 800251c:	6a38      	ldr	r0, [r7, #32]
 800251e:	f003 fe07 	bl	8006130 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800252e:	441a      	add	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0210 	orr.w	r2, r2, #16
 8002542:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f003 ff56 	bl	80063fa <USB_ReadInterrupts>
 800254e:	4603      	mov	r3, r0
 8002550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002554:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002558:	d16e      	bne.n	8002638 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f003 ff5c 	bl	8006420 <USB_ReadDevAllOutEpInterrupt>
 8002568:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800256a:	e062      	b.n	8002632 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800256c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d057      	beq.n	8002626 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f003 ff81 	bl	8006488 <USB_ReadDevOutEPInterrupt>
 8002586:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00c      	beq.n	80025ac <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	4413      	add	r3, r2
 800259a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800259e:	461a      	mov	r2, r3
 80025a0:	2301      	movs	r3, #1
 80025a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fdb0 	bl	800310c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00c      	beq.n	80025d0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c2:	461a      	mov	r2, r3
 80025c4:	2308      	movs	r3, #8
 80025c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80025c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 feaa 	bl	8003324 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d008      	beq.n	80025ec <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e6:	461a      	mov	r2, r3
 80025e8:	2310      	movs	r3, #16
 80025ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002602:	461a      	mov	r2, r3
 8002604:	2320      	movs	r3, #32
 8002606:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	4413      	add	r3, r2
 800261a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800261e:	461a      	mov	r2, r3
 8002620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002624:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	3301      	adds	r3, #1
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	2b00      	cmp	r3, #0
 8002636:	d199      	bne.n	800256c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f003 fedc 	bl	80063fa <USB_ReadInterrupts>
 8002642:	4603      	mov	r3, r0
 8002644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002648:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800264c:	f040 80c0 	bne.w	80027d0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f003 fefd 	bl	8006454 <USB_ReadDevAllInEpInterrupt>
 800265a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002660:	e0b2      	b.n	80027c8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80a7 	beq.w	80027bc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f003 ff23 	bl	80064c4 <USB_ReadDevInEPInterrupt>
 800267e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d057      	beq.n	800273a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	2201      	movs	r2, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800269e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69f9      	ldr	r1, [r7, #28]
 80026a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026aa:	4013      	ands	r3, r2
 80026ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ba:	461a      	mov	r2, r3
 80026bc:	2301      	movs	r3, #1
 80026be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d132      	bne.n	800272e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3348      	adds	r3, #72	; 0x48
 80026d8:	6819      	ldr	r1, [r3, #0]
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4403      	add	r3, r0
 80026e8:	3344      	adds	r3, #68	; 0x44
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4419      	add	r1, r3
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4403      	add	r3, r0
 80026fc:	3348      	adds	r3, #72	; 0x48
 80026fe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	2b00      	cmp	r3, #0
 8002704:	d113      	bne.n	800272e <HAL_PCD_IRQHandler+0x31c>
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	3350      	adds	r3, #80	; 0x50
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d108      	bne.n	800272e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002726:	461a      	mov	r2, r3
 8002728:	2101      	movs	r1, #1
 800272a:	f003 ff2b 	bl	8006584 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	b2db      	uxtb	r3, r3
 8002732:	4619      	mov	r1, r3
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f007 f8c2 	bl	80098be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002750:	461a      	mov	r2, r3
 8002752:	2308      	movs	r3, #8
 8002754:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	4413      	add	r3, r2
 8002768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800276c:	461a      	mov	r2, r3
 800276e:	2310      	movs	r3, #16
 8002770:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	4413      	add	r3, r2
 8002784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002788:	461a      	mov	r2, r3
 800278a:	2340      	movs	r3, #64	; 0x40
 800278c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a4:	461a      	mov	r2, r3
 80027a6:	2302      	movs	r3, #2
 80027a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fc1b 	bl	8002ff2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	3301      	adds	r3, #1
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f47f af49 	bne.w	8002662 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f003 fe10 	bl	80063fa <USB_ReadInterrupts>
 80027da:	4603      	mov	r3, r0
 80027dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027e4:	d122      	bne.n	800282c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002800:	2b01      	cmp	r3, #1
 8002802:	d108      	bne.n	8002816 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800280c:	2100      	movs	r1, #0
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fe26 	bl	8003460 <HAL_PCDEx_LPM_Callback>
 8002814:	e002      	b.n	800281c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f007 f8c8 	bl	80099ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800282a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f003 fde2 	bl	80063fa <USB_ReadInterrupts>
 8002836:	4603      	mov	r3, r0
 8002838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800283c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002840:	d112      	bne.n	8002868 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d102      	bne.n	8002858 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f007 f884 	bl	8009960 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002866:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f003 fdc4 	bl	80063fa <USB_ReadInterrupts>
 8002872:	4603      	mov	r3, r0
 8002874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287c:	f040 80c7 	bne.w	8002a0e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800288e:	f023 0301 	bic.w	r3, r3, #1
 8002892:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2110      	movs	r1, #16
 800289a:	4618      	mov	r0, r3
 800289c:	f002 fe92 	bl	80055c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a4:	e056      	b.n	8002954 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b2:	461a      	mov	r2, r3
 80028b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ca:	0151      	lsls	r1, r2, #5
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	440a      	add	r2, r1
 80028d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028d8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80028da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ea:	0151      	lsls	r1, r2, #5
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	440a      	add	r2, r1
 80028f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002906:	461a      	mov	r2, r3
 8002908:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800290c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800291e:	0151      	lsls	r1, r2, #5
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	440a      	add	r2, r1
 8002924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002928:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800292c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800293e:	0151      	lsls	r1, r2, #5
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	440a      	add	r2, r1
 8002944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002948:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800294c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	3301      	adds	r3, #1
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800295a:	429a      	cmp	r2, r3
 800295c:	d3a3      	bcc.n	80028a6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800296c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002970:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800298a:	f043 030b 	orr.w	r3, r3, #11
 800298e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029a0:	f043 030b 	orr.w	r3, r3, #11
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	e015      	b.n	80029d4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029ba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80029be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ce:	f043 030b 	orr.w	r3, r3, #11
 80029d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80029e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029f8:	461a      	mov	r2, r3
 80029fa:	f003 fdc3 	bl	8006584 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 fcf1 	bl	80063fa <USB_ReadInterrupts>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a22:	d124      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f003 fd87 	bl	800653c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f002 fe27 	bl	8005686 <USB_GetDevSpeed>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681c      	ldr	r4, [r3, #0]
 8002a44:	f001 f956 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8002a48:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	4620      	mov	r0, r4
 8002a54:	f002 fb64 	bl	8005120 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f006 ff58 	bl	800990e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f003 fcc1 	bl	80063fa <USB_ReadInterrupts>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d10a      	bne.n	8002a98 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f006 ff35 	bl	80098f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f002 0208 	and.w	r2, r2, #8
 8002a96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f003 fcac 	bl	80063fa <USB_ReadInterrupts>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aac:	d10f      	bne.n	8002ace <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f006 ff97 	bl	80099ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695a      	ldr	r2, [r3, #20]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002acc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f003 fc91 	bl	80063fa <USB_ReadInterrupts>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ae2:	d10f      	bne.n	8002b04 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	4619      	mov	r1, r3
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f006 ff6a 	bl	80099c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f003 fc76 	bl	80063fa <USB_ReadInterrupts>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b18:	d10a      	bne.n	8002b30 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f006 ff78 	bl	8009a10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f003 fc60 	bl	80063fa <USB_ReadInterrupts>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d115      	bne.n	8002b70 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f006 ff68 	bl	8009a2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6859      	ldr	r1, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	e000      	b.n	8002b70 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002b6e:	bf00      	nop
    }
  }
}
 8002b70:	3734      	adds	r7, #52	; 0x34
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd90      	pop	{r4, r7, pc}

08002b76 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_PCD_SetAddress+0x1a>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e013      	b.n	8002bb8 <HAL_PCD_SetAddress+0x42>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 fbbe 	bl	800632a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	4608      	mov	r0, r1
 8002bca:	4611      	mov	r1, r2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4603      	mov	r3, r0
 8002bd0:	70fb      	strb	r3, [r7, #3]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	803b      	strh	r3, [r7, #0]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	da0f      	bge.n	8002c06 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	f003 020f 	and.w	r2, r3, #15
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	3338      	adds	r3, #56	; 0x38
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	705a      	strb	r2, [r3, #1]
 8002c04:	e00f      	b.n	8002c26 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	f003 020f 	and.w	r2, r3, #15
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c32:	883a      	ldrh	r2, [r7, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	78ba      	ldrb	r2, [r7, #2]
 8002c3c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	785b      	ldrb	r3, [r3, #1]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d004      	beq.n	8002c50 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c50:	78bb      	ldrb	r3, [r7, #2]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d102      	bne.n	8002c5c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_PCD_EP_Open+0xaa>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e00e      	b.n	8002c88 <HAL_PCD_EP_Open+0xc8>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68f9      	ldr	r1, [r7, #12]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f002 fd29 	bl	80056d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002c86:	7afb      	ldrb	r3, [r7, #11]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	da0f      	bge.n	8002cc4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	f003 020f 	and.w	r2, r3, #15
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	3338      	adds	r3, #56	; 0x38
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3304      	adds	r3, #4
 8002cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	705a      	strb	r2, [r3, #1]
 8002cc2:	e00f      	b.n	8002ce4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 020f 	and.w	r2, r3, #15
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	3304      	adds	r3, #4
 8002cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_PCD_EP_Close+0x6e>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e00e      	b.n	8002d1c <HAL_PCD_EP_Close+0x8c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68f9      	ldr	r1, [r7, #12]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f002 fd67 	bl	80057e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	460b      	mov	r3, r1
 8002d32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d34:	7afb      	ldrb	r3, [r7, #11]
 8002d36:	f003 020f 	and.w	r2, r3, #15
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4413      	add	r3, r2
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2200      	movs	r2, #0
 8002d64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d66:	7afb      	ldrb	r3, [r7, #11]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d102      	bne.n	8002d80 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d80:	7afb      	ldrb	r3, [r7, #11]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	6979      	ldr	r1, [r7, #20]
 8002d98:	f003 f842 	bl	8005e20 <USB_EP0StartXfer>
 8002d9c:	e008      	b.n	8002db0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	6979      	ldr	r1, [r7, #20]
 8002dac:	f002 fdf4 	bl	8005998 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	f003 020f 	and.w	r2, r3, #15
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002ddc:	681b      	ldr	r3, [r3, #0]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	460b      	mov	r3, r1
 8002df8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dfa:	7afb      	ldrb	r3, [r7, #11]
 8002dfc:	f003 020f 	and.w	r2, r3, #15
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	3338      	adds	r3, #56	; 0x38
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3304      	adds	r3, #4
 8002e10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2201      	movs	r2, #1
 8002e28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e2a:	7afb      	ldrb	r3, [r7, #11]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d102      	bne.n	8002e44 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e44:	7afb      	ldrb	r3, [r7, #11]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	6979      	ldr	r1, [r7, #20]
 8002e5c:	f002 ffe0 	bl	8005e20 <USB_EP0StartXfer>
 8002e60:	e008      	b.n	8002e74 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	6979      	ldr	r1, [r7, #20]
 8002e70:	f002 fd92 	bl	8005998 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	f003 020f 	and.w	r2, r3, #15
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d901      	bls.n	8002e9c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e050      	b.n	8002f3e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	da0f      	bge.n	8002ec4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	f003 020f 	and.w	r2, r3, #15
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	3338      	adds	r3, #56	; 0x38
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3304      	adds	r3, #4
 8002eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	705a      	strb	r2, [r3, #1]
 8002ec2:	e00d      	b.n	8002ee0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_PCD_EP_SetStall+0x82>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e01e      	b.n	8002f3e <HAL_PCD_EP_SetStall+0xc0>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68f9      	ldr	r1, [r7, #12]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f003 f937 	bl	8006182 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	b2d9      	uxtb	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f003 fb28 	bl	8006584 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 020f 	and.w	r2, r3, #15
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d901      	bls.n	8002f64 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e042      	b.n	8002fea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	da0f      	bge.n	8002f8c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	f003 020f 	and.w	r2, r3, #15
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	3338      	adds	r3, #56	; 0x38
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	3304      	adds	r3, #4
 8002f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	705a      	strb	r2, [r3, #1]
 8002f8a:	e00f      	b.n	8002fac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	f003 020f 	and.w	r2, r3, #15
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_PCD_EP_ClrStall+0x86>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e00e      	b.n	8002fea <HAL_PCD_EP_ClrStall+0xa4>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68f9      	ldr	r1, [r7, #12]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f003 f93f 	bl	800625e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b08a      	sub	sp, #40	; 0x28
 8002ff6:	af02      	add	r7, sp, #8
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	3338      	adds	r3, #56	; 0x38
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	3304      	adds	r3, #4
 8003018:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	429a      	cmp	r2, r3
 8003024:	d901      	bls.n	800302a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e06c      	b.n	8003104 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	429a      	cmp	r2, r3
 800303e:	d902      	bls.n	8003046 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3303      	adds	r3, #3
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800304e:	e02b      	b.n	80030a8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	429a      	cmp	r2, r3
 8003064:	d902      	bls.n	800306c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	3303      	adds	r3, #3
 8003070:	089b      	lsrs	r3, r3, #2
 8003072:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	68d9      	ldr	r1, [r3, #12]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	b2da      	uxtb	r2, r3
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003084:	b2db      	uxtb	r3, r3
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	4603      	mov	r3, r0
 800308a:	6978      	ldr	r0, [r7, #20]
 800308c:	f003 f81b 	bl	80060c6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	441a      	add	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	699a      	ldr	r2, [r3, #24]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	441a      	add	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d809      	bhi.n	80030d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d203      	bcs.n	80030d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1be      	bne.n	8003050 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d811      	bhi.n	8003102 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	2201      	movs	r2, #1
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	6939      	ldr	r1, [r7, #16]
 80030fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030fe:	4013      	ands	r3, r2
 8003100:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3720      	adds	r7, #32
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	333c      	adds	r3, #60	; 0x3c
 8003124:	3304      	adds	r3, #4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2b01      	cmp	r3, #1
 8003140:	f040 80a0 	bne.w	8003284 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d015      	beq.n	800317a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4a72      	ldr	r2, [pc, #456]	; (800331c <PCD_EP_OutXfrComplete_int+0x210>)
 8003152:	4293      	cmp	r3, r2
 8003154:	f240 80dd 	bls.w	8003312 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80d7 	beq.w	8003312 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003170:	461a      	mov	r2, r3
 8003172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003176:	6093      	str	r3, [r2, #8]
 8003178:	e0cb      	b.n	8003312 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b00      	cmp	r3, #0
 8003182:	d009      	beq.n	8003198 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4413      	add	r3, r2
 800318c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003190:	461a      	mov	r2, r3
 8003192:	2320      	movs	r3, #32
 8003194:	6093      	str	r3, [r2, #8]
 8003196:	e0bc      	b.n	8003312 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 80b7 	bne.w	8003312 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4a5d      	ldr	r2, [pc, #372]	; (800331c <PCD_EP_OutXfrComplete_int+0x210>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d90f      	bls.n	80031cc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c2:	461a      	mov	r2, r3
 80031c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c8:	6093      	str	r3, [r2, #8]
 80031ca:	e0a2      	b.n	8003312 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031de:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	0159      	lsls	r1, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	440b      	add	r3, r1
 80031e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80031f2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4403      	add	r3, r0
 8003202:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003206:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800321a:	6819      	ldr	r1, [r3, #0]
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4403      	add	r3, r0
 800322a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4419      	add	r1, r3
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4403      	add	r3, r0
 8003240:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003244:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d114      	bne.n	8003276 <PCD_EP_OutXfrComplete_int+0x16a>
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d108      	bne.n	8003276 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800326e:	461a      	mov	r2, r3
 8003270:	2101      	movs	r1, #1
 8003272:	f003 f987 	bl	8006584 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f006 fb03 	bl	8009888 <HAL_PCD_DataOutStageCallback>
 8003282:	e046      	b.n	8003312 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4a26      	ldr	r2, [pc, #152]	; (8003320 <PCD_EP_OutXfrComplete_int+0x214>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d124      	bne.n	80032d6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a2:	461a      	mov	r2, r3
 80032a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a8:	6093      	str	r3, [r2, #8]
 80032aa:	e032      	b.n	8003312 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c2:	461a      	mov	r2, r3
 80032c4:	2320      	movs	r3, #32
 80032c6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	4619      	mov	r1, r3
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f006 fada 	bl	8009888 <HAL_PCD_DataOutStageCallback>
 80032d4:	e01d      	b.n	8003312 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d114      	bne.n	8003306 <PCD_EP_OutXfrComplete_int+0x1fa>
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d108      	bne.n	8003306 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032fe:	461a      	mov	r2, r3
 8003300:	2100      	movs	r1, #0
 8003302:	f003 f93f 	bl	8006584 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	4619      	mov	r1, r3
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f006 fabb 	bl	8009888 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	4f54300a 	.word	0x4f54300a
 8003320:	4f54310a 	.word	0x4f54310a

08003324 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	333c      	adds	r3, #60	; 0x3c
 800333c:	3304      	adds	r3, #4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4413      	add	r3, r2
 800334a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4a15      	ldr	r2, [pc, #84]	; (80033ac <PCD_EP_OutSetupPacket_int+0x88>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d90e      	bls.n	8003378 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003360:	2b00      	cmp	r3, #0
 8003362:	d009      	beq.n	8003378 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003370:	461a      	mov	r2, r3
 8003372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003376:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f006 fa73 	bl	8009864 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4a0a      	ldr	r2, [pc, #40]	; (80033ac <PCD_EP_OutSetupPacket_int+0x88>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d90c      	bls.n	80033a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d108      	bne.n	80033a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003398:	461a      	mov	r2, r3
 800339a:	2101      	movs	r1, #1
 800339c:	f003 f8f2 	bl	8006584 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	4f54300a 	.word	0x4f54300a

080033b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	70fb      	strb	r3, [r7, #3]
 80033bc:	4613      	mov	r3, r2
 80033be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d107      	bne.n	80033de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033ce:	883b      	ldrh	r3, [r7, #0]
 80033d0:	0419      	lsls	r1, r3, #16
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	430a      	orrs	r2, r1
 80033da:	629a      	str	r2, [r3, #40]	; 0x28
 80033dc:	e028      	b.n	8003430 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	4413      	add	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	e00d      	b.n	800340e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	3340      	adds	r3, #64	; 0x40
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	0c1b      	lsrs	r3, r3, #16
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	4413      	add	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	3301      	adds	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
 800340e:	7bfa      	ldrb	r2, [r7, #15]
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	3b01      	subs	r3, #1
 8003414:	429a      	cmp	r2, r3
 8003416:	d3ec      	bcc.n	80033f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003418:	883b      	ldrh	r3, [r7, #0]
 800341a:	0418      	lsls	r0, r3, #16
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6819      	ldr	r1, [r3, #0]
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	3b01      	subs	r3, #1
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	4302      	orrs	r2, r0
 8003428:	3340      	adds	r3, #64	; 0x40
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	460b      	mov	r3, r1
 8003448:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e264      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d075      	beq.n	8003582 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003496:	4ba3      	ldr	r3, [pc, #652]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d00c      	beq.n	80034bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a2:	4ba0      	ldr	r3, [pc, #640]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d112      	bne.n	80034d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ae:	4b9d      	ldr	r3, [pc, #628]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ba:	d10b      	bne.n	80034d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034bc:	4b99      	ldr	r3, [pc, #612]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d05b      	beq.n	8003580 <HAL_RCC_OscConfig+0x108>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d157      	bne.n	8003580 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e23f      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034dc:	d106      	bne.n	80034ec <HAL_RCC_OscConfig+0x74>
 80034de:	4b91      	ldr	r3, [pc, #580]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a90      	ldr	r2, [pc, #576]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	e01d      	b.n	8003528 <HAL_RCC_OscConfig+0xb0>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x98>
 80034f6:	4b8b      	ldr	r3, [pc, #556]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a8a      	ldr	r2, [pc, #552]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	4b88      	ldr	r3, [pc, #544]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a87      	ldr	r2, [pc, #540]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e00b      	b.n	8003528 <HAL_RCC_OscConfig+0xb0>
 8003510:	4b84      	ldr	r3, [pc, #528]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a83      	ldr	r2, [pc, #524]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b81      	ldr	r3, [pc, #516]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a80      	ldr	r2, [pc, #512]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d013      	beq.n	8003558 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fd ff00 	bl	8001334 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003538:	f7fd fefc 	bl	8001334 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b64      	cmp	r3, #100	; 0x64
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e204      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	4b76      	ldr	r3, [pc, #472]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0xc0>
 8003556:	e014      	b.n	8003582 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fd feec 	bl	8001334 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003560:	f7fd fee8 	bl	8001334 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e1f0      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003572:	4b6c      	ldr	r3, [pc, #432]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0xe8>
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d063      	beq.n	8003656 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800358e:	4b65      	ldr	r3, [pc, #404]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00b      	beq.n	80035b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359a:	4b62      	ldr	r3, [pc, #392]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d11c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035a6:	4b5f      	ldr	r3, [pc, #380]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d116      	bne.n	80035e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b2:	4b5c      	ldr	r3, [pc, #368]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <HAL_RCC_OscConfig+0x152>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d001      	beq.n	80035ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e1c4      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ca:	4b56      	ldr	r3, [pc, #344]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4952      	ldr	r1, [pc, #328]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035de:	e03a      	b.n	8003656 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d020      	beq.n	800362a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e8:	4b4f      	ldr	r3, [pc, #316]	; (8003728 <HAL_RCC_OscConfig+0x2b0>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ee:	f7fd fea1 	bl	8001334 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f6:	f7fd fe9d 	bl	8001334 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e1a5      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003608:	4b46      	ldr	r3, [pc, #280]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003614:	4b43      	ldr	r3, [pc, #268]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4940      	ldr	r1, [pc, #256]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]
 8003628:	e015      	b.n	8003656 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362a:	4b3f      	ldr	r3, [pc, #252]	; (8003728 <HAL_RCC_OscConfig+0x2b0>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fd fe80 	bl	8001334 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003638:	f7fd fe7c 	bl	8001334 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e184      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364a:	4b36      	ldr	r3, [pc, #216]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d030      	beq.n	80036c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d016      	beq.n	8003698 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800366a:	4b30      	ldr	r3, [pc, #192]	; (800372c <HAL_RCC_OscConfig+0x2b4>)
 800366c:	2201      	movs	r2, #1
 800366e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003670:	f7fd fe60 	bl	8001334 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003678:	f7fd fe5c 	bl	8001334 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e164      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x200>
 8003696:	e015      	b.n	80036c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003698:	4b24      	ldr	r3, [pc, #144]	; (800372c <HAL_RCC_OscConfig+0x2b4>)
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369e:	f7fd fe49 	bl	8001334 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a6:	f7fd fe45 	bl	8001334 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e14d      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b8:	4b1a      	ldr	r3, [pc, #104]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80036ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f0      	bne.n	80036a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80a0 	beq.w	8003812 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d2:	2300      	movs	r3, #0
 80036d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d6:	4b13      	ldr	r3, [pc, #76]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10f      	bne.n	8003702 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f0:	6413      	str	r3, [r2, #64]	; 0x40
 80036f2:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <HAL_RCC_OscConfig+0x2ac>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036fe:	2301      	movs	r3, #1
 8003700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_RCC_OscConfig+0x2b8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d121      	bne.n	8003752 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800370e:	4b08      	ldr	r3, [pc, #32]	; (8003730 <HAL_RCC_OscConfig+0x2b8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a07      	ldr	r2, [pc, #28]	; (8003730 <HAL_RCC_OscConfig+0x2b8>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371a:	f7fd fe0b 	bl	8001334 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003720:	e011      	b.n	8003746 <HAL_RCC_OscConfig+0x2ce>
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800
 8003728:	42470000 	.word	0x42470000
 800372c:	42470e80 	.word	0x42470e80
 8003730:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003734:	f7fd fdfe 	bl	8001334 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e106      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003746:	4b85      	ldr	r3, [pc, #532]	; (800395c <HAL_RCC_OscConfig+0x4e4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d106      	bne.n	8003768 <HAL_RCC_OscConfig+0x2f0>
 800375a:	4b81      	ldr	r3, [pc, #516]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	4a80      	ldr	r2, [pc, #512]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	6713      	str	r3, [r2, #112]	; 0x70
 8003766:	e01c      	b.n	80037a2 <HAL_RCC_OscConfig+0x32a>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b05      	cmp	r3, #5
 800376e:	d10c      	bne.n	800378a <HAL_RCC_OscConfig+0x312>
 8003770:	4b7b      	ldr	r3, [pc, #492]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	4a7a      	ldr	r2, [pc, #488]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003776:	f043 0304 	orr.w	r3, r3, #4
 800377a:	6713      	str	r3, [r2, #112]	; 0x70
 800377c:	4b78      	ldr	r3, [pc, #480]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	4a77      	ldr	r2, [pc, #476]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6713      	str	r3, [r2, #112]	; 0x70
 8003788:	e00b      	b.n	80037a2 <HAL_RCC_OscConfig+0x32a>
 800378a:	4b75      	ldr	r3, [pc, #468]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	4a74      	ldr	r2, [pc, #464]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	6713      	str	r3, [r2, #112]	; 0x70
 8003796:	4b72      	ldr	r3, [pc, #456]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	4a71      	ldr	r2, [pc, #452]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 800379c:	f023 0304 	bic.w	r3, r3, #4
 80037a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d015      	beq.n	80037d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037aa:	f7fd fdc3 	bl	8001334 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b0:	e00a      	b.n	80037c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b2:	f7fd fdbf 	bl	8001334 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e0c5      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c8:	4b65      	ldr	r3, [pc, #404]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0ee      	beq.n	80037b2 <HAL_RCC_OscConfig+0x33a>
 80037d4:	e014      	b.n	8003800 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d6:	f7fd fdad 	bl	8001334 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fd fda9 	bl	8001334 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e0af      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f4:	4b5a      	ldr	r3, [pc, #360]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1ee      	bne.n	80037de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d105      	bne.n	8003812 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003806:	4b56      	ldr	r3, [pc, #344]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	4a55      	ldr	r2, [pc, #340]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 800380c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003810:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 809b 	beq.w	8003952 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800381c:	4b50      	ldr	r3, [pc, #320]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b08      	cmp	r3, #8
 8003826:	d05c      	beq.n	80038e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d141      	bne.n	80038b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003830:	4b4c      	ldr	r3, [pc, #304]	; (8003964 <HAL_RCC_OscConfig+0x4ec>)
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003836:	f7fd fd7d 	bl	8001334 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383e:	f7fd fd79 	bl	8001334 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e081      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003850:	4b43      	ldr	r3, [pc, #268]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f0      	bne.n	800383e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	019b      	lsls	r3, r3, #6
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	3b01      	subs	r3, #1
 8003876:	041b      	lsls	r3, r3, #16
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	061b      	lsls	r3, r3, #24
 8003880:	4937      	ldr	r1, [pc, #220]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 8003882:	4313      	orrs	r3, r2
 8003884:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003886:	4b37      	ldr	r3, [pc, #220]	; (8003964 <HAL_RCC_OscConfig+0x4ec>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388c:	f7fd fd52 	bl	8001334 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003894:	f7fd fd4e 	bl	8001334 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e056      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	4b2e      	ldr	r3, [pc, #184]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x41c>
 80038b2:	e04e      	b.n	8003952 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b4:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <HAL_RCC_OscConfig+0x4ec>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ba:	f7fd fd3b 	bl	8001334 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c2:	f7fd fd37 	bl	8001334 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e03f      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d4:	4b22      	ldr	r3, [pc, #136]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f0      	bne.n	80038c2 <HAL_RCC_OscConfig+0x44a>
 80038e0:	e037      	b.n	8003952 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e032      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038ee:	4b1c      	ldr	r3, [pc, #112]	; (8003960 <HAL_RCC_OscConfig+0x4e8>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d028      	beq.n	800394e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d121      	bne.n	800394e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003914:	429a      	cmp	r2, r3
 8003916:	d11a      	bne.n	800394e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800391e:	4013      	ands	r3, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003924:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003926:	4293      	cmp	r3, r2
 8003928:	d111      	bne.n	800394e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	085b      	lsrs	r3, r3, #1
 8003936:	3b01      	subs	r3, #1
 8003938:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d107      	bne.n	800394e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d001      	beq.n	8003952 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40007000 	.word	0x40007000
 8003960:	40023800 	.word	0x40023800
 8003964:	42470060 	.word	0x42470060

08003968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0cc      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800397c:	4b68      	ldr	r3, [pc, #416]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d90c      	bls.n	80039a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398a:	4b65      	ldr	r3, [pc, #404]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b63      	ldr	r3, [pc, #396]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0b8      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039bc:	4b59      	ldr	r3, [pc, #356]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	4a58      	ldr	r2, [pc, #352]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d4:	4b53      	ldr	r3, [pc, #332]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	4a52      	ldr	r2, [pc, #328]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e0:	4b50      	ldr	r3, [pc, #320]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	494d      	ldr	r1, [pc, #308]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d044      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d107      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a06:	4b47      	ldr	r3, [pc, #284]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d119      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e07f      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d003      	beq.n	8003a26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a26:	4b3f      	ldr	r3, [pc, #252]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e06f      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a36:	4b3b      	ldr	r3, [pc, #236]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e067      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a46:	4b37      	ldr	r3, [pc, #220]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f023 0203 	bic.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4934      	ldr	r1, [pc, #208]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a58:	f7fd fc6c 	bl	8001334 <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a60:	f7fd fc68 	bl	8001334 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e04f      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	4b2b      	ldr	r3, [pc, #172]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 020c 	and.w	r2, r3, #12
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d1eb      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a88:	4b25      	ldr	r3, [pc, #148]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d20c      	bcs.n	8003ab0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b22      	ldr	r3, [pc, #136]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e032      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003abc:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4916      	ldr	r1, [pc, #88]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ada:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	490e      	ldr	r1, [pc, #56]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aee:	f000 f821 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8003af2:	4602      	mov	r2, r0
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	490a      	ldr	r1, [pc, #40]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003b00:	5ccb      	ldrb	r3, [r1, r3]
 8003b02:	fa22 f303 	lsr.w	r3, r2, r3
 8003b06:	4a09      	ldr	r2, [pc, #36]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fd fb10 	bl	8001134 <HAL_InitTick>

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40023c00 	.word	0x40023c00
 8003b24:	40023800 	.word	0x40023800
 8003b28:	08009ed0 	.word	0x08009ed0
 8003b2c:	20000000 	.word	0x20000000
 8003b30:	20000004 	.word	0x20000004

08003b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	2300      	movs	r3, #0
 8003b46:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b4c:	4b67      	ldr	r3, [pc, #412]	; (8003cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d00d      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x40>
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	f200 80bd 	bhi.w	8003cd8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0x34>
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d003      	beq.n	8003b6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b66:	e0b7      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b68:	4b61      	ldr	r3, [pc, #388]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b6a:	60bb      	str	r3, [r7, #8]
       break;
 8003b6c:	e0b7      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b6e:	4b60      	ldr	r3, [pc, #384]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b70:	60bb      	str	r3, [r7, #8]
      break;
 8003b72:	e0b4      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b74:	4b5d      	ldr	r3, [pc, #372]	; (8003cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b7e:	4b5b      	ldr	r3, [pc, #364]	; (8003cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d04d      	beq.n	8003c26 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b8a:	4b58      	ldr	r3, [pc, #352]	; (8003cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	099b      	lsrs	r3, r3, #6
 8003b90:	461a      	mov	r2, r3
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b9a:	f04f 0100 	mov.w	r1, #0
 8003b9e:	ea02 0800 	and.w	r8, r2, r0
 8003ba2:	ea03 0901 	and.w	r9, r3, r1
 8003ba6:	4640      	mov	r0, r8
 8003ba8:	4649      	mov	r1, r9
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	014b      	lsls	r3, r1, #5
 8003bb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bb8:	0142      	lsls	r2, r0, #5
 8003bba:	4610      	mov	r0, r2
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	ebb0 0008 	subs.w	r0, r0, r8
 8003bc2:	eb61 0109 	sbc.w	r1, r1, r9
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	018b      	lsls	r3, r1, #6
 8003bd0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bd4:	0182      	lsls	r2, r0, #6
 8003bd6:	1a12      	subs	r2, r2, r0
 8003bd8:	eb63 0301 	sbc.w	r3, r3, r1
 8003bdc:	f04f 0000 	mov.w	r0, #0
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	00d9      	lsls	r1, r3, #3
 8003be6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bea:	00d0      	lsls	r0, r2, #3
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	eb12 0208 	adds.w	r2, r2, r8
 8003bf4:	eb43 0309 	adc.w	r3, r3, r9
 8003bf8:	f04f 0000 	mov.w	r0, #0
 8003bfc:	f04f 0100 	mov.w	r1, #0
 8003c00:	0299      	lsls	r1, r3, #10
 8003c02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c06:	0290      	lsls	r0, r2, #10
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	f7fc fada 	bl	80001d0 <__aeabi_uldivmod>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4613      	mov	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	e04a      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c26:	4b31      	ldr	r3, [pc, #196]	; (8003cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	099b      	lsrs	r3, r3, #6
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c36:	f04f 0100 	mov.w	r1, #0
 8003c3a:	ea02 0400 	and.w	r4, r2, r0
 8003c3e:	ea03 0501 	and.w	r5, r3, r1
 8003c42:	4620      	mov	r0, r4
 8003c44:	4629      	mov	r1, r5
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	014b      	lsls	r3, r1, #5
 8003c50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c54:	0142      	lsls	r2, r0, #5
 8003c56:	4610      	mov	r0, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	1b00      	subs	r0, r0, r4
 8003c5c:	eb61 0105 	sbc.w	r1, r1, r5
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	018b      	lsls	r3, r1, #6
 8003c6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c6e:	0182      	lsls	r2, r0, #6
 8003c70:	1a12      	subs	r2, r2, r0
 8003c72:	eb63 0301 	sbc.w	r3, r3, r1
 8003c76:	f04f 0000 	mov.w	r0, #0
 8003c7a:	f04f 0100 	mov.w	r1, #0
 8003c7e:	00d9      	lsls	r1, r3, #3
 8003c80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c84:	00d0      	lsls	r0, r2, #3
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	1912      	adds	r2, r2, r4
 8003c8c:	eb45 0303 	adc.w	r3, r5, r3
 8003c90:	f04f 0000 	mov.w	r0, #0
 8003c94:	f04f 0100 	mov.w	r1, #0
 8003c98:	0299      	lsls	r1, r3, #10
 8003c9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c9e:	0290      	lsls	r0, r2, #10
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	f7fc fa8e 	bl	80001d0 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	60bb      	str	r3, [r7, #8]
      break;
 8003cd6:	e002      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003cda:	60bb      	str	r3, [r7, #8]
      break;
 8003cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cde:	68bb      	ldr	r3, [r7, #8]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	00f42400 	.word	0x00f42400

08003cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20000000 	.word	0x20000000

08003d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d10:	f7ff fff0 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	0a9b      	lsrs	r3, r3, #10
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	4903      	ldr	r1, [pc, #12]	; (8003d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d22:	5ccb      	ldrb	r3, [r1, r3]
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	08009ee0 	.word	0x08009ee0

08003d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d38:	f7ff ffdc 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	0b5b      	lsrs	r3, r3, #13
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	4903      	ldr	r1, [pc, #12]	; (8003d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d4a:	5ccb      	ldrb	r3, [r1, r3]
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40023800 	.word	0x40023800
 8003d58:	08009ee0 	.word	0x08009ee0

08003d5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	220f      	movs	r2, #15
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0203 	and.w	r2, r3, #3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	08db      	lsrs	r3, r3, #3
 8003d96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <HAL_RCC_GetClockConfig+0x60>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0207 	and.w	r2, r3, #7
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	601a      	str	r2, [r3, #0]
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40023c00 	.word	0x40023c00

08003dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d035      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003de8:	4b62      	ldr	r3, [pc, #392]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dee:	f7fd faa1 	bl	8001334 <HAL_GetTick>
 8003df2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003df4:	e008      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003df6:	f7fd fa9d 	bl	8001334 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e0b0      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e08:	4b5b      	ldr	r3, [pc, #364]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1f0      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	019a      	lsls	r2, r3, #6
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	071b      	lsls	r3, r3, #28
 8003e20:	4955      	ldr	r1, [pc, #340]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e28:	4b52      	ldr	r3, [pc, #328]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e2e:	f7fd fa81 	bl	8001334 <HAL_GetTick>
 8003e32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e36:	f7fd fa7d 	bl	8001334 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e090      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e48:	4b4b      	ldr	r3, [pc, #300]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8083 	beq.w	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	4b44      	ldr	r3, [pc, #272]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	4a43      	ldr	r2, [pc, #268]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e70:	6413      	str	r3, [r2, #64]	; 0x40
 8003e72:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e7e:	4b3f      	ldr	r3, [pc, #252]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a3e      	ldr	r2, [pc, #248]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e8a:	f7fd fa53 	bl	8001334 <HAL_GetTick>
 8003e8e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e92:	f7fd fa4f 	bl	8001334 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e062      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ea4:	4b35      	ldr	r3, [pc, #212]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eb0:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d02f      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d028      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ece:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ed8:	4b29      	ldr	r3, [pc, #164]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ede:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ee4:	4a24      	ldr	r2, [pc, #144]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003eea:	4b23      	ldr	r3, [pc, #140]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d114      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ef6:	f7fd fa1d 	bl	8001334 <HAL_GetTick>
 8003efa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fd fa19 	bl	8001334 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e02a      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f14:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ee      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f2c:	d10d      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f2e:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f42:	490d      	ldr	r1, [pc, #52]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]
 8003f48:	e005      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f50:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f54:	6093      	str	r3, [r2, #8]
 8003f56:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f62:	4905      	ldr	r1, [pc, #20]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	42470068 	.word	0x42470068
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40007000 	.word	0x40007000
 8003f80:	42470e40 	.word	0x42470e40

08003f84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e083      	b.n	800409e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	7f5b      	ldrb	r3, [r3, #29]
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d105      	bne.n	8003fac <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fc ff72 	bl	8000e90 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	22ca      	movs	r2, #202	; 0xca
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2253      	movs	r2, #83	; 0x53
 8003fc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f9fb 	bl	80043be <RTC_EnterInitMode>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	22ff      	movs	r2, #255	; 0xff
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2204      	movs	r2, #4
 8003fda:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e05e      	b.n	800409e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6812      	ldr	r2, [r2, #0]
 8003fea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6899      	ldr	r1, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68d2      	ldr	r2, [r2, #12]
 800401a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6919      	ldr	r1, [r3, #16]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	041a      	lsls	r2, r3, #16
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800403e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10e      	bne.n	800406c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f98d 	bl	800436e <HAL_RTC_WaitForSynchro>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d008      	beq.n	800406c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	22ff      	movs	r2, #255	; 0xff
 8004060:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2204      	movs	r2, #4
 8004066:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e018      	b.n	800409e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800407a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	22ff      	movs	r2, #255	; 0xff
 8004094:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800409c:	2300      	movs	r3, #0
  }
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040a6:	b590      	push	{r4, r7, lr}
 80040a8:	b087      	sub	sp, #28
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	7f1b      	ldrb	r3, [r3, #28]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_RTC_SetTime+0x1c>
 80040be:	2302      	movs	r3, #2
 80040c0:	e0aa      	b.n	8004218 <HAL_RTC_SetTime+0x172>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2202      	movs	r2, #2
 80040cc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d126      	bne.n	8004122 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2200      	movs	r2, #0
 80040e6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 f992 	bl	8004416 <RTC_ByteToBcd2>
 80040f2:	4603      	mov	r3, r0
 80040f4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	785b      	ldrb	r3, [r3, #1]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f98b 	bl	8004416 <RTC_ByteToBcd2>
 8004100:	4603      	mov	r3, r0
 8004102:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004104:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	789b      	ldrb	r3, [r3, #2]
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f983 	bl	8004416 <RTC_ByteToBcd2>
 8004110:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004112:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	78db      	ldrb	r3, [r3, #3]
 800411a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	e018      	b.n	8004154 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2200      	movs	r2, #0
 8004134:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	785b      	ldrb	r3, [r3, #1]
 8004140:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004142:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004148:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	78db      	ldrb	r3, [r3, #3]
 800414e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	22ca      	movs	r2, #202	; 0xca
 800415a:	625a      	str	r2, [r3, #36]	; 0x24
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2253      	movs	r2, #83	; 0x53
 8004162:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f92a 	bl	80043be <RTC_EnterInitMode>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00b      	beq.n	8004188 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	22ff      	movs	r2, #255	; 0xff
 8004176:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2204      	movs	r2, #4
 800417c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e047      	b.n	8004218 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004192:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004196:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041a6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6899      	ldr	r1, [r3, #8]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041ce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d111      	bne.n	8004202 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f8c5 	bl	800436e <HAL_RTC_WaitForSynchro>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	22ff      	movs	r2, #255	; 0xff
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2204      	movs	r2, #4
 80041f6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e00a      	b.n	8004218 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	22ff      	movs	r2, #255	; 0xff
 8004208:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004216:	2300      	movs	r3, #0
  }
}
 8004218:	4618      	mov	r0, r3
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	bd90      	pop	{r4, r7, pc}

08004220 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004220:	b590      	push	{r4, r7, lr}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	7f1b      	ldrb	r3, [r3, #28]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_RTC_SetDate+0x1c>
 8004238:	2302      	movs	r3, #2
 800423a:	e094      	b.n	8004366 <HAL_RTC_SetDate+0x146>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2201      	movs	r2, #1
 8004240:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2202      	movs	r2, #2
 8004246:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10e      	bne.n	800426c <HAL_RTC_SetDate+0x4c>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	785b      	ldrb	r3, [r3, #1]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b00      	cmp	r3, #0
 8004258:	d008      	beq.n	800426c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	785b      	ldrb	r3, [r3, #1]
 800425e:	f023 0310 	bic.w	r3, r3, #16
 8004262:	b2db      	uxtb	r3, r3
 8004264:	330a      	adds	r3, #10
 8004266:	b2da      	uxtb	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d11c      	bne.n	80042ac <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	78db      	ldrb	r3, [r3, #3]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f8cd 	bl	8004416 <RTC_ByteToBcd2>
 800427c:	4603      	mov	r3, r0
 800427e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	4618      	mov	r0, r3
 8004286:	f000 f8c6 	bl	8004416 <RTC_ByteToBcd2>
 800428a:	4603      	mov	r3, r0
 800428c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800428e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	789b      	ldrb	r3, [r3, #2]
 8004294:	4618      	mov	r0, r3
 8004296:	f000 f8be 	bl	8004416 <RTC_ByteToBcd2>
 800429a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800429c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80042a6:	4313      	orrs	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	e00e      	b.n	80042ca <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	78db      	ldrb	r3, [r3, #3]
 80042b0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	785b      	ldrb	r3, [r3, #1]
 80042b6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80042b8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80042be:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80042c6:	4313      	orrs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	22ca      	movs	r2, #202	; 0xca
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2253      	movs	r2, #83	; 0x53
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f86f 	bl	80043be <RTC_EnterInitMode>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	22ff      	movs	r2, #255	; 0xff
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2204      	movs	r2, #4
 80042f2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e033      	b.n	8004366 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004308:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800430c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800431c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d111      	bne.n	8004350 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f81e 	bl	800436e <HAL_RTC_WaitForSynchro>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00b      	beq.n	8004350 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	22ff      	movs	r2, #255	; 0xff
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2204      	movs	r2, #4
 8004344:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e00a      	b.n	8004366 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	22ff      	movs	r2, #255	; 0xff
 8004356:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2201      	movs	r2, #1
 800435c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004364:	2300      	movs	r3, #0
  }
}
 8004366:	4618      	mov	r0, r3
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	bd90      	pop	{r4, r7, pc}

0800436e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004388:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800438a:	f7fc ffd3 	bl	8001334 <HAL_GetTick>
 800438e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004390:	e009      	b.n	80043a6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004392:	f7fc ffcf 	bl	8001334 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043a0:	d901      	bls.n	80043a6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e007      	b.n	80043b6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0ee      	beq.n	8004392 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d119      	bne.n	800440c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f04f 32ff 	mov.w	r2, #4294967295
 80043e0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043e2:	f7fc ffa7 	bl	8001334 <HAL_GetTick>
 80043e6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80043e8:	e009      	b.n	80043fe <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80043ea:	f7fc ffa3 	bl	8001334 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043f8:	d901      	bls.n	80043fe <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e007      	b.n	800440e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0ee      	beq.n	80043ea <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004416:	b480      	push	{r7}
 8004418:	b085      	sub	sp, #20
 800441a:	af00      	add	r7, sp, #0
 800441c:	4603      	mov	r3, r0
 800441e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004424:	e005      	b.n	8004432 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3301      	adds	r3, #1
 800442a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	3b0a      	subs	r3, #10
 8004430:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	2b09      	cmp	r3, #9
 8004436:	d8f6      	bhi.n	8004426 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	b2da      	uxtb	r2, r3
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	4313      	orrs	r3, r2
 8004444:	b2db      	uxtb	r3, r3
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_SMBUS_Init>:
  * @param  hsmbus pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	60bb      	str	r3, [r7, #8]

  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_SMBUS_Init+0x1a>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e0a3      	b.n	80045b6 <HAL_SMBUS_Init+0x162>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <HAL_SMBUS_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fc fcbc 	bl	8000e00 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2224      	movs	r2, #36	; 0x24
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044a0:	f7ff fc34 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 80044a4:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = SMBUS_FREQRANGE(pclk1);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4a45      	ldr	r2, [pc, #276]	; (80045c0 <HAL_SMBUS_Init+0x16c>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	0c9b      	lsrs	r3, r3, #18
 80044b0:	60fb      	str	r3, [r7, #12]

  /*---------------------------- SMBUSx CR2 Configuration ----------------------*/
  /* Configure SMBUSx: Frequency range */
  MODIFY_REG(hsmbus->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx TRISE Configuration --------------------*/
  /* Configure SMBUSx: Rise Time */
  MODIFY_REG(hsmbus->Instance->TRISE, I2C_TRISE_TRISE, SMBUS_RISE_TIME(freqrange));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	621a      	str	r2, [r3, #32]

  /*---------------------------- SMBUSx CCR Configuration ----------------------*/
  /* Configure SMBUSx: Speed */
  MODIFY_REG(hsmbus->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), SMBUS_SPEED_STANDARD(pclk1, hsmbus->Init.ClockSpeed));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80044e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6852      	ldr	r2, [r2, #4]
 80044ee:	0052      	lsls	r2, r2, #1
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	fbb1 f1f2 	udiv	r1, r1, r2
 80044f6:	f640 72fc 	movw	r2, #4092	; 0xffc
 80044fa:	400a      	ands	r2, r1
 80044fc:	2a00      	cmp	r2, #0
 80044fe:	d006      	beq.n	800450e <HAL_SMBUS_Init+0xba>
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6852      	ldr	r2, [r2, #4]
 8004504:	0052      	lsls	r2, r2, #1
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	fbb1 f2f2 	udiv	r2, r1, r2
 800450c:	e000      	b.n	8004510 <HAL_SMBUS_Init+0xbc>
 800450e:	2204      	movs	r2, #4
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	6809      	ldr	r1, [r1, #0]
 8004514:	4313      	orrs	r3, r2
 8004516:	61cb      	str	r3, [r1, #28]

  /*---------------------------- SMBUSx CR1 Configuration ----------------------*/
  /* Configure SMBUSx: Generalcall , PEC , Peripheral mode and  NoStretch mode */
  MODIFY_REG(hsmbus->Instance->CR1, (I2C_CR1_NOSTRETCH | I2C_CR1_ENGC | I2C_CR1_PEC | I2C_CR1_ENARP | I2C_CR1_SMBTYPE | I2C_CR1_SMBUS), (hsmbus->Init.NoStretchMode | hsmbus->Init.GeneralCallMode |  hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f423 5386 	bic.w	r3, r3, #4288	; 0x10c0
 8004522:	f023 031a 	bic.w	r3, r3, #26
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6a11      	ldr	r1, [r2, #32]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	69d2      	ldr	r2, [r2, #28]
 800452e:	4311      	orrs	r1, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004534:	4311      	orrs	r1, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800453a:	4311      	orrs	r1, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	430b      	orrs	r3, r1
 8004542:	6013      	str	r3, [r2, #0]

  /*---------------------------- SMBUSx OAR1 Configuration ---------------------*/
  /* Configure SMBUSx: Own Address1 and addressing mode */
  MODIFY_REG(hsmbus->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hsmbus->Init.AddressingMode | hsmbus->Init.OwnAddress1));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800454e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6911      	ldr	r1, [r2, #16]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	68d2      	ldr	r2, [r2, #12]
 800455a:	4311      	orrs	r1, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	430b      	orrs	r3, r1
 8004562:	6093      	str	r3, [r2, #8]

  /*---------------------------- SMBUSx OAR2 Configuration ---------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  MODIFY_REG(hsmbus->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	60da      	str	r2, [r3, #12]
  /* Configure SMBUSx: Analog noise filter */
  SET_BIT(hsmbus->Instance->FLTR, hsmbus->Init.AnalogFilter);
#endif

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hsmbus->PreviousState = SMBUS_STATE_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38
  hsmbus->Mode = HAL_SMBUS_MODE_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hsmbus->XferPEC = 0x00;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	431bde83 	.word	0x431bde83

080045c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e07b      	b.n	80046ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d108      	bne.n	80045f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045e6:	d009      	beq.n	80045fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	61da      	str	r2, [r3, #28]
 80045ee:	e005      	b.n	80045fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fc fc50 	bl	8000ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004632:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004680:	ea42 0103 	orr.w	r1, r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004688:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	0c1b      	lsrs	r3, r3, #16
 800469a:	f003 0104 	and.w	r1, r3, #4
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	f003 0210 	and.w	r2, r3, #16
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e041      	b.n	800476c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d106      	bne.n	8004702 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f839 	bl	8004774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3304      	adds	r3, #4
 8004712:	4619      	mov	r1, r3
 8004714:	4610      	mov	r0, r2
 8004716:	f000 f9d7 	bl	8004ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d001      	beq.n	80047a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e04e      	b.n	800483e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a23      	ldr	r2, [pc, #140]	; (800484c <HAL_TIM_Base_Start_IT+0xc4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d022      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ca:	d01d      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1f      	ldr	r2, [pc, #124]	; (8004850 <HAL_TIM_Base_Start_IT+0xc8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d018      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1e      	ldr	r2, [pc, #120]	; (8004854 <HAL_TIM_Base_Start_IT+0xcc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1c      	ldr	r2, [pc, #112]	; (8004858 <HAL_TIM_Base_Start_IT+0xd0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00e      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1b      	ldr	r2, [pc, #108]	; (800485c <HAL_TIM_Base_Start_IT+0xd4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d009      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a19      	ldr	r2, [pc, #100]	; (8004860 <HAL_TIM_Base_Start_IT+0xd8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d004      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a18      	ldr	r2, [pc, #96]	; (8004864 <HAL_TIM_Base_Start_IT+0xdc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d111      	bne.n	800482c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b06      	cmp	r3, #6
 8004818:	d010      	beq.n	800483c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0201 	orr.w	r2, r2, #1
 8004828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482a:	e007      	b.n	800483c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40010000 	.word	0x40010000
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800
 8004858:	40000c00 	.word	0x40000c00
 800485c:	40010400 	.word	0x40010400
 8004860:	40014000 	.word	0x40014000
 8004864:	40001800 	.word	0x40001800

08004868 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b02      	cmp	r3, #2
 800487c:	d122      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b02      	cmp	r3, #2
 800488a:	d11b      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0202 	mvn.w	r2, #2
 8004894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f8ee 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 80048b0:	e005      	b.n	80048be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f8e0 	bl	8004a78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f8f1 	bl	8004aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d122      	bne.n	8004918 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d11b      	bne.n	8004918 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0204 	mvn.w	r2, #4
 80048e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f8c4 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 8004904:	e005      	b.n	8004912 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f8b6 	bl	8004a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f8c7 	bl	8004aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b08      	cmp	r3, #8
 8004924:	d122      	bne.n	800496c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b08      	cmp	r3, #8
 8004932:	d11b      	bne.n	800496c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0208 	mvn.w	r2, #8
 800493c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2204      	movs	r2, #4
 8004942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f89a 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 8004958:	e005      	b.n	8004966 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f88c 	bl	8004a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f89d 	bl	8004aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b10      	cmp	r3, #16
 8004978:	d122      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b10      	cmp	r3, #16
 8004986:	d11b      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0210 	mvn.w	r2, #16
 8004990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2208      	movs	r2, #8
 8004996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f870 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 80049ac:	e005      	b.n	80049ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f862 	bl	8004a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f873 	bl	8004aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d10e      	bne.n	80049ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d107      	bne.n	80049ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0201 	mvn.w	r2, #1
 80049e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fc f8ee 	bl	8000bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f6:	2b80      	cmp	r3, #128	; 0x80
 80049f8:	d10e      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a04:	2b80      	cmp	r3, #128	; 0x80
 8004a06:	d107      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f902 	bl	8004c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b40      	cmp	r3, #64	; 0x40
 8004a24:	d10e      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a30:	2b40      	cmp	r3, #64	; 0x40
 8004a32:	d107      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f838 	bl	8004ab4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d10e      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0320 	and.w	r3, r3, #32
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d107      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0220 	mvn.w	r2, #32
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f8cc 	bl	8004c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a70:	bf00      	nop
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a40      	ldr	r2, [pc, #256]	; (8004bdc <TIM_Base_SetConfig+0x114>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d013      	beq.n	8004b08 <TIM_Base_SetConfig+0x40>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae6:	d00f      	beq.n	8004b08 <TIM_Base_SetConfig+0x40>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a3d      	ldr	r2, [pc, #244]	; (8004be0 <TIM_Base_SetConfig+0x118>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00b      	beq.n	8004b08 <TIM_Base_SetConfig+0x40>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a3c      	ldr	r2, [pc, #240]	; (8004be4 <TIM_Base_SetConfig+0x11c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d007      	beq.n	8004b08 <TIM_Base_SetConfig+0x40>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a3b      	ldr	r2, [pc, #236]	; (8004be8 <TIM_Base_SetConfig+0x120>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d003      	beq.n	8004b08 <TIM_Base_SetConfig+0x40>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a3a      	ldr	r2, [pc, #232]	; (8004bec <TIM_Base_SetConfig+0x124>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d108      	bne.n	8004b1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a2f      	ldr	r2, [pc, #188]	; (8004bdc <TIM_Base_SetConfig+0x114>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d02b      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b28:	d027      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a2c      	ldr	r2, [pc, #176]	; (8004be0 <TIM_Base_SetConfig+0x118>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d023      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a2b      	ldr	r2, [pc, #172]	; (8004be4 <TIM_Base_SetConfig+0x11c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01f      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a2a      	ldr	r2, [pc, #168]	; (8004be8 <TIM_Base_SetConfig+0x120>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d01b      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a29      	ldr	r2, [pc, #164]	; (8004bec <TIM_Base_SetConfig+0x124>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d017      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a28      	ldr	r2, [pc, #160]	; (8004bf0 <TIM_Base_SetConfig+0x128>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d013      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a27      	ldr	r2, [pc, #156]	; (8004bf4 <TIM_Base_SetConfig+0x12c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00f      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a26      	ldr	r2, [pc, #152]	; (8004bf8 <TIM_Base_SetConfig+0x130>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00b      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a25      	ldr	r2, [pc, #148]	; (8004bfc <TIM_Base_SetConfig+0x134>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d007      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a24      	ldr	r2, [pc, #144]	; (8004c00 <TIM_Base_SetConfig+0x138>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d003      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a23      	ldr	r2, [pc, #140]	; (8004c04 <TIM_Base_SetConfig+0x13c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d108      	bne.n	8004b8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <TIM_Base_SetConfig+0x114>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <TIM_Base_SetConfig+0xf8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a0c      	ldr	r2, [pc, #48]	; (8004bec <TIM_Base_SetConfig+0x124>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d103      	bne.n	8004bc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	615a      	str	r2, [r3, #20]
}
 8004bce:	bf00      	nop
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800
 8004be8:	40000c00 	.word	0x40000c00
 8004bec:	40010400 	.word	0x40010400
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40014400 	.word	0x40014400
 8004bf8:	40014800 	.word	0x40014800
 8004bfc:	40001800 	.word	0x40001800
 8004c00:	40001c00 	.word	0x40001c00
 8004c04:	40002000 	.word	0x40002000

08004c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e03f      	b.n	8004cc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fc f978 	bl	8000f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2224      	movs	r2, #36	; 0x24
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f829 	bl	8004ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	b09f      	sub	sp, #124	; 0x7c
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce2:	68d9      	ldr	r1, [r3, #12]
 8004ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	ea40 0301 	orr.w	r3, r0, r1
 8004cec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d10:	f021 010c 	bic.w	r1, r1, #12
 8004d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d1a:	430b      	orrs	r3, r1
 8004d1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2a:	6999      	ldr	r1, [r3, #24]
 8004d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	ea40 0301 	orr.w	r3, r0, r1
 8004d34:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4bc5      	ldr	r3, [pc, #788]	; (8005050 <UART_SetConfig+0x384>)
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d004      	beq.n	8004d4a <UART_SetConfig+0x7e>
 8004d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4bc3      	ldr	r3, [pc, #780]	; (8005054 <UART_SetConfig+0x388>)
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d103      	bne.n	8004d52 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d4a:	f7fe fff3 	bl	8003d34 <HAL_RCC_GetPCLK2Freq>
 8004d4e:	6778      	str	r0, [r7, #116]	; 0x74
 8004d50:	e002      	b.n	8004d58 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d52:	f7fe ffdb 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 8004d56:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d60:	f040 80b6 	bne.w	8004ed0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d66:	461c      	mov	r4, r3
 8004d68:	f04f 0500 	mov.w	r5, #0
 8004d6c:	4622      	mov	r2, r4
 8004d6e:	462b      	mov	r3, r5
 8004d70:	1891      	adds	r1, r2, r2
 8004d72:	6439      	str	r1, [r7, #64]	; 0x40
 8004d74:	415b      	adcs	r3, r3
 8004d76:	647b      	str	r3, [r7, #68]	; 0x44
 8004d78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d7c:	1912      	adds	r2, r2, r4
 8004d7e:	eb45 0303 	adc.w	r3, r5, r3
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f04f 0100 	mov.w	r1, #0
 8004d8a:	00d9      	lsls	r1, r3, #3
 8004d8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d90:	00d0      	lsls	r0, r2, #3
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	1911      	adds	r1, r2, r4
 8004d98:	6639      	str	r1, [r7, #96]	; 0x60
 8004d9a:	416b      	adcs	r3, r5
 8004d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	461a      	mov	r2, r3
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	1891      	adds	r1, r2, r2
 8004daa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004dac:	415b      	adcs	r3, r3
 8004dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004db4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004db8:	f7fb fa0a 	bl	80001d0 <__aeabi_uldivmod>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4ba5      	ldr	r3, [pc, #660]	; (8005058 <UART_SetConfig+0x38c>)
 8004dc2:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	011e      	lsls	r6, r3, #4
 8004dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dcc:	461c      	mov	r4, r3
 8004dce:	f04f 0500 	mov.w	r5, #0
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	462b      	mov	r3, r5
 8004dd6:	1891      	adds	r1, r2, r2
 8004dd8:	6339      	str	r1, [r7, #48]	; 0x30
 8004dda:	415b      	adcs	r3, r3
 8004ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dde:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004de2:	1912      	adds	r2, r2, r4
 8004de4:	eb45 0303 	adc.w	r3, r5, r3
 8004de8:	f04f 0000 	mov.w	r0, #0
 8004dec:	f04f 0100 	mov.w	r1, #0
 8004df0:	00d9      	lsls	r1, r3, #3
 8004df2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004df6:	00d0      	lsls	r0, r2, #3
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	1911      	adds	r1, r2, r4
 8004dfe:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e00:	416b      	adcs	r3, r5
 8004e02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	1891      	adds	r1, r2, r2
 8004e10:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e12:	415b      	adcs	r3, r3
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e1a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e1e:	f7fb f9d7 	bl	80001d0 <__aeabi_uldivmod>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4b8c      	ldr	r3, [pc, #560]	; (8005058 <UART_SetConfig+0x38c>)
 8004e28:	fba3 1302 	umull	r1, r3, r3, r2
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	2164      	movs	r1, #100	; 0x64
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	3332      	adds	r3, #50	; 0x32
 8004e3a:	4a87      	ldr	r2, [pc, #540]	; (8005058 <UART_SetConfig+0x38c>)
 8004e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e48:	441e      	add	r6, r3
 8004e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f04f 0100 	mov.w	r1, #0
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	1894      	adds	r4, r2, r2
 8004e58:	623c      	str	r4, [r7, #32]
 8004e5a:	415b      	adcs	r3, r3
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e62:	1812      	adds	r2, r2, r0
 8004e64:	eb41 0303 	adc.w	r3, r1, r3
 8004e68:	f04f 0400 	mov.w	r4, #0
 8004e6c:	f04f 0500 	mov.w	r5, #0
 8004e70:	00dd      	lsls	r5, r3, #3
 8004e72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e76:	00d4      	lsls	r4, r2, #3
 8004e78:	4622      	mov	r2, r4
 8004e7a:	462b      	mov	r3, r5
 8004e7c:	1814      	adds	r4, r2, r0
 8004e7e:	653c      	str	r4, [r7, #80]	; 0x50
 8004e80:	414b      	adcs	r3, r1
 8004e82:	657b      	str	r3, [r7, #84]	; 0x54
 8004e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	1891      	adds	r1, r2, r2
 8004e90:	61b9      	str	r1, [r7, #24]
 8004e92:	415b      	adcs	r3, r3
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e9a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004e9e:	f7fb f997 	bl	80001d0 <__aeabi_uldivmod>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4b6c      	ldr	r3, [pc, #432]	; (8005058 <UART_SetConfig+0x38c>)
 8004ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	2164      	movs	r1, #100	; 0x64
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	3332      	adds	r3, #50	; 0x32
 8004eba:	4a67      	ldr	r2, [pc, #412]	; (8005058 <UART_SetConfig+0x38c>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	f003 0207 	and.w	r2, r3, #7
 8004ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4432      	add	r2, r6
 8004ecc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ece:	e0b9      	b.n	8005044 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed2:	461c      	mov	r4, r3
 8004ed4:	f04f 0500 	mov.w	r5, #0
 8004ed8:	4622      	mov	r2, r4
 8004eda:	462b      	mov	r3, r5
 8004edc:	1891      	adds	r1, r2, r2
 8004ede:	6139      	str	r1, [r7, #16]
 8004ee0:	415b      	adcs	r3, r3
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ee8:	1912      	adds	r2, r2, r4
 8004eea:	eb45 0303 	adc.w	r3, r5, r3
 8004eee:	f04f 0000 	mov.w	r0, #0
 8004ef2:	f04f 0100 	mov.w	r1, #0
 8004ef6:	00d9      	lsls	r1, r3, #3
 8004ef8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004efc:	00d0      	lsls	r0, r2, #3
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	eb12 0804 	adds.w	r8, r2, r4
 8004f06:	eb43 0905 	adc.w	r9, r3, r5
 8004f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f04f 0100 	mov.w	r1, #0
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	008b      	lsls	r3, r1, #2
 8004f1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f22:	0082      	lsls	r2, r0, #2
 8004f24:	4640      	mov	r0, r8
 8004f26:	4649      	mov	r1, r9
 8004f28:	f7fb f952 	bl	80001d0 <__aeabi_uldivmod>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4b49      	ldr	r3, [pc, #292]	; (8005058 <UART_SetConfig+0x38c>)
 8004f32:	fba3 2302 	umull	r2, r3, r3, r2
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	011e      	lsls	r6, r3, #4
 8004f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f04f 0100 	mov.w	r1, #0
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	1894      	adds	r4, r2, r2
 8004f48:	60bc      	str	r4, [r7, #8]
 8004f4a:	415b      	adcs	r3, r3
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f52:	1812      	adds	r2, r2, r0
 8004f54:	eb41 0303 	adc.w	r3, r1, r3
 8004f58:	f04f 0400 	mov.w	r4, #0
 8004f5c:	f04f 0500 	mov.w	r5, #0
 8004f60:	00dd      	lsls	r5, r3, #3
 8004f62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f66:	00d4      	lsls	r4, r2, #3
 8004f68:	4622      	mov	r2, r4
 8004f6a:	462b      	mov	r3, r5
 8004f6c:	1814      	adds	r4, r2, r0
 8004f6e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f70:	414b      	adcs	r3, r1
 8004f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f04f 0100 	mov.w	r1, #0
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	008b      	lsls	r3, r1, #2
 8004f88:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f8c:	0082      	lsls	r2, r0, #2
 8004f8e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f92:	f7fb f91d 	bl	80001d0 <__aeabi_uldivmod>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4b2f      	ldr	r3, [pc, #188]	; (8005058 <UART_SetConfig+0x38c>)
 8004f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	2164      	movs	r1, #100	; 0x64
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	3332      	adds	r3, #50	; 0x32
 8004fae:	4a2a      	ldr	r2, [pc, #168]	; (8005058 <UART_SetConfig+0x38c>)
 8004fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fba:	441e      	add	r6, r3
 8004fbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f04f 0100 	mov.w	r1, #0
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	1894      	adds	r4, r2, r2
 8004fca:	603c      	str	r4, [r7, #0]
 8004fcc:	415b      	adcs	r3, r3
 8004fce:	607b      	str	r3, [r7, #4]
 8004fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fd4:	1812      	adds	r2, r2, r0
 8004fd6:	eb41 0303 	adc.w	r3, r1, r3
 8004fda:	f04f 0400 	mov.w	r4, #0
 8004fde:	f04f 0500 	mov.w	r5, #0
 8004fe2:	00dd      	lsls	r5, r3, #3
 8004fe4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fe8:	00d4      	lsls	r4, r2, #3
 8004fea:	4622      	mov	r2, r4
 8004fec:	462b      	mov	r3, r5
 8004fee:	eb12 0a00 	adds.w	sl, r2, r0
 8004ff2:	eb43 0b01 	adc.w	fp, r3, r1
 8004ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f04f 0100 	mov.w	r1, #0
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	008b      	lsls	r3, r1, #2
 800500a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800500e:	0082      	lsls	r2, r0, #2
 8005010:	4650      	mov	r0, sl
 8005012:	4659      	mov	r1, fp
 8005014:	f7fb f8dc 	bl	80001d0 <__aeabi_uldivmod>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <UART_SetConfig+0x38c>)
 800501e:	fba3 1302 	umull	r1, r3, r3, r2
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	2164      	movs	r1, #100	; 0x64
 8005026:	fb01 f303 	mul.w	r3, r1, r3
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	3332      	adds	r3, #50	; 0x32
 8005030:	4a09      	ldr	r2, [pc, #36]	; (8005058 <UART_SetConfig+0x38c>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	f003 020f 	and.w	r2, r3, #15
 800503c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4432      	add	r2, r6
 8005042:	609a      	str	r2, [r3, #8]
}
 8005044:	bf00      	nop
 8005046:	377c      	adds	r7, #124	; 0x7c
 8005048:	46bd      	mov	sp, r7
 800504a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504e:	bf00      	nop
 8005050:	40011000 	.word	0x40011000
 8005054:	40011400 	.word	0x40011400
 8005058:	51eb851f 	.word	0x51eb851f

0800505c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800505c:	b084      	sub	sp, #16
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	f107 001c 	add.w	r0, r7, #28
 800506a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	2b01      	cmp	r3, #1
 8005072:	d122      	bne.n	80050ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800509c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d105      	bne.n	80050ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f001 fac6 	bl	8006640 <USB_CoreReset>
 80050b4:	4603      	mov	r3, r0
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	e01a      	b.n	80050f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f001 faba 	bl	8006640 <USB_CoreReset>
 80050cc:	4603      	mov	r3, r0
 80050ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80050d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	639a      	str	r2, [r3, #56]	; 0x38
 80050e2:	e005      	b.n	80050f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d10b      	bne.n	800510e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f043 0206 	orr.w	r2, r3, #6
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800510e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800511a:	b004      	add	sp, #16
 800511c:	4770      	bx	lr
	...

08005120 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	4613      	mov	r3, r2
 800512c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d165      	bne.n	8005200 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4a41      	ldr	r2, [pc, #260]	; (800523c <USB_SetTurnaroundTime+0x11c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d906      	bls.n	800514a <USB_SetTurnaroundTime+0x2a>
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4a40      	ldr	r2, [pc, #256]	; (8005240 <USB_SetTurnaroundTime+0x120>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d202      	bcs.n	800514a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005144:	230f      	movs	r3, #15
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	e062      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4a3c      	ldr	r2, [pc, #240]	; (8005240 <USB_SetTurnaroundTime+0x120>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d306      	bcc.n	8005160 <USB_SetTurnaroundTime+0x40>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4a3b      	ldr	r2, [pc, #236]	; (8005244 <USB_SetTurnaroundTime+0x124>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d202      	bcs.n	8005160 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800515a:	230e      	movs	r3, #14
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	e057      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4a38      	ldr	r2, [pc, #224]	; (8005244 <USB_SetTurnaroundTime+0x124>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d306      	bcc.n	8005176 <USB_SetTurnaroundTime+0x56>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4a37      	ldr	r2, [pc, #220]	; (8005248 <USB_SetTurnaroundTime+0x128>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d202      	bcs.n	8005176 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005170:	230d      	movs	r3, #13
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	e04c      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	4a33      	ldr	r2, [pc, #204]	; (8005248 <USB_SetTurnaroundTime+0x128>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d306      	bcc.n	800518c <USB_SetTurnaroundTime+0x6c>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	4a32      	ldr	r2, [pc, #200]	; (800524c <USB_SetTurnaroundTime+0x12c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d802      	bhi.n	800518c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005186:	230c      	movs	r3, #12
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	e041      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4a2f      	ldr	r2, [pc, #188]	; (800524c <USB_SetTurnaroundTime+0x12c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d906      	bls.n	80051a2 <USB_SetTurnaroundTime+0x82>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4a2e      	ldr	r2, [pc, #184]	; (8005250 <USB_SetTurnaroundTime+0x130>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d802      	bhi.n	80051a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800519c:	230b      	movs	r3, #11
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	e036      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	4a2a      	ldr	r2, [pc, #168]	; (8005250 <USB_SetTurnaroundTime+0x130>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d906      	bls.n	80051b8 <USB_SetTurnaroundTime+0x98>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4a29      	ldr	r2, [pc, #164]	; (8005254 <USB_SetTurnaroundTime+0x134>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d802      	bhi.n	80051b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80051b2:	230a      	movs	r3, #10
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e02b      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4a26      	ldr	r2, [pc, #152]	; (8005254 <USB_SetTurnaroundTime+0x134>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d906      	bls.n	80051ce <USB_SetTurnaroundTime+0xae>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4a25      	ldr	r2, [pc, #148]	; (8005258 <USB_SetTurnaroundTime+0x138>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d202      	bcs.n	80051ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80051c8:	2309      	movs	r3, #9
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e020      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4a21      	ldr	r2, [pc, #132]	; (8005258 <USB_SetTurnaroundTime+0x138>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d306      	bcc.n	80051e4 <USB_SetTurnaroundTime+0xc4>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4a20      	ldr	r2, [pc, #128]	; (800525c <USB_SetTurnaroundTime+0x13c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d802      	bhi.n	80051e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80051de:	2308      	movs	r3, #8
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	e015      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4a1d      	ldr	r2, [pc, #116]	; (800525c <USB_SetTurnaroundTime+0x13c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d906      	bls.n	80051fa <USB_SetTurnaroundTime+0xda>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <USB_SetTurnaroundTime+0x140>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d202      	bcs.n	80051fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80051f4:	2307      	movs	r3, #7
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e00a      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80051fa:	2306      	movs	r3, #6
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	e007      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d102      	bne.n	800520c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005206:	2309      	movs	r3, #9
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	e001      	b.n	8005210 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800520c:	2309      	movs	r3, #9
 800520e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	029b      	lsls	r3, r3, #10
 8005224:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005228:	431a      	orrs	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	00d8acbf 	.word	0x00d8acbf
 8005240:	00e4e1c0 	.word	0x00e4e1c0
 8005244:	00f42400 	.word	0x00f42400
 8005248:	01067380 	.word	0x01067380
 800524c:	011a499f 	.word	0x011a499f
 8005250:	01312cff 	.word	0x01312cff
 8005254:	014ca43f 	.word	0x014ca43f
 8005258:	016e3600 	.word	0x016e3600
 800525c:	01a6ab1f 	.word	0x01a6ab1f
 8005260:	01e84800 	.word	0x01e84800

08005264 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f043 0201 	orr.w	r2, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f023 0201 	bic.w	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d106      	bne.n	80052d4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60da      	str	r2, [r3, #12]
 80052d2:	e00b      	b.n	80052ec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60da      	str	r2, [r3, #12]
 80052e6:	e001      	b.n	80052ec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e003      	b.n	80052f4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80052ec:	2032      	movs	r0, #50	; 0x32
 80052ee:	f7fc f82d 	bl	800134c <HAL_Delay>

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052fc:	b084      	sub	sp, #16
 80052fe:	b580      	push	{r7, lr}
 8005300:	b086      	sub	sp, #24
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800530a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	e009      	b.n	8005330 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	3340      	adds	r3, #64	; 0x40
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	2200      	movs	r2, #0
 8005328:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	3301      	adds	r3, #1
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b0e      	cmp	r3, #14
 8005334:	d9f2      	bls.n	800531c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d11c      	bne.n	8005376 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800534a:	f043 0302 	orr.w	r3, r3, #2
 800534e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	639a      	str	r2, [r3, #56]	; 0x38
 8005374:	e00b      	b.n	800538e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005386:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005394:	461a      	mov	r2, r3
 8005396:	2300      	movs	r3, #0
 8005398:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a0:	4619      	mov	r1, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a8:	461a      	mov	r2, r3
 80053aa:	680b      	ldr	r3, [r1, #0]
 80053ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d10c      	bne.n	80053ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d104      	bne.n	80053c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053ba:	2100      	movs	r1, #0
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f949 	bl	8005654 <USB_SetDevSpeed>
 80053c2:	e008      	b.n	80053d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053c4:	2101      	movs	r1, #1
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f944 	bl	8005654 <USB_SetDevSpeed>
 80053cc:	e003      	b.n	80053d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053ce:	2103      	movs	r1, #3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f93f 	bl	8005654 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053d6:	2110      	movs	r1, #16
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f8f3 	bl	80055c4 <USB_FlushTxFifo>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f911 	bl	8005610 <USB_FlushRxFifo>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fe:	461a      	mov	r2, r3
 8005400:	2300      	movs	r3, #0
 8005402:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540a:	461a      	mov	r2, r3
 800540c:	2300      	movs	r3, #0
 800540e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	461a      	mov	r2, r3
 8005418:	2300      	movs	r3, #0
 800541a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800541c:	2300      	movs	r3, #0
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	e043      	b.n	80054aa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005438:	d118      	bne.n	800546c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544c:	461a      	mov	r2, r3
 800544e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	e013      	b.n	800547e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005462:	461a      	mov	r2, r3
 8005464:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	e008      	b.n	800547e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005478:	461a      	mov	r2, r3
 800547a:	2300      	movs	r3, #0
 800547c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548a:	461a      	mov	r2, r3
 800548c:	2300      	movs	r3, #0
 800548e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549c:	461a      	mov	r2, r3
 800549e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	3301      	adds	r3, #1
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d3b7      	bcc.n	8005422 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054b2:	2300      	movs	r3, #0
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	e043      	b.n	8005540 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ce:	d118      	bne.n	8005502 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e2:	461a      	mov	r2, r3
 80054e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	e013      	b.n	8005514 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f8:	461a      	mov	r2, r3
 80054fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	e008      	b.n	8005514 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550e:	461a      	mov	r2, r3
 8005510:	2300      	movs	r3, #0
 8005512:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005520:	461a      	mov	r2, r3
 8005522:	2300      	movs	r3, #0
 8005524:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005532:	461a      	mov	r2, r3
 8005534:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005538:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	3301      	adds	r3, #1
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	429a      	cmp	r2, r3
 8005546:	d3b7      	bcc.n	80054b8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005556:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800555a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005568:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	2b00      	cmp	r3, #0
 800556e:	d105      	bne.n	800557c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	f043 0210 	orr.w	r2, r3, #16
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699a      	ldr	r2, [r3, #24]
 8005580:	4b0f      	ldr	r3, [pc, #60]	; (80055c0 <USB_DevInit+0x2c4>)
 8005582:	4313      	orrs	r3, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	f043 0208 	orr.w	r2, r3, #8
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800559a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559c:	2b01      	cmp	r3, #1
 800559e:	d107      	bne.n	80055b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055a8:	f043 0304 	orr.w	r3, r3, #4
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055bc:	b004      	add	sp, #16
 80055be:	4770      	bx	lr
 80055c0:	803c3800 	.word	0x803c3800

080055c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	019b      	lsls	r3, r3, #6
 80055d6:	f043 0220 	orr.w	r2, r3, #32
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3301      	adds	r3, #1
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4a09      	ldr	r2, [pc, #36]	; (800560c <USB_FlushTxFifo+0x48>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d901      	bls.n	80055f0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e006      	b.n	80055fe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	d0f0      	beq.n	80055de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	00030d40 	.word	0x00030d40

08005610 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2210      	movs	r2, #16
 8005620:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3301      	adds	r3, #1
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4a09      	ldr	r2, [pc, #36]	; (8005650 <USB_FlushRxFifo+0x40>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e006      	b.n	8005642 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b10      	cmp	r3, #16
 800563e:	d0f0      	beq.n	8005622 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	00030d40 	.word	0x00030d40

08005654 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	68f9      	ldr	r1, [r7, #12]
 8005670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005674:	4313      	orrs	r3, r2
 8005676:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005686:	b480      	push	{r7}
 8005688:	b087      	sub	sp, #28
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 0306 	and.w	r3, r3, #6
 800569e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d102      	bne.n	80056ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80056a6:	2300      	movs	r3, #0
 80056a8:	75fb      	strb	r3, [r7, #23]
 80056aa:	e00a      	b.n	80056c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d002      	beq.n	80056b8 <USB_GetDevSpeed+0x32>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	d102      	bne.n	80056be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056b8:	2302      	movs	r3, #2
 80056ba:	75fb      	strb	r3, [r7, #23]
 80056bc:	e001      	b.n	80056c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80056be:	230f      	movs	r3, #15
 80056c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d13a      	bne.n	8005762 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005702:	b29b      	uxth	r3, r3
 8005704:	68f9      	ldr	r1, [r7, #12]
 8005706:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800570a:	4313      	orrs	r3, r2
 800570c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d155      	bne.n	80057d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	78db      	ldrb	r3, [r3, #3]
 800573e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005740:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	059b      	lsls	r3, r3, #22
 8005746:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005748:	4313      	orrs	r3, r2
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	0151      	lsls	r1, r2, #5
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	440a      	add	r2, r1
 8005752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	e036      	b.n	80057d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005768:	69da      	ldr	r2, [r3, #28]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	2101      	movs	r1, #1
 8005774:	fa01 f303 	lsl.w	r3, r1, r3
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	68f9      	ldr	r1, [r7, #12]
 800577c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005780:	4313      	orrs	r3, r2
 8005782:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d11a      	bne.n	80057d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	78db      	ldrb	r3, [r3, #3]
 80057b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057b6:	430b      	orrs	r3, r1
 80057b8:	4313      	orrs	r3, r2
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
	...

080057e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	785b      	ldrb	r3, [r3, #1]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d161      	bne.n	80058c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800580e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005812:	d11f      	bne.n	8005854 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	0151      	lsls	r1, r2, #5
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	440a      	add	r2, r1
 800582a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005832:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005852:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	2101      	movs	r1, #1
 8005866:	fa01 f303 	lsl.w	r3, r1, r3
 800586a:	b29b      	uxth	r3, r3
 800586c:	43db      	mvns	r3, r3
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005874:	4013      	ands	r3, r2
 8005876:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	2101      	movs	r1, #1
 800588a:	fa01 f303 	lsl.w	r3, r1, r3
 800588e:	b29b      	uxth	r3, r3
 8005890:	43db      	mvns	r3, r3
 8005892:	68f9      	ldr	r1, [r7, #12]
 8005894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005898:	4013      	ands	r3, r2
 800589a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	0159      	lsls	r1, r3, #5
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	440b      	add	r3, r1
 80058b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b6:	4619      	mov	r1, r3
 80058b8:	4b35      	ldr	r3, [pc, #212]	; (8005990 <USB_DeactivateEndpoint+0x1b0>)
 80058ba:	4013      	ands	r3, r2
 80058bc:	600b      	str	r3, [r1, #0]
 80058be:	e060      	b.n	8005982 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058d6:	d11f      	bne.n	8005918 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005912:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005916:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	2101      	movs	r1, #1
 800592a:	fa01 f303 	lsl.w	r3, r1, r3
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	43db      	mvns	r3, r3
 8005932:	68f9      	ldr	r1, [r7, #12]
 8005934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005938:	4013      	ands	r3, r2
 800593a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005942:	69da      	ldr	r2, [r3, #28]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	2101      	movs	r1, #1
 800594e:	fa01 f303 	lsl.w	r3, r1, r3
 8005952:	041b      	lsls	r3, r3, #16
 8005954:	43db      	mvns	r3, r3
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800595c:	4013      	ands	r3, r2
 800595e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	0159      	lsls	r1, r3, #5
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	440b      	add	r3, r1
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	4619      	mov	r1, r3
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <USB_DeactivateEndpoint+0x1b4>)
 800597e:	4013      	ands	r3, r2
 8005980:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	ec337800 	.word	0xec337800
 8005994:	eff37800 	.word	0xeff37800

08005998 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	; 0x28
 800599c:	af02      	add	r7, sp, #8
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	f040 815c 	bne.w	8005c72 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d132      	bne.n	8005a28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	0151      	lsls	r1, r2, #5
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	440a      	add	r2, r1
 80059fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a20:	0cdb      	lsrs	r3, r3, #19
 8005a22:	04db      	lsls	r3, r3, #19
 8005a24:	6113      	str	r3, [r2, #16]
 8005a26:	e074      	b.n	8005b12 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a42:	0cdb      	lsrs	r3, r3, #19
 8005a44:	04db      	lsls	r3, r3, #19
 8005a46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a78:	691a      	ldr	r2, [r3, #16]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6959      	ldr	r1, [r3, #20]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	440b      	add	r3, r1
 8005a84:	1e59      	subs	r1, r3, #1
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a8e:	04d9      	lsls	r1, r3, #19
 8005a90:	4b9d      	ldr	r3, [pc, #628]	; (8005d08 <USB_EPStartXfer+0x370>)
 8005a92:	400b      	ands	r3, r1
 8005a94:	69b9      	ldr	r1, [r7, #24]
 8005a96:	0148      	lsls	r0, r1, #5
 8005a98:	69f9      	ldr	r1, [r7, #28]
 8005a9a:	4401      	add	r1, r0
 8005a9c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab0:	691a      	ldr	r2, [r3, #16]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aba:	69b9      	ldr	r1, [r7, #24]
 8005abc:	0148      	lsls	r0, r1, #5
 8005abe:	69f9      	ldr	r1, [r7, #28]
 8005ac0:	4401      	add	r1, r0
 8005ac2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	78db      	ldrb	r3, [r3, #3]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d11f      	bne.n	8005b12 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005af0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b10:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b12:	79fb      	ldrb	r3, [r7, #7]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d14b      	bne.n	8005bb0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d009      	beq.n	8005b34 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	78db      	ldrb	r3, [r3, #3]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d128      	bne.n	8005b8e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d110      	bne.n	8005b6e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	e00f      	b.n	8005b8e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b8c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	0151      	lsls	r1, r2, #5
 8005ba0:	69fa      	ldr	r2, [r7, #28]
 8005ba2:	440a      	add	r2, r1
 8005ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	e12f      	b.n	8005e10 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	78db      	ldrb	r3, [r3, #3]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d015      	beq.n	8005c04 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8117 	beq.w	8005e10 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf8:	69f9      	ldr	r1, [r7, #28]
 8005bfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	634b      	str	r3, [r1, #52]	; 0x34
 8005c02:	e105      	b.n	8005e10 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d110      	bne.n	8005c36 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e00f      	b.n	8005c56 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c54:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	68d9      	ldr	r1, [r3, #12]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	781a      	ldrb	r2, [r3, #0]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	b298      	uxth	r0, r3
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	4603      	mov	r3, r0
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fa2b 	bl	80060c6 <USB_WritePacket>
 8005c70:	e0ce      	b.n	8005e10 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	69fa      	ldr	r2, [r7, #28]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c8c:	0cdb      	lsrs	r3, r3, #19
 8005c8e:	04db      	lsls	r3, r3, #19
 8005c90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cb4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d126      	bne.n	8005d0c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cd4:	69b9      	ldr	r1, [r7, #24]
 8005cd6:	0148      	lsls	r0, r1, #5
 8005cd8:	69f9      	ldr	r1, [r7, #28]
 8005cda:	4401      	add	r1, r0
 8005cdc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d02:	6113      	str	r3, [r2, #16]
 8005d04:	e036      	b.n	8005d74 <USB_EPStartXfer+0x3dc>
 8005d06:	bf00      	nop
 8005d08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	695a      	ldr	r2, [r3, #20]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4413      	add	r3, r2
 8005d16:	1e5a      	subs	r2, r3, #1
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d20:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	8afb      	ldrh	r3, [r7, #22]
 8005d32:	04d9      	lsls	r1, r3, #19
 8005d34:	4b39      	ldr	r3, [pc, #228]	; (8005e1c <USB_EPStartXfer+0x484>)
 8005d36:	400b      	ands	r3, r1
 8005d38:	69b9      	ldr	r1, [r7, #24]
 8005d3a:	0148      	lsls	r0, r1, #5
 8005d3c:	69f9      	ldr	r1, [r7, #28]
 8005d3e:	4401      	add	r1, r0
 8005d40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d44:	4313      	orrs	r3, r2
 8005d46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	8af9      	ldrh	r1, [r7, #22]
 8005d5c:	fb01 f303 	mul.w	r3, r1, r3
 8005d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d64:	69b9      	ldr	r1, [r7, #24]
 8005d66:	0148      	lsls	r0, r1, #5
 8005d68:	69f9      	ldr	r1, [r7, #28]
 8005d6a:	4401      	add	r1, r0
 8005d6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d70:	4313      	orrs	r3, r2
 8005d72:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d74:	79fb      	ldrb	r3, [r7, #7]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d10d      	bne.n	8005d96 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d009      	beq.n	8005d96 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	68d9      	ldr	r1, [r3, #12]
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	460a      	mov	r2, r1
 8005d94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	78db      	ldrb	r3, [r3, #3]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d128      	bne.n	8005df0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d110      	bne.n	8005dd0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	e00f      	b.n	8005df0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3720      	adds	r7, #32
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	1ff80000 	.word	0x1ff80000

08005e20 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	f040 80cd 	bne.w	8005fdc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d132      	bne.n	8005eb0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea8:	0cdb      	lsrs	r3, r3, #19
 8005eaa:	04db      	lsls	r3, r3, #19
 8005eac:	6113      	str	r3, [r2, #16]
 8005eae:	e04e      	b.n	8005f4e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eca:	0cdb      	lsrs	r3, r3, #19
 8005ecc:	04db      	lsls	r3, r3, #19
 8005ece:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ef2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d903      	bls.n	8005f08 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f34:	691a      	ldr	r2, [r3, #16]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f3e:	6939      	ldr	r1, [r7, #16]
 8005f40:	0148      	lsls	r0, r1, #5
 8005f42:	6979      	ldr	r1, [r7, #20]
 8005f44:	4401      	add	r1, r0
 8005f46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d11e      	bne.n	8005f92 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d009      	beq.n	8005f70 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	461a      	mov	r2, r3
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	e092      	b.n	80060b8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fb0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d07e      	beq.n	80060b8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	2101      	movs	r1, #1
 8005fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd0:	6979      	ldr	r1, [r7, #20]
 8005fd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	634b      	str	r3, [r1, #52]	; 0x34
 8005fda:	e06d      	b.n	80060b8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff6:	0cdb      	lsrs	r3, r3, #19
 8005ff8:	04db      	lsls	r3, r3, #19
 8005ffa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	440a      	add	r2, r1
 8006012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006016:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800601a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800601e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	440a      	add	r2, r1
 8006046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800604a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800604e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006066:	6939      	ldr	r1, [r7, #16]
 8006068:	0148      	lsls	r0, r1, #5
 800606a:	6979      	ldr	r1, [r7, #20]
 800606c:	4401      	add	r1, r0
 800606e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006072:	4313      	orrs	r3, r2
 8006074:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d10d      	bne.n	8006098 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d009      	beq.n	8006098 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	68d9      	ldr	r1, [r3, #12]
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006094:	460a      	mov	r2, r1
 8006096:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b089      	sub	sp, #36	; 0x24
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	4611      	mov	r1, r2
 80060d2:	461a      	mov	r2, r3
 80060d4:	460b      	mov	r3, r1
 80060d6:	71fb      	strb	r3, [r7, #7]
 80060d8:	4613      	mov	r3, r2
 80060da:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80060e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d11a      	bne.n	8006122 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060ec:	88bb      	ldrh	r3, [r7, #4]
 80060ee:	3303      	adds	r3, #3
 80060f0:	089b      	lsrs	r3, r3, #2
 80060f2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80060f4:	2300      	movs	r3, #0
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	e00f      	b.n	800611a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	031a      	lsls	r2, r3, #12
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	4413      	add	r3, r2
 8006102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006106:	461a      	mov	r2, r3
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	3304      	adds	r3, #4
 8006112:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	3301      	adds	r3, #1
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	429a      	cmp	r2, r3
 8006120:	d3eb      	bcc.n	80060fa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3724      	adds	r7, #36	; 0x24
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006130:	b480      	push	{r7}
 8006132:	b089      	sub	sp, #36	; 0x24
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	4613      	mov	r3, r2
 800613c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	3303      	adds	r3, #3
 800614a:	089b      	lsrs	r3, r3, #2
 800614c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800614e:	2300      	movs	r3, #0
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	e00b      	b.n	800616c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	3304      	adds	r3, #4
 8006164:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	3301      	adds	r3, #1
 800616a:	61bb      	str	r3, [r7, #24]
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	429a      	cmp	r2, r3
 8006172:	d3ef      	bcc.n	8006154 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006174:	69fb      	ldr	r3, [r7, #28]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3724      	adds	r7, #36	; 0x24
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006182:	b480      	push	{r7}
 8006184:	b085      	sub	sp, #20
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d12c      	bne.n	80061f8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	db12      	blt.n	80061d6 <USB_EPSetStall+0x54>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00f      	beq.n	80061d6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061d4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	e02b      	b.n	8006250 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	db12      	blt.n	8006230 <USB_EPSetStall+0xae>
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00f      	beq.n	8006230 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	440a      	add	r2, r1
 8006226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800622a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800622e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	0151      	lsls	r1, r2, #5
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	440a      	add	r2, r1
 8006246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800624a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800624e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800625e:	b480      	push	{r7}
 8006260:	b085      	sub	sp, #20
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	785b      	ldrb	r3, [r3, #1]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d128      	bne.n	80062cc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	440a      	add	r2, r1
 8006290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006294:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006298:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	78db      	ldrb	r3, [r3, #3]
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d003      	beq.n	80062aa <USB_EPClearStall+0x4c>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	78db      	ldrb	r3, [r3, #3]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d138      	bne.n	800631c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	0151      	lsls	r1, r2, #5
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	440a      	add	r2, r1
 80062c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	e027      	b.n	800631c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	0151      	lsls	r1, r2, #5
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	440a      	add	r2, r1
 80062e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	78db      	ldrb	r3, [r3, #3]
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d003      	beq.n	80062fc <USB_EPClearStall+0x9e>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	78db      	ldrb	r3, [r3, #3]
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d10f      	bne.n	800631c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	440a      	add	r2, r1
 8006312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800631a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	460b      	mov	r3, r1
 8006334:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006348:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800634c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	78fb      	ldrb	r3, [r7, #3]
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800635e:	68f9      	ldr	r1, [r7, #12]
 8006360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006364:	4313      	orrs	r3, r2
 8006366:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006376:	b480      	push	{r7}
 8006378:	b085      	sub	sp, #20
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006390:	f023 0303 	bic.w	r3, r3, #3
 8006394:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063a4:	f023 0302 	bic.w	r3, r3, #2
 80063a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063d2:	f023 0303 	bic.w	r3, r3, #3
 80063d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063e6:	f043 0302 	orr.w	r3, r3, #2
 80063ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4013      	ands	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006412:	68fb      	ldr	r3, [r7, #12]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	4013      	ands	r3, r2
 8006442:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	0c1b      	lsrs	r3, r3, #16
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	4013      	ands	r3, r2
 8006476:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	b29b      	uxth	r3, r3
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	4013      	ands	r3, r2
 80064b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064b6:	68bb      	ldr	r3, [r7, #8]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	fa22 f303 	lsr.w	r3, r2, r3
 80064f4:	01db      	lsls	r3, r3, #7
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4013      	ands	r3, r2
 8006510:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006512:	68bb      	ldr	r3, [r7, #8]
}
 8006514:	4618      	mov	r0, r3
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	f003 0301 	and.w	r3, r3, #1
}
 8006530:	4618      	mov	r0, r3
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006556:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800655a:	f023 0307 	bic.w	r3, r3, #7
 800655e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800656e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006572:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
	...

08006584 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	460b      	mov	r3, r1
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	333c      	adds	r3, #60	; 0x3c
 800659a:	3304      	adds	r3, #4
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	4a26      	ldr	r2, [pc, #152]	; (800663c <USB_EP0_OutStart+0xb8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d90a      	bls.n	80065be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065b8:	d101      	bne.n	80065be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	e037      	b.n	800662e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c4:	461a      	mov	r2, r3
 80065c6:	2300      	movs	r3, #0
 80065c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ec:	f043 0318 	orr.w	r3, r3, #24
 80065f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006600:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006604:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d10f      	bne.n	800662c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006612:	461a      	mov	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006626:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800662a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	371c      	adds	r7, #28
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	4f54300a 	.word	0x4f54300a

08006640 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3301      	adds	r3, #1
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4a13      	ldr	r2, [pc, #76]	; (80066a4 <USB_CoreReset+0x64>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d901      	bls.n	800665e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e01b      	b.n	8006696 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	daf2      	bge.n	800664c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f043 0201 	orr.w	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4a09      	ldr	r2, [pc, #36]	; (80066a4 <USB_CoreReset+0x64>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d901      	bls.n	8006688 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e006      	b.n	8006696 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b01      	cmp	r3, #1
 8006692:	d0f0      	beq.n	8006676 <USB_CoreReset+0x36>

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	00030d40 	.word	0x00030d40

080066a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80066b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80066b8:	f003 fb50 	bl	8009d5c <USBD_static_malloc>
 80066bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d105      	bne.n	80066d0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80066cc:	2302      	movs	r3, #2
 80066ce:	e066      	b.n	800679e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	7c1b      	ldrb	r3, [r3, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d119      	bne.n	8006714 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066e4:	2202      	movs	r2, #2
 80066e6:	2181      	movs	r1, #129	; 0x81
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f003 fa14 	bl	8009b16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066f8:	2202      	movs	r2, #2
 80066fa:	2101      	movs	r1, #1
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f003 fa0a 	bl	8009b16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2210      	movs	r2, #16
 800670e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006712:	e016      	b.n	8006742 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006714:	2340      	movs	r3, #64	; 0x40
 8006716:	2202      	movs	r2, #2
 8006718:	2181      	movs	r1, #129	; 0x81
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f003 f9fb 	bl	8009b16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006726:	2340      	movs	r3, #64	; 0x40
 8006728:	2202      	movs	r2, #2
 800672a:	2101      	movs	r1, #1
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f003 f9f2 	bl	8009b16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2210      	movs	r2, #16
 800673e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006742:	2308      	movs	r3, #8
 8006744:	2203      	movs	r2, #3
 8006746:	2182      	movs	r1, #130	; 0x82
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f003 f9e4 	bl	8009b16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	7c1b      	ldrb	r3, [r3, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800677e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006782:	2101      	movs	r1, #1
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f003 fab5 	bl	8009cf4 <USBD_LL_PrepareReceive>
 800678a:	e007      	b.n	800679c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006792:	2340      	movs	r3, #64	; 0x40
 8006794:	2101      	movs	r1, #1
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f003 faac 	bl	8009cf4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	460b      	mov	r3, r1
 80067b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80067b2:	2181      	movs	r1, #129	; 0x81
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f003 f9d4 	bl	8009b62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80067c0:	2101      	movs	r1, #1
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f003 f9cd 	bl	8009b62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80067d0:	2182      	movs	r1, #130	; 0x82
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f003 f9c5 	bl	8009b62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00e      	beq.n	8006810 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006802:	4618      	mov	r0, r3
 8006804:	f003 fab8 	bl	8009d78 <USBD_static_free>
    pdev->pClassData = NULL;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800682c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006840:	2303      	movs	r3, #3
 8006842:	e0af      	b.n	80069a4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800684c:	2b00      	cmp	r3, #0
 800684e:	d03f      	beq.n	80068d0 <USBD_CDC_Setup+0xb4>
 8006850:	2b20      	cmp	r3, #32
 8006852:	f040 809f 	bne.w	8006994 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	88db      	ldrh	r3, [r3, #6]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d02e      	beq.n	80068bc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	b25b      	sxtb	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	da16      	bge.n	8006896 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006874:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	88d2      	ldrh	r2, [r2, #6]
 800687a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	88db      	ldrh	r3, [r3, #6]
 8006880:	2b07      	cmp	r3, #7
 8006882:	bf28      	it	cs
 8006884:	2307      	movcs	r3, #7
 8006886:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	89fa      	ldrh	r2, [r7, #14]
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f001 fae9 	bl	8007e66 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006894:	e085      	b.n	80069a2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	785a      	ldrb	r2, [r3, #1]
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	88db      	ldrh	r3, [r3, #6]
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80068ac:	6939      	ldr	r1, [r7, #16]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	88db      	ldrh	r3, [r3, #6]
 80068b2:	461a      	mov	r2, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 fb02 	bl	8007ebe <USBD_CtlPrepareRx>
      break;
 80068ba:	e072      	b.n	80069a2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	7850      	ldrb	r0, [r2, #1]
 80068c8:	2200      	movs	r2, #0
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	4798      	blx	r3
      break;
 80068ce:	e068      	b.n	80069a2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	785b      	ldrb	r3, [r3, #1]
 80068d4:	2b0b      	cmp	r3, #11
 80068d6:	d852      	bhi.n	800697e <USBD_CDC_Setup+0x162>
 80068d8:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <USBD_CDC_Setup+0xc4>)
 80068da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068de:	bf00      	nop
 80068e0:	08006911 	.word	0x08006911
 80068e4:	0800698d 	.word	0x0800698d
 80068e8:	0800697f 	.word	0x0800697f
 80068ec:	0800697f 	.word	0x0800697f
 80068f0:	0800697f 	.word	0x0800697f
 80068f4:	0800697f 	.word	0x0800697f
 80068f8:	0800697f 	.word	0x0800697f
 80068fc:	0800697f 	.word	0x0800697f
 8006900:	0800697f 	.word	0x0800697f
 8006904:	0800697f 	.word	0x0800697f
 8006908:	0800693b 	.word	0x0800693b
 800690c:	08006965 	.word	0x08006965
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b03      	cmp	r3, #3
 800691a:	d107      	bne.n	800692c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800691c:	f107 030a 	add.w	r3, r7, #10
 8006920:	2202      	movs	r2, #2
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f001 fa9e 	bl	8007e66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800692a:	e032      	b.n	8006992 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f001 fa28 	bl	8007d84 <USBD_CtlError>
            ret = USBD_FAIL;
 8006934:	2303      	movs	r3, #3
 8006936:	75fb      	strb	r3, [r7, #23]
          break;
 8006938:	e02b      	b.n	8006992 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b03      	cmp	r3, #3
 8006944:	d107      	bne.n	8006956 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006946:	f107 030d 	add.w	r3, r7, #13
 800694a:	2201      	movs	r2, #1
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f001 fa89 	bl	8007e66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006954:	e01d      	b.n	8006992 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fa13 	bl	8007d84 <USBD_CtlError>
            ret = USBD_FAIL;
 800695e:	2303      	movs	r3, #3
 8006960:	75fb      	strb	r3, [r7, #23]
          break;
 8006962:	e016      	b.n	8006992 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b03      	cmp	r3, #3
 800696e:	d00f      	beq.n	8006990 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 fa06 	bl	8007d84 <USBD_CtlError>
            ret = USBD_FAIL;
 8006978:	2303      	movs	r3, #3
 800697a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800697c:	e008      	b.n	8006990 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 f9ff 	bl	8007d84 <USBD_CtlError>
          ret = USBD_FAIL;
 8006986:	2303      	movs	r3, #3
 8006988:	75fb      	strb	r3, [r7, #23]
          break;
 800698a:	e002      	b.n	8006992 <USBD_CDC_Setup+0x176>
          break;
 800698c:	bf00      	nop
 800698e:	e008      	b.n	80069a2 <USBD_CDC_Setup+0x186>
          break;
 8006990:	bf00      	nop
      }
      break;
 8006992:	e006      	b.n	80069a2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 f9f4 	bl	8007d84 <USBD_CtlError>
      ret = USBD_FAIL;
 800699c:	2303      	movs	r3, #3
 800699e:	75fb      	strb	r3, [r7, #23]
      break;
 80069a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80069a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80069be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e04f      	b.n	8006a6e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80069d6:	78fa      	ldrb	r2, [r7, #3]
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	3318      	adds	r3, #24
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d029      	beq.n	8006a40 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80069ec:	78fa      	ldrb	r2, [r7, #3]
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	440b      	add	r3, r1
 80069fa:	3318      	adds	r3, #24
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	78f9      	ldrb	r1, [r7, #3]
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	460b      	mov	r3, r1
 8006a04:	00db      	lsls	r3, r3, #3
 8006a06:	1a5b      	subs	r3, r3, r1
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4403      	add	r3, r0
 8006a0c:	3344      	adds	r3, #68	; 0x44
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a14:	fb03 f301 	mul.w	r3, r3, r1
 8006a18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d110      	bne.n	8006a40 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006a1e:	78fa      	ldrb	r2, [r7, #3]
 8006a20:	6879      	ldr	r1, [r7, #4]
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	440b      	add	r3, r1
 8006a2c:	3318      	adds	r3, #24
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a32:	78f9      	ldrb	r1, [r7, #3]
 8006a34:	2300      	movs	r3, #0
 8006a36:	2200      	movs	r2, #0
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f003 f93a 	bl	8009cb2 <USBD_LL_Transmit>
 8006a3e:	e015      	b.n	8006a6c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006a68:	78fa      	ldrb	r2, [r7, #3]
 8006a6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e015      	b.n	8006ac4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f003 f94a 	bl	8009d36 <USBD_LL_GetRxDataSize>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006abe:	4611      	mov	r1, r2
 8006ac0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ada:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e01b      	b.n	8006b1e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d015      	beq.n	8006b1c <USBD_CDC_EP0_RxReady+0x50>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006af6:	2bff      	cmp	r3, #255	; 0xff
 8006af8:	d010      	beq.n	8006b1c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006b08:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b10:	b292      	uxth	r2, r2
 8006b12:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	22ff      	movs	r2, #255	; 0xff
 8006b18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2243      	movs	r2, #67	; 0x43
 8006b34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006b36:	4b03      	ldr	r3, [pc, #12]	; (8006b44 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	20000094 	.word	0x20000094

08006b48 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2243      	movs	r2, #67	; 0x43
 8006b54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006b56:	4b03      	ldr	r3, [pc, #12]	; (8006b64 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	20000050 	.word	0x20000050

08006b68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2243      	movs	r2, #67	; 0x43
 8006b74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006b76:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	200000d8 	.word	0x200000d8

08006b88 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	220a      	movs	r2, #10
 8006b94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b96:	4b03      	ldr	r3, [pc, #12]	; (8006ba4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	2000000c 	.word	0x2000000c

08006ba8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e004      	b.n	8006bc6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b087      	sub	sp, #28
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	60f8      	str	r0, [r7, #12]
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006be4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e008      	b.n	8006c02 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b085      	sub	sp, #20
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e004      	b.n	8006c34 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e016      	b.n	8006c8c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	7c1b      	ldrb	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d109      	bne.n	8006c7a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c70:	2101      	movs	r1, #1
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f003 f83e 	bl	8009cf4 <USBD_LL_PrepareReceive>
 8006c78:	e007      	b.n	8006c8a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c80:	2340      	movs	r3, #64	; 0x40
 8006c82:	2101      	movs	r1, #1
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f003 f835 	bl	8009cf4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e01f      	b.n	8006cec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	79fa      	ldrb	r2, [r7, #7]
 8006cde:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f002 feb1 	bl	8009a48 <USBD_LL_Init>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e016      	b.n	8006d3a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00b      	beq.n	8006d38 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	f107 020e 	add.w	r2, r7, #14
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	4798      	blx	r3
 8006d30:	4602      	mov	r2, r0
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f002 fec8 	bl	8009ae0 <USBD_LL_Start>
 8006d50:	4603      	mov	r3, r0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d009      	beq.n	8006d9e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	78fa      	ldrb	r2, [r7, #3]
 8006d94:	4611      	mov	r1, r2
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d007      	beq.n	8006dce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	78fa      	ldrb	r2, [r7, #3]
 8006dc8:	4611      	mov	r1, r2
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	4798      	blx	r3
  }

  return USBD_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 ff90 	bl	8007d10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006dfe:	461a      	mov	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d01a      	beq.n	8006e4a <USBD_LL_SetupStage+0x72>
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d822      	bhi.n	8006e5e <USBD_LL_SetupStage+0x86>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <USBD_LL_SetupStage+0x4a>
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d00a      	beq.n	8006e36 <USBD_LL_SetupStage+0x5e>
 8006e20:	e01d      	b.n	8006e5e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fa62 	bl	80072f4 <USBD_StdDevReq>
 8006e30:	4603      	mov	r3, r0
 8006e32:	73fb      	strb	r3, [r7, #15]
      break;
 8006e34:	e020      	b.n	8006e78 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fac6 	bl	80073d0 <USBD_StdItfReq>
 8006e44:	4603      	mov	r3, r0
 8006e46:	73fb      	strb	r3, [r7, #15]
      break;
 8006e48:	e016      	b.n	8006e78 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fb05 	bl	8007462 <USBD_StdEPReq>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e5c:	e00c      	b.n	8006e78 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f002 fe97 	bl	8009ba0 <USBD_LL_StallEP>
 8006e72:	4603      	mov	r3, r0
 8006e74:	73fb      	strb	r3, [r7, #15]
      break;
 8006e76:	bf00      	nop
  }

  return ret;
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b086      	sub	sp, #24
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	607a      	str	r2, [r7, #4]
 8006e8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e90:	7afb      	ldrb	r3, [r7, #11]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d138      	bne.n	8006f08 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e9c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ea4:	2b03      	cmp	r3, #3
 8006ea6:	d14a      	bne.n	8006f3e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d913      	bls.n	8006edc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	1ad2      	subs	r2, r2, r3
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	bf28      	it	cs
 8006ece:	4613      	movcs	r3, r2
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	6879      	ldr	r1, [r7, #4]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f001 f80f 	bl	8007ef8 <USBD_CtlContinueRx>
 8006eda:	e030      	b.n	8006f3e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d10b      	bne.n	8006f00 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f001 f80a 	bl	8007f1a <USBD_CtlSendStatus>
 8006f06:	e01a      	b.n	8006f3e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d114      	bne.n	8006f3e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00e      	beq.n	8006f3e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	7afa      	ldrb	r2, [r7, #11]
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	4798      	blx	r3
 8006f30:	4603      	mov	r3, r0
 8006f32:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f34:	7dfb      	ldrb	r3, [r7, #23]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
 8006f3c:	e000      	b.n	8006f40 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	460b      	mov	r3, r1
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f56:	7afb      	ldrb	r3, [r7, #11]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d16b      	bne.n	8007034 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3314      	adds	r3, #20
 8006f60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d156      	bne.n	800701a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d914      	bls.n	8006fa2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	1ad2      	subs	r2, r2, r3
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 ff84 	bl	8007e9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f94:	2300      	movs	r3, #0
 8006f96:	2200      	movs	r2, #0
 8006f98:	2100      	movs	r1, #0
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f002 feaa 	bl	8009cf4 <USBD_LL_PrepareReceive>
 8006fa0:	e03b      	b.n	800701a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d11c      	bne.n	8006fe8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d316      	bcc.n	8006fe8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d20f      	bcs.n	8006fe8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2100      	movs	r1, #0
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 ff65 	bl	8007e9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fda:	2300      	movs	r3, #0
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2100      	movs	r1, #0
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f002 fe87 	bl	8009cf4 <USBD_LL_PrepareReceive>
 8006fe6:	e018      	b.n	800701a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d10b      	bne.n	800700c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d005      	beq.n	800700c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800700c:	2180      	movs	r1, #128	; 0x80
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f002 fdc6 	bl	8009ba0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 ff93 	bl	8007f40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007020:	2b01      	cmp	r3, #1
 8007022:	d122      	bne.n	800706a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff fe98 	bl	8006d5a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007032:	e01a      	b.n	800706a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b03      	cmp	r3, #3
 800703e:	d114      	bne.n	800706a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00e      	beq.n	800706a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	7afa      	ldrb	r2, [r7, #11]
 8007056:	4611      	mov	r1, r2
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	4798      	blx	r3
 800705c:	4603      	mov	r3, r0
 800705e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007060:	7dfb      	ldrb	r3, [r7, #23]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007066:	7dfb      	ldrb	r3, [r7, #23]
 8007068:	e000      	b.n	800706c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e02f      	b.n	8007108 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00f      	beq.n	80070d2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d009      	beq.n	80070d2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	6852      	ldr	r2, [r2, #4]
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	4611      	mov	r1, r2
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070d2:	2340      	movs	r3, #64	; 0x40
 80070d4:	2200      	movs	r2, #0
 80070d6:	2100      	movs	r1, #0
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f002 fd1c 	bl	8009b16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2240      	movs	r2, #64	; 0x40
 80070ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070ee:	2340      	movs	r3, #64	; 0x40
 80070f0:	2200      	movs	r2, #0
 80070f2:	2180      	movs	r1, #128	; 0x80
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f002 fd0e 	bl	8009b16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2240      	movs	r2, #64	; 0x40
 8007104:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	78fa      	ldrb	r2, [r7, #3]
 8007120:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800713e:	b2da      	uxtb	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2204      	movs	r2, #4
 800714a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b04      	cmp	r3, #4
 800716e:	d106      	bne.n	800717e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007176:	b2da      	uxtb	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800719e:	2303      	movs	r3, #3
 80071a0:	e012      	b.n	80071c8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d10b      	bne.n	80071c6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e014      	b.n	8007214 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d10d      	bne.n	8007212 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d007      	beq.n	8007212 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	78fa      	ldrb	r2, [r7, #3]
 800720c:	4611      	mov	r1, r2
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007232:	2303      	movs	r3, #3
 8007234:	e014      	b.n	8007260 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b03      	cmp	r3, #3
 8007240:	d10d      	bne.n	800725e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	2b00      	cmp	r3, #0
 800724c:	d007      	beq.n	800725e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	78fa      	ldrb	r2, [r7, #3]
 8007258:	4611      	mov	r1, r2
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007294:	2b00      	cmp	r3, #0
 8007296:	d009      	beq.n	80072ac <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6852      	ldr	r2, [r2, #4]
 80072a4:	b2d2      	uxtb	r2, r2
 80072a6:	4611      	mov	r1, r2
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	4798      	blx	r3
  }

  return USBD_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b087      	sub	sp, #28
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	3301      	adds	r3, #1
 80072cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80072d4:	8a3b      	ldrh	r3, [r7, #16]
 80072d6:	021b      	lsls	r3, r3, #8
 80072d8:	b21a      	sxth	r2, r3
 80072da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072de:	4313      	orrs	r3, r2
 80072e0:	b21b      	sxth	r3, r3
 80072e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80072e4:	89fb      	ldrh	r3, [r7, #14]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
	...

080072f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800730a:	2b40      	cmp	r3, #64	; 0x40
 800730c:	d005      	beq.n	800731a <USBD_StdDevReq+0x26>
 800730e:	2b40      	cmp	r3, #64	; 0x40
 8007310:	d853      	bhi.n	80073ba <USBD_StdDevReq+0xc6>
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00b      	beq.n	800732e <USBD_StdDevReq+0x3a>
 8007316:	2b20      	cmp	r3, #32
 8007318:	d14f      	bne.n	80073ba <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	4798      	blx	r3
 8007328:	4603      	mov	r3, r0
 800732a:	73fb      	strb	r3, [r7, #15]
      break;
 800732c:	e04a      	b.n	80073c4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	2b09      	cmp	r3, #9
 8007334:	d83b      	bhi.n	80073ae <USBD_StdDevReq+0xba>
 8007336:	a201      	add	r2, pc, #4	; (adr r2, 800733c <USBD_StdDevReq+0x48>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	08007391 	.word	0x08007391
 8007340:	080073a5 	.word	0x080073a5
 8007344:	080073af 	.word	0x080073af
 8007348:	0800739b 	.word	0x0800739b
 800734c:	080073af 	.word	0x080073af
 8007350:	0800736f 	.word	0x0800736f
 8007354:	08007365 	.word	0x08007365
 8007358:	080073af 	.word	0x080073af
 800735c:	08007387 	.word	0x08007387
 8007360:	08007379 	.word	0x08007379
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f9de 	bl	8007728 <USBD_GetDescriptor>
          break;
 800736c:	e024      	b.n	80073b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fb43 	bl	80079fc <USBD_SetAddress>
          break;
 8007376:	e01f      	b.n	80073b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fb82 	bl	8007a84 <USBD_SetConfig>
 8007380:	4603      	mov	r3, r0
 8007382:	73fb      	strb	r3, [r7, #15]
          break;
 8007384:	e018      	b.n	80073b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fc21 	bl	8007bd0 <USBD_GetConfig>
          break;
 800738e:	e013      	b.n	80073b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fc52 	bl	8007c3c <USBD_GetStatus>
          break;
 8007398:	e00e      	b.n	80073b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fc81 	bl	8007ca4 <USBD_SetFeature>
          break;
 80073a2:	e009      	b.n	80073b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fc90 	bl	8007ccc <USBD_ClrFeature>
          break;
 80073ac:	e004      	b.n	80073b8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fce7 	bl	8007d84 <USBD_CtlError>
          break;
 80073b6:	bf00      	nop
      }
      break;
 80073b8:	e004      	b.n	80073c4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fce1 	bl	8007d84 <USBD_CtlError>
      break;
 80073c2:	bf00      	nop
  }

  return ret;
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop

080073d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073e6:	2b40      	cmp	r3, #64	; 0x40
 80073e8:	d005      	beq.n	80073f6 <USBD_StdItfReq+0x26>
 80073ea:	2b40      	cmp	r3, #64	; 0x40
 80073ec:	d82f      	bhi.n	800744e <USBD_StdItfReq+0x7e>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <USBD_StdItfReq+0x26>
 80073f2:	2b20      	cmp	r3, #32
 80073f4:	d12b      	bne.n	800744e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	2b02      	cmp	r3, #2
 8007402:	d81d      	bhi.n	8007440 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	889b      	ldrh	r3, [r3, #4]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b01      	cmp	r3, #1
 800740c:	d813      	bhi.n	8007436 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	4798      	blx	r3
 800741c:	4603      	mov	r3, r0
 800741e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	88db      	ldrh	r3, [r3, #6]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d110      	bne.n	800744a <USBD_StdItfReq+0x7a>
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10d      	bne.n	800744a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fd73 	bl	8007f1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007434:	e009      	b.n	800744a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fca3 	bl	8007d84 <USBD_CtlError>
          break;
 800743e:	e004      	b.n	800744a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fc9e 	bl	8007d84 <USBD_CtlError>
          break;
 8007448:	e000      	b.n	800744c <USBD_StdItfReq+0x7c>
          break;
 800744a:	bf00      	nop
      }
      break;
 800744c:	e004      	b.n	8007458 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fc97 	bl	8007d84 <USBD_CtlError>
      break;
 8007456:	bf00      	nop
  }

  return ret;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b084      	sub	sp, #16
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	889b      	ldrh	r3, [r3, #4]
 8007474:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800747e:	2b40      	cmp	r3, #64	; 0x40
 8007480:	d007      	beq.n	8007492 <USBD_StdEPReq+0x30>
 8007482:	2b40      	cmp	r3, #64	; 0x40
 8007484:	f200 8145 	bhi.w	8007712 <USBD_StdEPReq+0x2b0>
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00c      	beq.n	80074a6 <USBD_StdEPReq+0x44>
 800748c:	2b20      	cmp	r3, #32
 800748e:	f040 8140 	bne.w	8007712 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	4798      	blx	r3
 80074a0:	4603      	mov	r3, r0
 80074a2:	73fb      	strb	r3, [r7, #15]
      break;
 80074a4:	e13a      	b.n	800771c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	785b      	ldrb	r3, [r3, #1]
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	d007      	beq.n	80074be <USBD_StdEPReq+0x5c>
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	f300 8129 	bgt.w	8007706 <USBD_StdEPReq+0x2a4>
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d07f      	beq.n	80075b8 <USBD_StdEPReq+0x156>
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d03c      	beq.n	8007536 <USBD_StdEPReq+0xd4>
 80074bc:	e123      	b.n	8007706 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d002      	beq.n	80074d0 <USBD_StdEPReq+0x6e>
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d016      	beq.n	80074fc <USBD_StdEPReq+0x9a>
 80074ce:	e02c      	b.n	800752a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00d      	beq.n	80074f2 <USBD_StdEPReq+0x90>
 80074d6:	7bbb      	ldrb	r3, [r7, #14]
 80074d8:	2b80      	cmp	r3, #128	; 0x80
 80074da:	d00a      	beq.n	80074f2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f002 fb5d 	bl	8009ba0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074e6:	2180      	movs	r1, #128	; 0x80
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f002 fb59 	bl	8009ba0 <USBD_LL_StallEP>
 80074ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074f0:	e020      	b.n	8007534 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fc45 	bl	8007d84 <USBD_CtlError>
              break;
 80074fa:	e01b      	b.n	8007534 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	885b      	ldrh	r3, [r3, #2]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10e      	bne.n	8007522 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007504:	7bbb      	ldrb	r3, [r7, #14]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00b      	beq.n	8007522 <USBD_StdEPReq+0xc0>
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	2b80      	cmp	r3, #128	; 0x80
 800750e:	d008      	beq.n	8007522 <USBD_StdEPReq+0xc0>
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	88db      	ldrh	r3, [r3, #6]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d104      	bne.n	8007522 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f002 fb3f 	bl	8009ba0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fcf9 	bl	8007f1a <USBD_CtlSendStatus>

              break;
 8007528:	e004      	b.n	8007534 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fc29 	bl	8007d84 <USBD_CtlError>
              break;
 8007532:	bf00      	nop
          }
          break;
 8007534:	e0ec      	b.n	8007710 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b02      	cmp	r3, #2
 8007540:	d002      	beq.n	8007548 <USBD_StdEPReq+0xe6>
 8007542:	2b03      	cmp	r3, #3
 8007544:	d016      	beq.n	8007574 <USBD_StdEPReq+0x112>
 8007546:	e030      	b.n	80075aa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00d      	beq.n	800756a <USBD_StdEPReq+0x108>
 800754e:	7bbb      	ldrb	r3, [r7, #14]
 8007550:	2b80      	cmp	r3, #128	; 0x80
 8007552:	d00a      	beq.n	800756a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f002 fb21 	bl	8009ba0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800755e:	2180      	movs	r1, #128	; 0x80
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f002 fb1d 	bl	8009ba0 <USBD_LL_StallEP>
 8007566:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007568:	e025      	b.n	80075b6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fc09 	bl	8007d84 <USBD_CtlError>
              break;
 8007572:	e020      	b.n	80075b6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	885b      	ldrh	r3, [r3, #2]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d11b      	bne.n	80075b4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007582:	2b00      	cmp	r3, #0
 8007584:	d004      	beq.n	8007590 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007586:	7bbb      	ldrb	r3, [r7, #14]
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f002 fb27 	bl	8009bde <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fcc2 	bl	8007f1a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	4798      	blx	r3
 80075a4:	4603      	mov	r3, r0
 80075a6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80075a8:	e004      	b.n	80075b4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fbe9 	bl	8007d84 <USBD_CtlError>
              break;
 80075b2:	e000      	b.n	80075b6 <USBD_StdEPReq+0x154>
              break;
 80075b4:	bf00      	nop
          }
          break;
 80075b6:	e0ab      	b.n	8007710 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d002      	beq.n	80075ca <USBD_StdEPReq+0x168>
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d032      	beq.n	800762e <USBD_StdEPReq+0x1cc>
 80075c8:	e097      	b.n	80076fa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d007      	beq.n	80075e0 <USBD_StdEPReq+0x17e>
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
 80075d2:	2b80      	cmp	r3, #128	; 0x80
 80075d4:	d004      	beq.n	80075e0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fbd3 	bl	8007d84 <USBD_CtlError>
                break;
 80075de:	e091      	b.n	8007704 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	da0b      	bge.n	8007600 <USBD_StdEPReq+0x19e>
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	3310      	adds	r3, #16
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	4413      	add	r3, r2
 80075fc:	3304      	adds	r3, #4
 80075fe:	e00b      	b.n	8007618 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	4413      	add	r3, r2
 8007616:	3304      	adds	r3, #4
 8007618:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2202      	movs	r2, #2
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fc1d 	bl	8007e66 <USBD_CtlSendData>
              break;
 800762c:	e06a      	b.n	8007704 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800762e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007632:	2b00      	cmp	r3, #0
 8007634:	da11      	bge.n	800765a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007636:	7bbb      	ldrb	r3, [r7, #14]
 8007638:	f003 020f 	and.w	r2, r3, #15
 800763c:	6879      	ldr	r1, [r7, #4]
 800763e:	4613      	mov	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	440b      	add	r3, r1
 8007648:	3324      	adds	r3, #36	; 0x24
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d117      	bne.n	8007680 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fb96 	bl	8007d84 <USBD_CtlError>
                  break;
 8007658:	e054      	b.n	8007704 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	f003 020f 	and.w	r2, r3, #15
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	4613      	mov	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	440b      	add	r3, r1
 800766c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d104      	bne.n	8007680 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fb83 	bl	8007d84 <USBD_CtlError>
                  break;
 800767e:	e041      	b.n	8007704 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007680:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007684:	2b00      	cmp	r3, #0
 8007686:	da0b      	bge.n	80076a0 <USBD_StdEPReq+0x23e>
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800768e:	4613      	mov	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	3310      	adds	r3, #16
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	4413      	add	r3, r2
 800769c:	3304      	adds	r3, #4
 800769e:	e00b      	b.n	80076b8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076a6:	4613      	mov	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	4413      	add	r3, r2
 80076b6:	3304      	adds	r3, #4
 80076b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <USBD_StdEPReq+0x264>
 80076c0:	7bbb      	ldrb	r3, [r7, #14]
 80076c2:	2b80      	cmp	r3, #128	; 0x80
 80076c4:	d103      	bne.n	80076ce <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	e00e      	b.n	80076ec <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f002 faa2 	bl	8009c1c <USBD_LL_IsStallEP>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2201      	movs	r2, #1
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	e002      	b.n	80076ec <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2202      	movs	r2, #2
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fbb7 	bl	8007e66 <USBD_CtlSendData>
              break;
 80076f8:	e004      	b.n	8007704 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fb41 	bl	8007d84 <USBD_CtlError>
              break;
 8007702:	bf00      	nop
          }
          break;
 8007704:	e004      	b.n	8007710 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fb3b 	bl	8007d84 <USBD_CtlError>
          break;
 800770e:	bf00      	nop
      }
      break;
 8007710:	e004      	b.n	800771c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fb35 	bl	8007d84 <USBD_CtlError>
      break;
 800771a:	bf00      	nop
  }

  return ret;
 800771c:	7bfb      	ldrb	r3, [r7, #15]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	885b      	ldrh	r3, [r3, #2]
 8007742:	0a1b      	lsrs	r3, r3, #8
 8007744:	b29b      	uxth	r3, r3
 8007746:	3b01      	subs	r3, #1
 8007748:	2b06      	cmp	r3, #6
 800774a:	f200 8128 	bhi.w	800799e <USBD_GetDescriptor+0x276>
 800774e:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <USBD_GetDescriptor+0x2c>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	08007771 	.word	0x08007771
 8007758:	08007789 	.word	0x08007789
 800775c:	080077c9 	.word	0x080077c9
 8007760:	0800799f 	.word	0x0800799f
 8007764:	0800799f 	.word	0x0800799f
 8007768:	0800793f 	.word	0x0800793f
 800776c:	0800796b 	.word	0x0800796b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7c12      	ldrb	r2, [r2, #16]
 800777c:	f107 0108 	add.w	r1, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
      break;
 8007786:	e112      	b.n	80079ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	7c1b      	ldrb	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10d      	bne.n	80077ac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007798:	f107 0208 	add.w	r2, r7, #8
 800779c:	4610      	mov	r0, r2
 800779e:	4798      	blx	r3
 80077a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3301      	adds	r3, #1
 80077a6:	2202      	movs	r2, #2
 80077a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077aa:	e100      	b.n	80079ae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	f107 0208 	add.w	r2, r7, #8
 80077b8:	4610      	mov	r0, r2
 80077ba:	4798      	blx	r3
 80077bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	2202      	movs	r2, #2
 80077c4:	701a      	strb	r2, [r3, #0]
      break;
 80077c6:	e0f2      	b.n	80079ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	885b      	ldrh	r3, [r3, #2]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b05      	cmp	r3, #5
 80077d0:	f200 80ac 	bhi.w	800792c <USBD_GetDescriptor+0x204>
 80077d4:	a201      	add	r2, pc, #4	; (adr r2, 80077dc <USBD_GetDescriptor+0xb4>)
 80077d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077da:	bf00      	nop
 80077dc:	080077f5 	.word	0x080077f5
 80077e0:	08007829 	.word	0x08007829
 80077e4:	0800785d 	.word	0x0800785d
 80077e8:	08007891 	.word	0x08007891
 80077ec:	080078c5 	.word	0x080078c5
 80077f0:	080078f9 	.word	0x080078f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00b      	beq.n	8007818 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	7c12      	ldrb	r2, [r2, #16]
 800780c:	f107 0108 	add.w	r1, r7, #8
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007816:	e091      	b.n	800793c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fab2 	bl	8007d84 <USBD_CtlError>
            err++;
 8007820:	7afb      	ldrb	r3, [r7, #11]
 8007822:	3301      	adds	r3, #1
 8007824:	72fb      	strb	r3, [r7, #11]
          break;
 8007826:	e089      	b.n	800793c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	7c12      	ldrb	r2, [r2, #16]
 8007840:	f107 0108 	add.w	r1, r7, #8
 8007844:	4610      	mov	r0, r2
 8007846:	4798      	blx	r3
 8007848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800784a:	e077      	b.n	800793c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fa98 	bl	8007d84 <USBD_CtlError>
            err++;
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	3301      	adds	r3, #1
 8007858:	72fb      	strb	r3, [r7, #11]
          break;
 800785a:	e06f      	b.n	800793c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	7c12      	ldrb	r2, [r2, #16]
 8007874:	f107 0108 	add.w	r1, r7, #8
 8007878:	4610      	mov	r0, r2
 800787a:	4798      	blx	r3
 800787c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800787e:	e05d      	b.n	800793c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa7e 	bl	8007d84 <USBD_CtlError>
            err++;
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	3301      	adds	r3, #1
 800788c:	72fb      	strb	r3, [r7, #11]
          break;
 800788e:	e055      	b.n	800793c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00b      	beq.n	80078b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	7c12      	ldrb	r2, [r2, #16]
 80078a8:	f107 0108 	add.w	r1, r7, #8
 80078ac:	4610      	mov	r0, r2
 80078ae:	4798      	blx	r3
 80078b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078b2:	e043      	b.n	800793c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa64 	bl	8007d84 <USBD_CtlError>
            err++;
 80078bc:	7afb      	ldrb	r3, [r7, #11]
 80078be:	3301      	adds	r3, #1
 80078c0:	72fb      	strb	r3, [r7, #11]
          break;
 80078c2:	e03b      	b.n	800793c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00b      	beq.n	80078e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	7c12      	ldrb	r2, [r2, #16]
 80078dc:	f107 0108 	add.w	r1, r7, #8
 80078e0:	4610      	mov	r0, r2
 80078e2:	4798      	blx	r3
 80078e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078e6:	e029      	b.n	800793c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa4a 	bl	8007d84 <USBD_CtlError>
            err++;
 80078f0:	7afb      	ldrb	r3, [r7, #11]
 80078f2:	3301      	adds	r3, #1
 80078f4:	72fb      	strb	r3, [r7, #11]
          break;
 80078f6:	e021      	b.n	800793c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00b      	beq.n	800791c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	7c12      	ldrb	r2, [r2, #16]
 8007910:	f107 0108 	add.w	r1, r7, #8
 8007914:	4610      	mov	r0, r2
 8007916:	4798      	blx	r3
 8007918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800791a:	e00f      	b.n	800793c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fa30 	bl	8007d84 <USBD_CtlError>
            err++;
 8007924:	7afb      	ldrb	r3, [r7, #11]
 8007926:	3301      	adds	r3, #1
 8007928:	72fb      	strb	r3, [r7, #11]
          break;
 800792a:	e007      	b.n	800793c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa28 	bl	8007d84 <USBD_CtlError>
          err++;
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	3301      	adds	r3, #1
 8007938:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800793a:	bf00      	nop
      }
      break;
 800793c:	e037      	b.n	80079ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	7c1b      	ldrb	r3, [r3, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d109      	bne.n	800795a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794e:	f107 0208 	add.w	r2, r7, #8
 8007952:	4610      	mov	r0, r2
 8007954:	4798      	blx	r3
 8007956:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007958:	e029      	b.n	80079ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fa11 	bl	8007d84 <USBD_CtlError>
        err++;
 8007962:	7afb      	ldrb	r3, [r7, #11]
 8007964:	3301      	adds	r3, #1
 8007966:	72fb      	strb	r3, [r7, #11]
      break;
 8007968:	e021      	b.n	80079ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	7c1b      	ldrb	r3, [r3, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10d      	bne.n	800798e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797a:	f107 0208 	add.w	r2, r7, #8
 800797e:	4610      	mov	r0, r2
 8007980:	4798      	blx	r3
 8007982:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3301      	adds	r3, #1
 8007988:	2207      	movs	r2, #7
 800798a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800798c:	e00f      	b.n	80079ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f9f7 	bl	8007d84 <USBD_CtlError>
        err++;
 8007996:	7afb      	ldrb	r3, [r7, #11]
 8007998:	3301      	adds	r3, #1
 800799a:	72fb      	strb	r3, [r7, #11]
      break;
 800799c:	e007      	b.n	80079ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f9ef 	bl	8007d84 <USBD_CtlError>
      err++;
 80079a6:	7afb      	ldrb	r3, [r7, #11]
 80079a8:	3301      	adds	r3, #1
 80079aa:	72fb      	strb	r3, [r7, #11]
      break;
 80079ac:	bf00      	nop
  }

  if (err != 0U)
 80079ae:	7afb      	ldrb	r3, [r7, #11]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d11e      	bne.n	80079f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	88db      	ldrh	r3, [r3, #6]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d016      	beq.n	80079ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80079bc:	893b      	ldrh	r3, [r7, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00e      	beq.n	80079e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	88da      	ldrh	r2, [r3, #6]
 80079c6:	893b      	ldrh	r3, [r7, #8]
 80079c8:	4293      	cmp	r3, r2
 80079ca:	bf28      	it	cs
 80079cc:	4613      	movcs	r3, r2
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079d2:	893b      	ldrh	r3, [r7, #8]
 80079d4:	461a      	mov	r2, r3
 80079d6:	68f9      	ldr	r1, [r7, #12]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fa44 	bl	8007e66 <USBD_CtlSendData>
 80079de:	e009      	b.n	80079f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f9ce 	bl	8007d84 <USBD_CtlError>
 80079e8:	e004      	b.n	80079f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fa95 	bl	8007f1a <USBD_CtlSendStatus>
 80079f0:	e000      	b.n	80079f4 <USBD_GetDescriptor+0x2cc>
    return;
 80079f2:	bf00      	nop
  }
}
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop

080079fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	889b      	ldrh	r3, [r3, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d131      	bne.n	8007a72 <USBD_SetAddress+0x76>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	88db      	ldrh	r3, [r3, #6]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d12d      	bne.n	8007a72 <USBD_SetAddress+0x76>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	885b      	ldrh	r3, [r3, #2]
 8007a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a1c:	d829      	bhi.n	8007a72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	885b      	ldrh	r3, [r3, #2]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d104      	bne.n	8007a40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f9a3 	bl	8007d84 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3e:	e01d      	b.n	8007a7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	7bfa      	ldrb	r2, [r7, #15]
 8007a44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f002 f911 	bl	8009c74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fa61 	bl	8007f1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d004      	beq.n	8007a68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2202      	movs	r2, #2
 8007a62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a66:	e009      	b.n	8007a7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a70:	e004      	b.n	8007a7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f985 	bl	8007d84 <USBD_CtlError>
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	bf00      	nop
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	885b      	ldrh	r3, [r3, #2]
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	4b4c      	ldr	r3, [pc, #304]	; (8007bcc <USBD_SetConfig+0x148>)
 8007a9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a9c:	4b4b      	ldr	r3, [pc, #300]	; (8007bcc <USBD_SetConfig+0x148>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d905      	bls.n	8007ab0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f96c 	bl	8007d84 <USBD_CtlError>
    return USBD_FAIL;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e088      	b.n	8007bc2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d002      	beq.n	8007ac2 <USBD_SetConfig+0x3e>
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d025      	beq.n	8007b0c <USBD_SetConfig+0x88>
 8007ac0:	e071      	b.n	8007ba6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ac2:	4b42      	ldr	r3, [pc, #264]	; (8007bcc <USBD_SetConfig+0x148>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d01c      	beq.n	8007b04 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007aca:	4b40      	ldr	r3, [pc, #256]	; (8007bcc <USBD_SetConfig+0x148>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ad4:	4b3d      	ldr	r3, [pc, #244]	; (8007bcc <USBD_SetConfig+0x148>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7ff f948 	bl	8006d70 <USBD_SetClassConfig>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d004      	beq.n	8007af4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f949 	bl	8007d84 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007af2:	e065      	b.n	8007bc0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fa10 	bl	8007f1a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2203      	movs	r2, #3
 8007afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b02:	e05d      	b.n	8007bc0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fa08 	bl	8007f1a <USBD_CtlSendStatus>
      break;
 8007b0a:	e059      	b.n	8007bc0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b0c:	4b2f      	ldr	r3, [pc, #188]	; (8007bcc <USBD_SetConfig+0x148>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d112      	bne.n	8007b3a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007b1c:	4b2b      	ldr	r3, [pc, #172]	; (8007bcc <USBD_SetConfig+0x148>)
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	461a      	mov	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b26:	4b29      	ldr	r3, [pc, #164]	; (8007bcc <USBD_SetConfig+0x148>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff f93b 	bl	8006da8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f9f1 	bl	8007f1a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b38:	e042      	b.n	8007bc0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007b3a:	4b24      	ldr	r3, [pc, #144]	; (8007bcc <USBD_SetConfig+0x148>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d02a      	beq.n	8007b9e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff f929 	bl	8006da8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b56:	4b1d      	ldr	r3, [pc, #116]	; (8007bcc <USBD_SetConfig+0x148>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b60:	4b1a      	ldr	r3, [pc, #104]	; (8007bcc <USBD_SetConfig+0x148>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff f902 	bl	8006d70 <USBD_SetClassConfig>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00f      	beq.n	8007b96 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f903 	bl	8007d84 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff f90e 	bl	8006da8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b94:	e014      	b.n	8007bc0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f9bf 	bl	8007f1a <USBD_CtlSendStatus>
      break;
 8007b9c:	e010      	b.n	8007bc0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f9bb 	bl	8007f1a <USBD_CtlSendStatus>
      break;
 8007ba4:	e00c      	b.n	8007bc0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f8eb 	bl	8007d84 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bae:	4b07      	ldr	r3, [pc, #28]	; (8007bcc <USBD_SetConfig+0x148>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff f8f7 	bl	8006da8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007bbe:	bf00      	nop
  }

  return ret;
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	200003f4 	.word	0x200003f4

08007bd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	88db      	ldrh	r3, [r3, #6]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d004      	beq.n	8007bec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f8cd 	bl	8007d84 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bea:	e023      	b.n	8007c34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	dc02      	bgt.n	8007bfe <USBD_GetConfig+0x2e>
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	dc03      	bgt.n	8007c04 <USBD_GetConfig+0x34>
 8007bfc:	e015      	b.n	8007c2a <USBD_GetConfig+0x5a>
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d00b      	beq.n	8007c1a <USBD_GetConfig+0x4a>
 8007c02:	e012      	b.n	8007c2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	2201      	movs	r2, #1
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f927 	bl	8007e66 <USBD_CtlSendData>
        break;
 8007c18:	e00c      	b.n	8007c34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	2201      	movs	r2, #1
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f91f 	bl	8007e66 <USBD_CtlSendData>
        break;
 8007c28:	e004      	b.n	8007c34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c2a:	6839      	ldr	r1, [r7, #0]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f8a9 	bl	8007d84 <USBD_CtlError>
        break;
 8007c32:	bf00      	nop
}
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d81e      	bhi.n	8007c92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	88db      	ldrh	r3, [r3, #6]
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d004      	beq.n	8007c66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f890 	bl	8007d84 <USBD_CtlError>
        break;
 8007c64:	e01a      	b.n	8007c9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d005      	beq.n	8007c82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f043 0202 	orr.w	r2, r3, #2
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	330c      	adds	r3, #12
 8007c86:	2202      	movs	r2, #2
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f8eb 	bl	8007e66 <USBD_CtlSendData>
      break;
 8007c90:	e004      	b.n	8007c9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f875 	bl	8007d84 <USBD_CtlError>
      break;
 8007c9a:	bf00      	nop
  }
}
 8007c9c:	bf00      	nop
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	885b      	ldrh	r3, [r3, #2]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d106      	bne.n	8007cc4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f92b 	bl	8007f1a <USBD_CtlSendStatus>
  }
}
 8007cc4:	bf00      	nop
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d80b      	bhi.n	8007cfc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	885b      	ldrh	r3, [r3, #2]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d10c      	bne.n	8007d06 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f910 	bl	8007f1a <USBD_CtlSendStatus>
      }
      break;
 8007cfa:	e004      	b.n	8007d06 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f840 	bl	8007d84 <USBD_CtlError>
      break;
 8007d04:	e000      	b.n	8007d08 <USBD_ClrFeature+0x3c>
      break;
 8007d06:	bf00      	nop
  }
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	781a      	ldrb	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	781a      	ldrb	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3301      	adds	r3, #1
 8007d38:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f7ff fabb 	bl	80072b6 <SWAPBYTE>
 8007d40:	4603      	mov	r3, r0
 8007d42:	461a      	mov	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3301      	adds	r3, #1
 8007d52:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7ff faae 	bl	80072b6 <SWAPBYTE>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f7ff faa1 	bl	80072b6 <SWAPBYTE>
 8007d74:	4603      	mov	r3, r0
 8007d76:	461a      	mov	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	80da      	strh	r2, [r3, #6]
}
 8007d7c:	bf00      	nop
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d8e:	2180      	movs	r1, #128	; 0x80
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 ff05 	bl	8009ba0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d96:	2100      	movs	r1, #0
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 ff01 	bl	8009ba0 <USBD_LL_StallEP>
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b086      	sub	sp, #24
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d036      	beq.n	8007e2a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007dc0:	6938      	ldr	r0, [r7, #16]
 8007dc2:	f000 f836 	bl	8007e32 <USBD_GetLen>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	3301      	adds	r3, #1
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	4413      	add	r3, r2
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	7812      	ldrb	r2, [r2, #0]
 8007dde:	701a      	strb	r2, [r3, #0]
  idx++;
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	3301      	adds	r3, #1
 8007de4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007de6:	7dfb      	ldrb	r3, [r7, #23]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	4413      	add	r3, r2
 8007dec:	2203      	movs	r2, #3
 8007dee:	701a      	strb	r2, [r3, #0]
  idx++;
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
 8007df2:	3301      	adds	r3, #1
 8007df4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007df6:	e013      	b.n	8007e20 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	7812      	ldrb	r2, [r2, #0]
 8007e02:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	3301      	adds	r3, #1
 8007e08:	613b      	str	r3, [r7, #16]
    idx++;
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	4413      	add	r3, r2
 8007e16:	2200      	movs	r2, #0
 8007e18:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e1a:	7dfb      	ldrb	r3, [r7, #23]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e7      	bne.n	8007df8 <USBD_GetString+0x52>
 8007e28:	e000      	b.n	8007e2c <USBD_GetString+0x86>
    return;
 8007e2a:	bf00      	nop
  }
}
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b085      	sub	sp, #20
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e42:	e005      	b.n	8007e50 <USBD_GetLen+0x1e>
  {
    len++;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	3301      	adds	r3, #1
 8007e48:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1f5      	bne.n	8007e44 <USBD_GetLen+0x12>
  }

  return len;
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	60f8      	str	r0, [r7, #12]
 8007e6e:	60b9      	str	r1, [r7, #8]
 8007e70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2202      	movs	r2, #2
 8007e76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f001 ff10 	bl	8009cb2 <USBD_LL_Transmit>

  return USBD_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	2100      	movs	r1, #0
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f001 feff 	bl	8009cb2 <USBD_LL_Transmit>

  return USBD_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	60f8      	str	r0, [r7, #12]
 8007ec6:	60b9      	str	r1, [r7, #8]
 8007ec8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2203      	movs	r2, #3
 8007ece:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f001 ff03 	bl	8009cf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	2100      	movs	r1, #0
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f001 fef2 	bl	8009cf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2204      	movs	r2, #4
 8007f26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2100      	movs	r1, #0
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 febe 	bl	8009cb2 <USBD_LL_Transmit>

  return USBD_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2205      	movs	r2, #5
 8007f4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f50:	2300      	movs	r3, #0
 8007f52:	2200      	movs	r2, #0
 8007f54:	2100      	movs	r1, #0
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 fecc 	bl	8009cf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b085      	sub	sp, #20
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f78:	2b84      	cmp	r3, #132	; 0x84
 8007f7a:	d005      	beq.n	8007f88 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007f7c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	3303      	adds	r3, #3
 8007f86:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007f88:	68fb      	ldr	r3, [r7, #12]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007f9a:	f000 fadf 	bl	800855c <vTaskStartScheduler>
  
  return osOK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fa6:	b089      	sub	sp, #36	; 0x24
 8007fa8:	af04      	add	r7, sp, #16
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d020      	beq.n	8007ff8 <osThreadCreate+0x54>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d01c      	beq.n	8007ff8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685c      	ldr	r4, [r3, #4]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681d      	ldr	r5, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691e      	ldr	r6, [r3, #16]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff ffc8 	bl	8007f66 <makeFreeRtosPriority>
 8007fd6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fe0:	9202      	str	r2, [sp, #8]
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	9100      	str	r1, [sp, #0]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	4632      	mov	r2, r6
 8007fea:	4629      	mov	r1, r5
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 f8ed 	bl	80081cc <xTaskCreateStatic>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	60fb      	str	r3, [r7, #12]
 8007ff6:	e01c      	b.n	8008032 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685c      	ldr	r4, [r3, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008004:	b29e      	uxth	r6, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800800c:	4618      	mov	r0, r3
 800800e:	f7ff ffaa 	bl	8007f66 <makeFreeRtosPriority>
 8008012:	4602      	mov	r2, r0
 8008014:	f107 030c 	add.w	r3, r7, #12
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	9200      	str	r2, [sp, #0]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	4632      	mov	r2, r6
 8008020:	4629      	mov	r1, r5
 8008022:	4620      	mov	r0, r4
 8008024:	f000 f92f 	bl	8008286 <xTaskCreate>
 8008028:	4603      	mov	r3, r0
 800802a:	2b01      	cmp	r3, #1
 800802c:	d001      	beq.n	8008032 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800802e:	2300      	movs	r3, #0
 8008030:	e000      	b.n	8008034 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008032:	68fb      	ldr	r3, [r7, #12]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800803c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <osDelay+0x16>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	e000      	b.n	8008054 <osDelay+0x18>
 8008052:	2301      	movs	r3, #1
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fa4d 	bl	80084f4 <vTaskDelay>
  
  return osOK;
 800805a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f103 0208 	add.w	r2, r3, #8
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f04f 32ff 	mov.w	r2, #4294967295
 800807c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f103 0208 	add.w	r2, r3, #8
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f103 0208 	add.w	r2, r3, #8
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80080b2:	bf00      	nop
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080be:	b480      	push	{r7}
 80080c0:	b085      	sub	sp, #20
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	601a      	str	r2, [r3, #0]
}
 80080fa:	bf00      	nop
 80080fc:	3714      	adds	r7, #20
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008106:	b480      	push	{r7}
 8008108:	b085      	sub	sp, #20
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811c:	d103      	bne.n	8008126 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	e00c      	b.n	8008140 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3308      	adds	r3, #8
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	e002      	b.n	8008134 <vListInsert+0x2e>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	429a      	cmp	r2, r3
 800813e:	d2f6      	bcs.n	800812e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	685a      	ldr	r2, [r3, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	601a      	str	r2, [r3, #0]
}
 800816c:	bf00      	nop
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	6892      	ldr	r2, [r2, #8]
 800818e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	6852      	ldr	r2, [r2, #4]
 8008198:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d103      	bne.n	80081ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	1e5a      	subs	r2, r3, #1
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08e      	sub	sp, #56	; 0x38
 80081d0:	af04      	add	r7, sp, #16
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
 80081d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10a      	bne.n	80081f6 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10a      	bne.n	8008212 <xTaskCreateStatic+0x46>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	61fb      	str	r3, [r7, #28]
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008212:	2354      	movs	r3, #84	; 0x54
 8008214:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	2b54      	cmp	r3, #84	; 0x54
 800821a:	d00a      	beq.n	8008232 <xTaskCreateStatic+0x66>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	61bb      	str	r3, [r7, #24]
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008232:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008236:	2b00      	cmp	r3, #0
 8008238:	d01e      	beq.n	8008278 <xTaskCreateStatic+0xac>
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01b      	beq.n	8008278 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008248:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	2202      	movs	r2, #2
 800824e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008252:	2300      	movs	r3, #0
 8008254:	9303      	str	r3, [sp, #12]
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	9302      	str	r3, [sp, #8]
 800825a:	f107 0314 	add.w	r3, r7, #20
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	68b9      	ldr	r1, [r7, #8]
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 f850 	bl	8008310 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008270:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008272:	f000 f8d5 	bl	8008420 <prvAddNewTaskToReadyList>
 8008276:	e001      	b.n	800827c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008278:	2300      	movs	r3, #0
 800827a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800827c:	697b      	ldr	r3, [r7, #20]
	}
 800827e:	4618      	mov	r0, r3
 8008280:	3728      	adds	r7, #40	; 0x28
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008286:	b580      	push	{r7, lr}
 8008288:	b08c      	sub	sp, #48	; 0x30
 800828a:	af04      	add	r7, sp, #16
 800828c:	60f8      	str	r0, [r7, #12]
 800828e:	60b9      	str	r1, [r7, #8]
 8008290:	603b      	str	r3, [r7, #0]
 8008292:	4613      	mov	r3, r2
 8008294:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008296:	88fb      	ldrh	r3, [r7, #6]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fec4 	bl	8009028 <pvPortMalloc>
 80082a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00e      	beq.n	80082c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082a8:	2054      	movs	r0, #84	; 0x54
 80082aa:	f000 febd 	bl	8009028 <pvPortMalloc>
 80082ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	631a      	str	r2, [r3, #48]	; 0x30
 80082bc:	e005      	b.n	80082ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082be:	6978      	ldr	r0, [r7, #20]
 80082c0:	f000 ff7e 	bl	80091c0 <vPortFree>
 80082c4:	e001      	b.n	80082ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d017      	beq.n	8008300 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082d8:	88fa      	ldrh	r2, [r7, #6]
 80082da:	2300      	movs	r3, #0
 80082dc:	9303      	str	r3, [sp, #12]
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	9302      	str	r3, [sp, #8]
 80082e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e4:	9301      	str	r3, [sp, #4]
 80082e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	68b9      	ldr	r1, [r7, #8]
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f000 f80e 	bl	8008310 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082f4:	69f8      	ldr	r0, [r7, #28]
 80082f6:	f000 f893 	bl	8008420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082fa:	2301      	movs	r3, #1
 80082fc:	61bb      	str	r3, [r7, #24]
 80082fe:	e002      	b.n	8008306 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008300:	f04f 33ff 	mov.w	r3, #4294967295
 8008304:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008306:	69bb      	ldr	r3, [r7, #24]
	}
 8008308:	4618      	mov	r0, r3
 800830a:	3720      	adds	r7, #32
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
 800831c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008328:	3b01      	subs	r3, #1
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	f023 0307 	bic.w	r3, r3, #7
 8008336:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	f003 0307 	and.w	r3, r3, #7
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	617b      	str	r3, [r7, #20]
}
 8008354:	bf00      	nop
 8008356:	e7fe      	b.n	8008356 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d01f      	beq.n	800839e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800835e:	2300      	movs	r3, #0
 8008360:	61fb      	str	r3, [r7, #28]
 8008362:	e012      	b.n	800838a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4413      	add	r3, r2
 800836a:	7819      	ldrb	r1, [r3, #0]
 800836c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	4413      	add	r3, r2
 8008372:	3334      	adds	r3, #52	; 0x34
 8008374:	460a      	mov	r2, r1
 8008376:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4413      	add	r3, r2
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d006      	beq.n	8008392 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	3301      	adds	r3, #1
 8008388:	61fb      	str	r3, [r7, #28]
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	2b0f      	cmp	r3, #15
 800838e:	d9e9      	bls.n	8008364 <prvInitialiseNewTask+0x54>
 8008390:	e000      	b.n	8008394 <prvInitialiseNewTask+0x84>
			{
				break;
 8008392:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800839c:	e003      	b.n	80083a6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a8:	2b06      	cmp	r3, #6
 80083aa:	d901      	bls.n	80083b0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083ac:	2306      	movs	r3, #6
 80083ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	2200      	movs	r2, #0
 80083c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	3304      	adds	r3, #4
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff fe6c 	bl	80080a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	3318      	adds	r3, #24
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff fe67 	bl	80080a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083de:	f1c3 0207 	rsb	r2, r3, #7
 80083e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	2200      	movs	r2, #0
 80083f0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	68f9      	ldr	r1, [r7, #12]
 80083fe:	69b8      	ldr	r0, [r7, #24]
 8008400:	f000 fc06 	bl	8008c10 <pxPortInitialiseStack>
 8008404:	4602      	mov	r2, r0
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840c:	2b00      	cmp	r3, #0
 800840e:	d002      	beq.n	8008416 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008416:	bf00      	nop
 8008418:	3720      	adds	r7, #32
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008428:	f000 fd1c 	bl	8008e64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800842c:	4b2a      	ldr	r3, [pc, #168]	; (80084d8 <prvAddNewTaskToReadyList+0xb8>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3301      	adds	r3, #1
 8008432:	4a29      	ldr	r2, [pc, #164]	; (80084d8 <prvAddNewTaskToReadyList+0xb8>)
 8008434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008436:	4b29      	ldr	r3, [pc, #164]	; (80084dc <prvAddNewTaskToReadyList+0xbc>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d109      	bne.n	8008452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800843e:	4a27      	ldr	r2, [pc, #156]	; (80084dc <prvAddNewTaskToReadyList+0xbc>)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008444:	4b24      	ldr	r3, [pc, #144]	; (80084d8 <prvAddNewTaskToReadyList+0xb8>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d110      	bne.n	800846e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800844c:	f000 fabc 	bl	80089c8 <prvInitialiseTaskLists>
 8008450:	e00d      	b.n	800846e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008452:	4b23      	ldr	r3, [pc, #140]	; (80084e0 <prvAddNewTaskToReadyList+0xc0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d109      	bne.n	800846e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800845a:	4b20      	ldr	r3, [pc, #128]	; (80084dc <prvAddNewTaskToReadyList+0xbc>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008464:	429a      	cmp	r2, r3
 8008466:	d802      	bhi.n	800846e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008468:	4a1c      	ldr	r2, [pc, #112]	; (80084dc <prvAddNewTaskToReadyList+0xbc>)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800846e:	4b1d      	ldr	r3, [pc, #116]	; (80084e4 <prvAddNewTaskToReadyList+0xc4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3301      	adds	r3, #1
 8008474:	4a1b      	ldr	r2, [pc, #108]	; (80084e4 <prvAddNewTaskToReadyList+0xc4>)
 8008476:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	2201      	movs	r2, #1
 800847e:	409a      	lsls	r2, r3
 8008480:	4b19      	ldr	r3, [pc, #100]	; (80084e8 <prvAddNewTaskToReadyList+0xc8>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4313      	orrs	r3, r2
 8008486:	4a18      	ldr	r2, [pc, #96]	; (80084e8 <prvAddNewTaskToReadyList+0xc8>)
 8008488:	6013      	str	r3, [r2, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800848e:	4613      	mov	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4a15      	ldr	r2, [pc, #84]	; (80084ec <prvAddNewTaskToReadyList+0xcc>)
 8008498:	441a      	add	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3304      	adds	r3, #4
 800849e:	4619      	mov	r1, r3
 80084a0:	4610      	mov	r0, r2
 80084a2:	f7ff fe0c 	bl	80080be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084a6:	f000 fd0d 	bl	8008ec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084aa:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <prvAddNewTaskToReadyList+0xc0>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00e      	beq.n	80084d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084b2:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <prvAddNewTaskToReadyList+0xbc>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084bc:	429a      	cmp	r2, r3
 80084be:	d207      	bcs.n	80084d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084c0:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <prvAddNewTaskToReadyList+0xd0>)
 80084c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084d0:	bf00      	nop
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	200004f8 	.word	0x200004f8
 80084dc:	200003f8 	.word	0x200003f8
 80084e0:	20000504 	.word	0x20000504
 80084e4:	20000514 	.word	0x20000514
 80084e8:	20000500 	.word	0x20000500
 80084ec:	200003fc 	.word	0x200003fc
 80084f0:	e000ed04 	.word	0xe000ed04

080084f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80084fc:	2300      	movs	r3, #0
 80084fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d017      	beq.n	8008536 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008506:	4b13      	ldr	r3, [pc, #76]	; (8008554 <vTaskDelay+0x60>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00a      	beq.n	8008524 <vTaskDelay+0x30>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	60bb      	str	r3, [r7, #8]
}
 8008520:	bf00      	nop
 8008522:	e7fe      	b.n	8008522 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008524:	f000 f87a 	bl	800861c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008528:	2100      	movs	r1, #0
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fb0a 	bl	8008b44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008530:	f000 f882 	bl	8008638 <xTaskResumeAll>
 8008534:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d107      	bne.n	800854c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800853c:	4b06      	ldr	r3, [pc, #24]	; (8008558 <vTaskDelay+0x64>)
 800853e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800854c:	bf00      	nop
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	20000520 	.word	0x20000520
 8008558:	e000ed04 	.word	0xe000ed04

0800855c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08a      	sub	sp, #40	; 0x28
 8008560:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008566:	2300      	movs	r3, #0
 8008568:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800856a:	463a      	mov	r2, r7
 800856c:	1d39      	adds	r1, r7, #4
 800856e:	f107 0308 	add.w	r3, r7, #8
 8008572:	4618      	mov	r0, r3
 8008574:	f7f7 ffa8 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	9202      	str	r2, [sp, #8]
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	2300      	movs	r3, #0
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	2300      	movs	r3, #0
 8008588:	460a      	mov	r2, r1
 800858a:	491e      	ldr	r1, [pc, #120]	; (8008604 <vTaskStartScheduler+0xa8>)
 800858c:	481e      	ldr	r0, [pc, #120]	; (8008608 <vTaskStartScheduler+0xac>)
 800858e:	f7ff fe1d 	bl	80081cc <xTaskCreateStatic>
 8008592:	4603      	mov	r3, r0
 8008594:	4a1d      	ldr	r2, [pc, #116]	; (800860c <vTaskStartScheduler+0xb0>)
 8008596:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008598:	4b1c      	ldr	r3, [pc, #112]	; (800860c <vTaskStartScheduler+0xb0>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085a0:	2301      	movs	r3, #1
 80085a2:	617b      	str	r3, [r7, #20]
 80085a4:	e001      	b.n	80085aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d116      	bne.n	80085de <vTaskStartScheduler+0x82>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	613b      	str	r3, [r7, #16]
}
 80085c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085c4:	4b12      	ldr	r3, [pc, #72]	; (8008610 <vTaskStartScheduler+0xb4>)
 80085c6:	f04f 32ff 	mov.w	r2, #4294967295
 80085ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085cc:	4b11      	ldr	r3, [pc, #68]	; (8008614 <vTaskStartScheduler+0xb8>)
 80085ce:	2201      	movs	r2, #1
 80085d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085d2:	4b11      	ldr	r3, [pc, #68]	; (8008618 <vTaskStartScheduler+0xbc>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80085d8:	f000 fba2 	bl	8008d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80085dc:	e00e      	b.n	80085fc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e4:	d10a      	bne.n	80085fc <vTaskStartScheduler+0xa0>
	__asm volatile
 80085e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	60fb      	str	r3, [r7, #12]
}
 80085f8:	bf00      	nop
 80085fa:	e7fe      	b.n	80085fa <vTaskStartScheduler+0x9e>
}
 80085fc:	bf00      	nop
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	08009e80 	.word	0x08009e80
 8008608:	08008999 	.word	0x08008999
 800860c:	2000051c 	.word	0x2000051c
 8008610:	20000518 	.word	0x20000518
 8008614:	20000504 	.word	0x20000504
 8008618:	200004fc 	.word	0x200004fc

0800861c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008620:	4b04      	ldr	r3, [pc, #16]	; (8008634 <vTaskSuspendAll+0x18>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3301      	adds	r3, #1
 8008626:	4a03      	ldr	r2, [pc, #12]	; (8008634 <vTaskSuspendAll+0x18>)
 8008628:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800862a:	bf00      	nop
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	20000520 	.word	0x20000520

08008638 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008642:	2300      	movs	r3, #0
 8008644:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008646:	4b41      	ldr	r3, [pc, #260]	; (800874c <xTaskResumeAll+0x114>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10a      	bne.n	8008664 <xTaskResumeAll+0x2c>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	603b      	str	r3, [r7, #0]
}
 8008660:	bf00      	nop
 8008662:	e7fe      	b.n	8008662 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008664:	f000 fbfe 	bl	8008e64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008668:	4b38      	ldr	r3, [pc, #224]	; (800874c <xTaskResumeAll+0x114>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3b01      	subs	r3, #1
 800866e:	4a37      	ldr	r2, [pc, #220]	; (800874c <xTaskResumeAll+0x114>)
 8008670:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008672:	4b36      	ldr	r3, [pc, #216]	; (800874c <xTaskResumeAll+0x114>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d161      	bne.n	800873e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800867a:	4b35      	ldr	r3, [pc, #212]	; (8008750 <xTaskResumeAll+0x118>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d05d      	beq.n	800873e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008682:	e02e      	b.n	80086e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008684:	4b33      	ldr	r3, [pc, #204]	; (8008754 <xTaskResumeAll+0x11c>)
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3318      	adds	r3, #24
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff fd71 	bl	8008178 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3304      	adds	r3, #4
 800869a:	4618      	mov	r0, r3
 800869c:	f7ff fd6c 	bl	8008178 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	2201      	movs	r2, #1
 80086a6:	409a      	lsls	r2, r3
 80086a8:	4b2b      	ldr	r3, [pc, #172]	; (8008758 <xTaskResumeAll+0x120>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	4a2a      	ldr	r2, [pc, #168]	; (8008758 <xTaskResumeAll+0x120>)
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4a27      	ldr	r2, [pc, #156]	; (800875c <xTaskResumeAll+0x124>)
 80086c0:	441a      	add	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3304      	adds	r3, #4
 80086c6:	4619      	mov	r1, r3
 80086c8:	4610      	mov	r0, r2
 80086ca:	f7ff fcf8 	bl	80080be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d2:	4b23      	ldr	r3, [pc, #140]	; (8008760 <xTaskResumeAll+0x128>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	429a      	cmp	r2, r3
 80086da:	d302      	bcc.n	80086e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80086dc:	4b21      	ldr	r3, [pc, #132]	; (8008764 <xTaskResumeAll+0x12c>)
 80086de:	2201      	movs	r2, #1
 80086e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086e2:	4b1c      	ldr	r3, [pc, #112]	; (8008754 <xTaskResumeAll+0x11c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1cc      	bne.n	8008684 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80086f0:	f000 fa08 	bl	8008b04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80086f4:	4b1c      	ldr	r3, [pc, #112]	; (8008768 <xTaskResumeAll+0x130>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d010      	beq.n	8008722 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008700:	f000 f836 	bl	8008770 <xTaskIncrementTick>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800870a:	4b16      	ldr	r3, [pc, #88]	; (8008764 <xTaskResumeAll+0x12c>)
 800870c:	2201      	movs	r2, #1
 800870e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3b01      	subs	r3, #1
 8008714:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1f1      	bne.n	8008700 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800871c:	4b12      	ldr	r3, [pc, #72]	; (8008768 <xTaskResumeAll+0x130>)
 800871e:	2200      	movs	r2, #0
 8008720:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008722:	4b10      	ldr	r3, [pc, #64]	; (8008764 <xTaskResumeAll+0x12c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d009      	beq.n	800873e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800872a:	2301      	movs	r3, #1
 800872c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800872e:	4b0f      	ldr	r3, [pc, #60]	; (800876c <xTaskResumeAll+0x134>)
 8008730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800873e:	f000 fbc1 	bl	8008ec4 <vPortExitCritical>

	return xAlreadyYielded;
 8008742:	68bb      	ldr	r3, [r7, #8]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	20000520 	.word	0x20000520
 8008750:	200004f8 	.word	0x200004f8
 8008754:	200004b8 	.word	0x200004b8
 8008758:	20000500 	.word	0x20000500
 800875c:	200003fc 	.word	0x200003fc
 8008760:	200003f8 	.word	0x200003f8
 8008764:	2000050c 	.word	0x2000050c
 8008768:	20000508 	.word	0x20000508
 800876c:	e000ed04 	.word	0xe000ed04

08008770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008776:	2300      	movs	r3, #0
 8008778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800877a:	4b4e      	ldr	r3, [pc, #312]	; (80088b4 <xTaskIncrementTick+0x144>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	f040 808e 	bne.w	80088a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008784:	4b4c      	ldr	r3, [pc, #304]	; (80088b8 <xTaskIncrementTick+0x148>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3301      	adds	r3, #1
 800878a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800878c:	4a4a      	ldr	r2, [pc, #296]	; (80088b8 <xTaskIncrementTick+0x148>)
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d120      	bne.n	80087da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008798:	4b48      	ldr	r3, [pc, #288]	; (80088bc <xTaskIncrementTick+0x14c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	603b      	str	r3, [r7, #0]
}
 80087b4:	bf00      	nop
 80087b6:	e7fe      	b.n	80087b6 <xTaskIncrementTick+0x46>
 80087b8:	4b40      	ldr	r3, [pc, #256]	; (80088bc <xTaskIncrementTick+0x14c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	60fb      	str	r3, [r7, #12]
 80087be:	4b40      	ldr	r3, [pc, #256]	; (80088c0 <xTaskIncrementTick+0x150>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a3e      	ldr	r2, [pc, #248]	; (80088bc <xTaskIncrementTick+0x14c>)
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	4a3e      	ldr	r2, [pc, #248]	; (80088c0 <xTaskIncrementTick+0x150>)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	4b3d      	ldr	r3, [pc, #244]	; (80088c4 <xTaskIncrementTick+0x154>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3301      	adds	r3, #1
 80087d2:	4a3c      	ldr	r2, [pc, #240]	; (80088c4 <xTaskIncrementTick+0x154>)
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	f000 f995 	bl	8008b04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087da:	4b3b      	ldr	r3, [pc, #236]	; (80088c8 <xTaskIncrementTick+0x158>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d348      	bcc.n	8008876 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087e4:	4b35      	ldr	r3, [pc, #212]	; (80088bc <xTaskIncrementTick+0x14c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d104      	bne.n	80087f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ee:	4b36      	ldr	r3, [pc, #216]	; (80088c8 <xTaskIncrementTick+0x158>)
 80087f0:	f04f 32ff 	mov.w	r2, #4294967295
 80087f4:	601a      	str	r2, [r3, #0]
					break;
 80087f6:	e03e      	b.n	8008876 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087f8:	4b30      	ldr	r3, [pc, #192]	; (80088bc <xTaskIncrementTick+0x14c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	429a      	cmp	r2, r3
 800880e:	d203      	bcs.n	8008818 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008810:	4a2d      	ldr	r2, [pc, #180]	; (80088c8 <xTaskIncrementTick+0x158>)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008816:	e02e      	b.n	8008876 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	3304      	adds	r3, #4
 800881c:	4618      	mov	r0, r3
 800881e:	f7ff fcab 	bl	8008178 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008826:	2b00      	cmp	r3, #0
 8008828:	d004      	beq.n	8008834 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	3318      	adds	r3, #24
 800882e:	4618      	mov	r0, r3
 8008830:	f7ff fca2 	bl	8008178 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008838:	2201      	movs	r2, #1
 800883a:	409a      	lsls	r2, r3
 800883c:	4b23      	ldr	r3, [pc, #140]	; (80088cc <xTaskIncrementTick+0x15c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4313      	orrs	r3, r2
 8008842:	4a22      	ldr	r2, [pc, #136]	; (80088cc <xTaskIncrementTick+0x15c>)
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4a1f      	ldr	r2, [pc, #124]	; (80088d0 <xTaskIncrementTick+0x160>)
 8008854:	441a      	add	r2, r3
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	3304      	adds	r3, #4
 800885a:	4619      	mov	r1, r3
 800885c:	4610      	mov	r0, r2
 800885e:	f7ff fc2e 	bl	80080be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008866:	4b1b      	ldr	r3, [pc, #108]	; (80088d4 <xTaskIncrementTick+0x164>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886c:	429a      	cmp	r2, r3
 800886e:	d3b9      	bcc.n	80087e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008870:	2301      	movs	r3, #1
 8008872:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008874:	e7b6      	b.n	80087e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008876:	4b17      	ldr	r3, [pc, #92]	; (80088d4 <xTaskIncrementTick+0x164>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800887c:	4914      	ldr	r1, [pc, #80]	; (80088d0 <xTaskIncrementTick+0x160>)
 800887e:	4613      	mov	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	440b      	add	r3, r1
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d901      	bls.n	8008892 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800888e:	2301      	movs	r3, #1
 8008890:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008892:	4b11      	ldr	r3, [pc, #68]	; (80088d8 <xTaskIncrementTick+0x168>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d007      	beq.n	80088aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800889a:	2301      	movs	r3, #1
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	e004      	b.n	80088aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088a0:	4b0e      	ldr	r3, [pc, #56]	; (80088dc <xTaskIncrementTick+0x16c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3301      	adds	r3, #1
 80088a6:	4a0d      	ldr	r2, [pc, #52]	; (80088dc <xTaskIncrementTick+0x16c>)
 80088a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088aa:	697b      	ldr	r3, [r7, #20]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	20000520 	.word	0x20000520
 80088b8:	200004fc 	.word	0x200004fc
 80088bc:	200004b0 	.word	0x200004b0
 80088c0:	200004b4 	.word	0x200004b4
 80088c4:	20000510 	.word	0x20000510
 80088c8:	20000518 	.word	0x20000518
 80088cc:	20000500 	.word	0x20000500
 80088d0:	200003fc 	.word	0x200003fc
 80088d4:	200003f8 	.word	0x200003f8
 80088d8:	2000050c 	.word	0x2000050c
 80088dc:	20000508 	.word	0x20000508

080088e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088e0:	b480      	push	{r7}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088e6:	4b27      	ldr	r3, [pc, #156]	; (8008984 <vTaskSwitchContext+0xa4>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088ee:	4b26      	ldr	r3, [pc, #152]	; (8008988 <vTaskSwitchContext+0xa8>)
 80088f0:	2201      	movs	r2, #1
 80088f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088f4:	e03f      	b.n	8008976 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80088f6:	4b24      	ldr	r3, [pc, #144]	; (8008988 <vTaskSwitchContext+0xa8>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088fc:	4b23      	ldr	r3, [pc, #140]	; (800898c <vTaskSwitchContext+0xac>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	fab3 f383 	clz	r3, r3
 8008908:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800890a:	7afb      	ldrb	r3, [r7, #11]
 800890c:	f1c3 031f 	rsb	r3, r3, #31
 8008910:	617b      	str	r3, [r7, #20]
 8008912:	491f      	ldr	r1, [pc, #124]	; (8008990 <vTaskSwitchContext+0xb0>)
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	4613      	mov	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	440b      	add	r3, r1
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10a      	bne.n	800893c <vTaskSwitchContext+0x5c>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	607b      	str	r3, [r7, #4]
}
 8008938:	bf00      	nop
 800893a:	e7fe      	b.n	800893a <vTaskSwitchContext+0x5a>
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4a12      	ldr	r2, [pc, #72]	; (8008990 <vTaskSwitchContext+0xb0>)
 8008948:	4413      	add	r3, r2
 800894a:	613b      	str	r3, [r7, #16]
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	605a      	str	r2, [r3, #4]
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	3308      	adds	r3, #8
 800895e:	429a      	cmp	r2, r3
 8008960:	d104      	bne.n	800896c <vTaskSwitchContext+0x8c>
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	605a      	str	r2, [r3, #4]
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	4a08      	ldr	r2, [pc, #32]	; (8008994 <vTaskSwitchContext+0xb4>)
 8008974:	6013      	str	r3, [r2, #0]
}
 8008976:	bf00      	nop
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	20000520 	.word	0x20000520
 8008988:	2000050c 	.word	0x2000050c
 800898c:	20000500 	.word	0x20000500
 8008990:	200003fc 	.word	0x200003fc
 8008994:	200003f8 	.word	0x200003f8

08008998 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089a0:	f000 f852 	bl	8008a48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089a4:	4b06      	ldr	r3, [pc, #24]	; (80089c0 <prvIdleTask+0x28>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d9f9      	bls.n	80089a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80089ac:	4b05      	ldr	r3, [pc, #20]	; (80089c4 <prvIdleTask+0x2c>)
 80089ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089b2:	601a      	str	r2, [r3, #0]
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089bc:	e7f0      	b.n	80089a0 <prvIdleTask+0x8>
 80089be:	bf00      	nop
 80089c0:	200003fc 	.word	0x200003fc
 80089c4:	e000ed04 	.word	0xe000ed04

080089c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089ce:	2300      	movs	r3, #0
 80089d0:	607b      	str	r3, [r7, #4]
 80089d2:	e00c      	b.n	80089ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	4613      	mov	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4a12      	ldr	r2, [pc, #72]	; (8008a28 <prvInitialiseTaskLists+0x60>)
 80089e0:	4413      	add	r3, r2
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7ff fb3e 	bl	8008064 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3301      	adds	r3, #1
 80089ec:	607b      	str	r3, [r7, #4]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b06      	cmp	r3, #6
 80089f2:	d9ef      	bls.n	80089d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80089f4:	480d      	ldr	r0, [pc, #52]	; (8008a2c <prvInitialiseTaskLists+0x64>)
 80089f6:	f7ff fb35 	bl	8008064 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089fa:	480d      	ldr	r0, [pc, #52]	; (8008a30 <prvInitialiseTaskLists+0x68>)
 80089fc:	f7ff fb32 	bl	8008064 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a00:	480c      	ldr	r0, [pc, #48]	; (8008a34 <prvInitialiseTaskLists+0x6c>)
 8008a02:	f7ff fb2f 	bl	8008064 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a06:	480c      	ldr	r0, [pc, #48]	; (8008a38 <prvInitialiseTaskLists+0x70>)
 8008a08:	f7ff fb2c 	bl	8008064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a0c:	480b      	ldr	r0, [pc, #44]	; (8008a3c <prvInitialiseTaskLists+0x74>)
 8008a0e:	f7ff fb29 	bl	8008064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a12:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <prvInitialiseTaskLists+0x78>)
 8008a14:	4a05      	ldr	r2, [pc, #20]	; (8008a2c <prvInitialiseTaskLists+0x64>)
 8008a16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a18:	4b0a      	ldr	r3, [pc, #40]	; (8008a44 <prvInitialiseTaskLists+0x7c>)
 8008a1a:	4a05      	ldr	r2, [pc, #20]	; (8008a30 <prvInitialiseTaskLists+0x68>)
 8008a1c:	601a      	str	r2, [r3, #0]
}
 8008a1e:	bf00      	nop
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	200003fc 	.word	0x200003fc
 8008a2c:	20000488 	.word	0x20000488
 8008a30:	2000049c 	.word	0x2000049c
 8008a34:	200004b8 	.word	0x200004b8
 8008a38:	200004cc 	.word	0x200004cc
 8008a3c:	200004e4 	.word	0x200004e4
 8008a40:	200004b0 	.word	0x200004b0
 8008a44:	200004b4 	.word	0x200004b4

08008a48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a4e:	e019      	b.n	8008a84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a50:	f000 fa08 	bl	8008e64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a54:	4b10      	ldr	r3, [pc, #64]	; (8008a98 <prvCheckTasksWaitingTermination+0x50>)
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7ff fb89 	bl	8008178 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a66:	4b0d      	ldr	r3, [pc, #52]	; (8008a9c <prvCheckTasksWaitingTermination+0x54>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	4a0b      	ldr	r2, [pc, #44]	; (8008a9c <prvCheckTasksWaitingTermination+0x54>)
 8008a6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a70:	4b0b      	ldr	r3, [pc, #44]	; (8008aa0 <prvCheckTasksWaitingTermination+0x58>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3b01      	subs	r3, #1
 8008a76:	4a0a      	ldr	r2, [pc, #40]	; (8008aa0 <prvCheckTasksWaitingTermination+0x58>)
 8008a78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a7a:	f000 fa23 	bl	8008ec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f810 	bl	8008aa4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a84:	4b06      	ldr	r3, [pc, #24]	; (8008aa0 <prvCheckTasksWaitingTermination+0x58>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1e1      	bne.n	8008a50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a8c:	bf00      	nop
 8008a8e:	bf00      	nop
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	200004cc 	.word	0x200004cc
 8008a9c:	200004f8 	.word	0x200004f8
 8008aa0:	200004e0 	.word	0x200004e0

08008aa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d108      	bne.n	8008ac8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 fb80 	bl	80091c0 <vPortFree>
				vPortFree( pxTCB );
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fb7d 	bl	80091c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ac6:	e018      	b.n	8008afa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d103      	bne.n	8008ada <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fb74 	bl	80091c0 <vPortFree>
	}
 8008ad8:	e00f      	b.n	8008afa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d00a      	beq.n	8008afa <prvDeleteTCB+0x56>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	60fb      	str	r3, [r7, #12]
}
 8008af6:	bf00      	nop
 8008af8:	e7fe      	b.n	8008af8 <prvDeleteTCB+0x54>
	}
 8008afa:	bf00      	nop
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
	...

08008b04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b0a:	4b0c      	ldr	r3, [pc, #48]	; (8008b3c <prvResetNextTaskUnblockTime+0x38>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d104      	bne.n	8008b1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b14:	4b0a      	ldr	r3, [pc, #40]	; (8008b40 <prvResetNextTaskUnblockTime+0x3c>)
 8008b16:	f04f 32ff 	mov.w	r2, #4294967295
 8008b1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b1c:	e008      	b.n	8008b30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b1e:	4b07      	ldr	r3, [pc, #28]	; (8008b3c <prvResetNextTaskUnblockTime+0x38>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	4a04      	ldr	r2, [pc, #16]	; (8008b40 <prvResetNextTaskUnblockTime+0x3c>)
 8008b2e:	6013      	str	r3, [r2, #0]
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr
 8008b3c:	200004b0 	.word	0x200004b0
 8008b40:	20000518 	.word	0x20000518

08008b44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b4e:	4b29      	ldr	r3, [pc, #164]	; (8008bf4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b54:	4b28      	ldr	r3, [pc, #160]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3304      	adds	r3, #4
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff fb0c 	bl	8008178 <uxListRemove>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10b      	bne.n	8008b7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008b66:	4b24      	ldr	r3, [pc, #144]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b72:	43da      	mvns	r2, r3
 8008b74:	4b21      	ldr	r3, [pc, #132]	; (8008bfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4013      	ands	r3, r2
 8008b7a:	4a20      	ldr	r2, [pc, #128]	; (8008bfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b84:	d10a      	bne.n	8008b9c <prvAddCurrentTaskToDelayedList+0x58>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d007      	beq.n	8008b9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b8c:	4b1a      	ldr	r3, [pc, #104]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3304      	adds	r3, #4
 8008b92:	4619      	mov	r1, r3
 8008b94:	481a      	ldr	r0, [pc, #104]	; (8008c00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008b96:	f7ff fa92 	bl	80080be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b9a:	e026      	b.n	8008bea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ba4:	4b14      	ldr	r3, [pc, #80]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d209      	bcs.n	8008bc8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bb4:	4b13      	ldr	r3, [pc, #76]	; (8008c04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	f7ff faa0 	bl	8008106 <vListInsert>
}
 8008bc6:	e010      	b.n	8008bea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bc8:	4b0f      	ldr	r3, [pc, #60]	; (8008c08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3304      	adds	r3, #4
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	f7ff fa96 	bl	8008106 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bda:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d202      	bcs.n	8008bea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008be4:	4a09      	ldr	r2, [pc, #36]	; (8008c0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	6013      	str	r3, [r2, #0]
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	200004fc 	.word	0x200004fc
 8008bf8:	200003f8 	.word	0x200003f8
 8008bfc:	20000500 	.word	0x20000500
 8008c00:	200004e4 	.word	0x200004e4
 8008c04:	200004b4 	.word	0x200004b4
 8008c08:	200004b0 	.word	0x200004b0
 8008c0c:	20000518 	.word	0x20000518

08008c10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	3b04      	subs	r3, #4
 8008c20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3b04      	subs	r3, #4
 8008c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	f023 0201 	bic.w	r2, r3, #1
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3b04      	subs	r3, #4
 8008c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c40:	4a0c      	ldr	r2, [pc, #48]	; (8008c74 <pxPortInitialiseStack+0x64>)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	3b14      	subs	r3, #20
 8008c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3b04      	subs	r3, #4
 8008c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f06f 0202 	mvn.w	r2, #2
 8008c5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	3b20      	subs	r3, #32
 8008c64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c66:	68fb      	ldr	r3, [r7, #12]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	08008c79 	.word	0x08008c79

08008c78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c82:	4b12      	ldr	r3, [pc, #72]	; (8008ccc <prvTaskExitError+0x54>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8a:	d00a      	beq.n	8008ca2 <prvTaskExitError+0x2a>
	__asm volatile
 8008c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	60fb      	str	r3, [r7, #12]
}
 8008c9e:	bf00      	nop
 8008ca0:	e7fe      	b.n	8008ca0 <prvTaskExitError+0x28>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	60bb      	str	r3, [r7, #8]
}
 8008cb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008cb6:	bf00      	nop
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d0fc      	beq.n	8008cb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008cbe:	bf00      	nop
 8008cc0:	bf00      	nop
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	2000011c 	.word	0x2000011c

08008cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008cd0:	4b07      	ldr	r3, [pc, #28]	; (8008cf0 <pxCurrentTCBConst2>)
 8008cd2:	6819      	ldr	r1, [r3, #0]
 8008cd4:	6808      	ldr	r0, [r1, #0]
 8008cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cda:	f380 8809 	msr	PSP, r0
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f04f 0000 	mov.w	r0, #0
 8008ce6:	f380 8811 	msr	BASEPRI, r0
 8008cea:	4770      	bx	lr
 8008cec:	f3af 8000 	nop.w

08008cf0 <pxCurrentTCBConst2>:
 8008cf0:	200003f8 	.word	0x200003f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop

08008cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008cf8:	4808      	ldr	r0, [pc, #32]	; (8008d1c <prvPortStartFirstTask+0x24>)
 8008cfa:	6800      	ldr	r0, [r0, #0]
 8008cfc:	6800      	ldr	r0, [r0, #0]
 8008cfe:	f380 8808 	msr	MSP, r0
 8008d02:	f04f 0000 	mov.w	r0, #0
 8008d06:	f380 8814 	msr	CONTROL, r0
 8008d0a:	b662      	cpsie	i
 8008d0c:	b661      	cpsie	f
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	df00      	svc	0
 8008d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d1a:	bf00      	nop
 8008d1c:	e000ed08 	.word	0xe000ed08

08008d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d26:	4b46      	ldr	r3, [pc, #280]	; (8008e40 <xPortStartScheduler+0x120>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a46      	ldr	r2, [pc, #280]	; (8008e44 <xPortStartScheduler+0x124>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d10a      	bne.n	8008d46 <xPortStartScheduler+0x26>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	613b      	str	r3, [r7, #16]
}
 8008d42:	bf00      	nop
 8008d44:	e7fe      	b.n	8008d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d46:	4b3e      	ldr	r3, [pc, #248]	; (8008e40 <xPortStartScheduler+0x120>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a3f      	ldr	r2, [pc, #252]	; (8008e48 <xPortStartScheduler+0x128>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d10a      	bne.n	8008d66 <xPortStartScheduler+0x46>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	60fb      	str	r3, [r7, #12]
}
 8008d62:	bf00      	nop
 8008d64:	e7fe      	b.n	8008d64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d66:	4b39      	ldr	r3, [pc, #228]	; (8008e4c <xPortStartScheduler+0x12c>)
 8008d68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	22ff      	movs	r2, #255	; 0xff
 8008d76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	4b31      	ldr	r3, [pc, #196]	; (8008e50 <xPortStartScheduler+0x130>)
 8008d8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d8e:	4b31      	ldr	r3, [pc, #196]	; (8008e54 <xPortStartScheduler+0x134>)
 8008d90:	2207      	movs	r2, #7
 8008d92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d94:	e009      	b.n	8008daa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008d96:	4b2f      	ldr	r3, [pc, #188]	; (8008e54 <xPortStartScheduler+0x134>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	4a2d      	ldr	r2, [pc, #180]	; (8008e54 <xPortStartScheduler+0x134>)
 8008d9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	005b      	lsls	r3, r3, #1
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008daa:	78fb      	ldrb	r3, [r7, #3]
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db2:	2b80      	cmp	r3, #128	; 0x80
 8008db4:	d0ef      	beq.n	8008d96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008db6:	4b27      	ldr	r3, [pc, #156]	; (8008e54 <xPortStartScheduler+0x134>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f1c3 0307 	rsb	r3, r3, #7
 8008dbe:	2b04      	cmp	r3, #4
 8008dc0:	d00a      	beq.n	8008dd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	60bb      	str	r3, [r7, #8]
}
 8008dd4:	bf00      	nop
 8008dd6:	e7fe      	b.n	8008dd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008dd8:	4b1e      	ldr	r3, [pc, #120]	; (8008e54 <xPortStartScheduler+0x134>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	021b      	lsls	r3, r3, #8
 8008dde:	4a1d      	ldr	r2, [pc, #116]	; (8008e54 <xPortStartScheduler+0x134>)
 8008de0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008de2:	4b1c      	ldr	r3, [pc, #112]	; (8008e54 <xPortStartScheduler+0x134>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008dea:	4a1a      	ldr	r2, [pc, #104]	; (8008e54 <xPortStartScheduler+0x134>)
 8008dec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008df6:	4b18      	ldr	r3, [pc, #96]	; (8008e58 <xPortStartScheduler+0x138>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a17      	ldr	r2, [pc, #92]	; (8008e58 <xPortStartScheduler+0x138>)
 8008dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e02:	4b15      	ldr	r3, [pc, #84]	; (8008e58 <xPortStartScheduler+0x138>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a14      	ldr	r2, [pc, #80]	; (8008e58 <xPortStartScheduler+0x138>)
 8008e08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e0e:	f000 f8dd 	bl	8008fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e12:	4b12      	ldr	r3, [pc, #72]	; (8008e5c <xPortStartScheduler+0x13c>)
 8008e14:	2200      	movs	r2, #0
 8008e16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e18:	f000 f8fc 	bl	8009014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e1c:	4b10      	ldr	r3, [pc, #64]	; (8008e60 <xPortStartScheduler+0x140>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a0f      	ldr	r2, [pc, #60]	; (8008e60 <xPortStartScheduler+0x140>)
 8008e22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e28:	f7ff ff66 	bl	8008cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e2c:	f7ff fd58 	bl	80088e0 <vTaskSwitchContext>
	prvTaskExitError();
 8008e30:	f7ff ff22 	bl	8008c78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	e000ed00 	.word	0xe000ed00
 8008e44:	410fc271 	.word	0x410fc271
 8008e48:	410fc270 	.word	0x410fc270
 8008e4c:	e000e400 	.word	0xe000e400
 8008e50:	20000524 	.word	0x20000524
 8008e54:	20000528 	.word	0x20000528
 8008e58:	e000ed20 	.word	0xe000ed20
 8008e5c:	2000011c 	.word	0x2000011c
 8008e60:	e000ef34 	.word	0xe000ef34

08008e64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	607b      	str	r3, [r7, #4]
}
 8008e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e7e:	4b0f      	ldr	r3, [pc, #60]	; (8008ebc <vPortEnterCritical+0x58>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3301      	adds	r3, #1
 8008e84:	4a0d      	ldr	r2, [pc, #52]	; (8008ebc <vPortEnterCritical+0x58>)
 8008e86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e88:	4b0c      	ldr	r3, [pc, #48]	; (8008ebc <vPortEnterCritical+0x58>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d10f      	bne.n	8008eb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e90:	4b0b      	ldr	r3, [pc, #44]	; (8008ec0 <vPortEnterCritical+0x5c>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	603b      	str	r3, [r7, #0]
}
 8008eac:	bf00      	nop
 8008eae:	e7fe      	b.n	8008eae <vPortEnterCritical+0x4a>
	}
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	2000011c 	.word	0x2000011c
 8008ec0:	e000ed04 	.word	0xe000ed04

08008ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008eca:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <vPortExitCritical+0x50>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10a      	bne.n	8008ee8 <vPortExitCritical+0x24>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	607b      	str	r3, [r7, #4]
}
 8008ee4:	bf00      	nop
 8008ee6:	e7fe      	b.n	8008ee6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ee8:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <vPortExitCritical+0x50>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	4a09      	ldr	r2, [pc, #36]	; (8008f14 <vPortExitCritical+0x50>)
 8008ef0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ef2:	4b08      	ldr	r3, [pc, #32]	; (8008f14 <vPortExitCritical+0x50>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d105      	bne.n	8008f06 <vPortExitCritical+0x42>
 8008efa:	2300      	movs	r3, #0
 8008efc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008f04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f06:	bf00      	nop
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	2000011c 	.word	0x2000011c
	...

08008f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f20:	f3ef 8009 	mrs	r0, PSP
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	4b15      	ldr	r3, [pc, #84]	; (8008f80 <pxCurrentTCBConst>)
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	f01e 0f10 	tst.w	lr, #16
 8008f30:	bf08      	it	eq
 8008f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3a:	6010      	str	r0, [r2, #0]
 8008f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f44:	f380 8811 	msr	BASEPRI, r0
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f7ff fcc6 	bl	80088e0 <vTaskSwitchContext>
 8008f54:	f04f 0000 	mov.w	r0, #0
 8008f58:	f380 8811 	msr	BASEPRI, r0
 8008f5c:	bc09      	pop	{r0, r3}
 8008f5e:	6819      	ldr	r1, [r3, #0]
 8008f60:	6808      	ldr	r0, [r1, #0]
 8008f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f66:	f01e 0f10 	tst.w	lr, #16
 8008f6a:	bf08      	it	eq
 8008f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f70:	f380 8809 	msr	PSP, r0
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	f3af 8000 	nop.w

08008f80 <pxCurrentTCBConst>:
 8008f80:	200003f8 	.word	0x200003f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop

08008f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	607b      	str	r3, [r7, #4]
}
 8008fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008fa2:	f7ff fbe5 	bl	8008770 <xTaskIncrementTick>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008fac:	4b06      	ldr	r3, [pc, #24]	; (8008fc8 <SysTick_Handler+0x40>)
 8008fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	f383 8811 	msr	BASEPRI, r3
}
 8008fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008fc0:	bf00      	nop
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	e000ed04 	.word	0xe000ed04

08008fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008fd0:	4b0b      	ldr	r3, [pc, #44]	; (8009000 <vPortSetupTimerInterrupt+0x34>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008fd6:	4b0b      	ldr	r3, [pc, #44]	; (8009004 <vPortSetupTimerInterrupt+0x38>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008fdc:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <vPortSetupTimerInterrupt+0x3c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a0a      	ldr	r2, [pc, #40]	; (800900c <vPortSetupTimerInterrupt+0x40>)
 8008fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe6:	099b      	lsrs	r3, r3, #6
 8008fe8:	4a09      	ldr	r2, [pc, #36]	; (8009010 <vPortSetupTimerInterrupt+0x44>)
 8008fea:	3b01      	subs	r3, #1
 8008fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008fee:	4b04      	ldr	r3, [pc, #16]	; (8009000 <vPortSetupTimerInterrupt+0x34>)
 8008ff0:	2207      	movs	r2, #7
 8008ff2:	601a      	str	r2, [r3, #0]
}
 8008ff4:	bf00      	nop
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	e000e010 	.word	0xe000e010
 8009004:	e000e018 	.word	0xe000e018
 8009008:	20000000 	.word	0x20000000
 800900c:	10624dd3 	.word	0x10624dd3
 8009010:	e000e014 	.word	0xe000e014

08009014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009024 <vPortEnableVFP+0x10>
 8009018:	6801      	ldr	r1, [r0, #0]
 800901a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800901e:	6001      	str	r1, [r0, #0]
 8009020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009022:	bf00      	nop
 8009024:	e000ed88 	.word	0xe000ed88

08009028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b08a      	sub	sp, #40	; 0x28
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009030:	2300      	movs	r3, #0
 8009032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009034:	f7ff faf2 	bl	800861c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009038:	4b5b      	ldr	r3, [pc, #364]	; (80091a8 <pvPortMalloc+0x180>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009040:	f000 f920 	bl	8009284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009044:	4b59      	ldr	r3, [pc, #356]	; (80091ac <pvPortMalloc+0x184>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4013      	ands	r3, r2
 800904c:	2b00      	cmp	r3, #0
 800904e:	f040 8093 	bne.w	8009178 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d01d      	beq.n	8009094 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009058:	2208      	movs	r2, #8
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4413      	add	r3, r2
 800905e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	2b00      	cmp	r3, #0
 8009068:	d014      	beq.n	8009094 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f023 0307 	bic.w	r3, r3, #7
 8009070:	3308      	adds	r3, #8
 8009072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00a      	beq.n	8009094 <pvPortMalloc+0x6c>
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	617b      	str	r3, [r7, #20]
}
 8009090:	bf00      	nop
 8009092:	e7fe      	b.n	8009092 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d06e      	beq.n	8009178 <pvPortMalloc+0x150>
 800909a:	4b45      	ldr	r3, [pc, #276]	; (80091b0 <pvPortMalloc+0x188>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d869      	bhi.n	8009178 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80090a4:	4b43      	ldr	r3, [pc, #268]	; (80091b4 <pvPortMalloc+0x18c>)
 80090a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090a8:	4b42      	ldr	r3, [pc, #264]	; (80091b4 <pvPortMalloc+0x18c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090ae:	e004      	b.n	80090ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d903      	bls.n	80090cc <pvPortMalloc+0xa4>
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1f1      	bne.n	80090b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090cc:	4b36      	ldr	r3, [pc, #216]	; (80091a8 <pvPortMalloc+0x180>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d050      	beq.n	8009178 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2208      	movs	r2, #8
 80090dc:	4413      	add	r3, r2
 80090de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	1ad2      	subs	r2, r2, r3
 80090f0:	2308      	movs	r3, #8
 80090f2:	005b      	lsls	r3, r3, #1
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d91f      	bls.n	8009138 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4413      	add	r3, r2
 80090fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	f003 0307 	and.w	r3, r3, #7
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00a      	beq.n	8009120 <pvPortMalloc+0xf8>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	613b      	str	r3, [r7, #16]
}
 800911c:	bf00      	nop
 800911e:	e7fe      	b.n	800911e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	1ad2      	subs	r2, r2, r3
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009132:	69b8      	ldr	r0, [r7, #24]
 8009134:	f000 f908 	bl	8009348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009138:	4b1d      	ldr	r3, [pc, #116]	; (80091b0 <pvPortMalloc+0x188>)
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	4a1b      	ldr	r2, [pc, #108]	; (80091b0 <pvPortMalloc+0x188>)
 8009144:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009146:	4b1a      	ldr	r3, [pc, #104]	; (80091b0 <pvPortMalloc+0x188>)
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	4b1b      	ldr	r3, [pc, #108]	; (80091b8 <pvPortMalloc+0x190>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	429a      	cmp	r2, r3
 8009150:	d203      	bcs.n	800915a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009152:	4b17      	ldr	r3, [pc, #92]	; (80091b0 <pvPortMalloc+0x188>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a18      	ldr	r2, [pc, #96]	; (80091b8 <pvPortMalloc+0x190>)
 8009158:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	4b13      	ldr	r3, [pc, #76]	; (80091ac <pvPortMalloc+0x184>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	431a      	orrs	r2, r3
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	2200      	movs	r2, #0
 800916c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800916e:	4b13      	ldr	r3, [pc, #76]	; (80091bc <pvPortMalloc+0x194>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3301      	adds	r3, #1
 8009174:	4a11      	ldr	r2, [pc, #68]	; (80091bc <pvPortMalloc+0x194>)
 8009176:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009178:	f7ff fa5e 	bl	8008638 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	f003 0307 	and.w	r3, r3, #7
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00a      	beq.n	800919c <pvPortMalloc+0x174>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	60fb      	str	r3, [r7, #12]
}
 8009198:	bf00      	nop
 800919a:	e7fe      	b.n	800919a <pvPortMalloc+0x172>
	return pvReturn;
 800919c:	69fb      	ldr	r3, [r7, #28]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3728      	adds	r7, #40	; 0x28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20004134 	.word	0x20004134
 80091ac:	20004148 	.word	0x20004148
 80091b0:	20004138 	.word	0x20004138
 80091b4:	2000412c 	.word	0x2000412c
 80091b8:	2000413c 	.word	0x2000413c
 80091bc:	20004140 	.word	0x20004140

080091c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d04d      	beq.n	800926e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091d2:	2308      	movs	r3, #8
 80091d4:	425b      	negs	r3, r3
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4413      	add	r3, r2
 80091da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	4b24      	ldr	r3, [pc, #144]	; (8009278 <vPortFree+0xb8>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4013      	ands	r3, r2
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10a      	bne.n	8009204 <vPortFree+0x44>
	__asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	60fb      	str	r3, [r7, #12]
}
 8009200:	bf00      	nop
 8009202:	e7fe      	b.n	8009202 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00a      	beq.n	8009222 <vPortFree+0x62>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	60bb      	str	r3, [r7, #8]
}
 800921e:	bf00      	nop
 8009220:	e7fe      	b.n	8009220 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	4b14      	ldr	r3, [pc, #80]	; (8009278 <vPortFree+0xb8>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4013      	ands	r3, r2
 800922c:	2b00      	cmp	r3, #0
 800922e:	d01e      	beq.n	800926e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d11a      	bne.n	800926e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	685a      	ldr	r2, [r3, #4]
 800923c:	4b0e      	ldr	r3, [pc, #56]	; (8009278 <vPortFree+0xb8>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	43db      	mvns	r3, r3
 8009242:	401a      	ands	r2, r3
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009248:	f7ff f9e8 	bl	800861c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	4b0a      	ldr	r3, [pc, #40]	; (800927c <vPortFree+0xbc>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4413      	add	r3, r2
 8009256:	4a09      	ldr	r2, [pc, #36]	; (800927c <vPortFree+0xbc>)
 8009258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800925a:	6938      	ldr	r0, [r7, #16]
 800925c:	f000 f874 	bl	8009348 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009260:	4b07      	ldr	r3, [pc, #28]	; (8009280 <vPortFree+0xc0>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3301      	adds	r3, #1
 8009266:	4a06      	ldr	r2, [pc, #24]	; (8009280 <vPortFree+0xc0>)
 8009268:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800926a:	f7ff f9e5 	bl	8008638 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800926e:	bf00      	nop
 8009270:	3718      	adds	r7, #24
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20004148 	.word	0x20004148
 800927c:	20004138 	.word	0x20004138
 8009280:	20004144 	.word	0x20004144

08009284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800928a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800928e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009290:	4b27      	ldr	r3, [pc, #156]	; (8009330 <prvHeapInit+0xac>)
 8009292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00c      	beq.n	80092b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3307      	adds	r3, #7
 80092a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f023 0307 	bic.w	r3, r3, #7
 80092aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	4a1f      	ldr	r2, [pc, #124]	; (8009330 <prvHeapInit+0xac>)
 80092b4:	4413      	add	r3, r2
 80092b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80092bc:	4a1d      	ldr	r2, [pc, #116]	; (8009334 <prvHeapInit+0xb0>)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092c2:	4b1c      	ldr	r3, [pc, #112]	; (8009334 <prvHeapInit+0xb0>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	4413      	add	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092d0:	2208      	movs	r2, #8
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	1a9b      	subs	r3, r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0307 	bic.w	r3, r3, #7
 80092de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4a15      	ldr	r2, [pc, #84]	; (8009338 <prvHeapInit+0xb4>)
 80092e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092e6:	4b14      	ldr	r3, [pc, #80]	; (8009338 <prvHeapInit+0xb4>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2200      	movs	r2, #0
 80092ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092ee:	4b12      	ldr	r3, [pc, #72]	; (8009338 <prvHeapInit+0xb4>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2200      	movs	r2, #0
 80092f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	1ad2      	subs	r2, r2, r3
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009304:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <prvHeapInit+0xb4>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	4a0a      	ldr	r2, [pc, #40]	; (800933c <prvHeapInit+0xb8>)
 8009312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	4a09      	ldr	r2, [pc, #36]	; (8009340 <prvHeapInit+0xbc>)
 800931a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800931c:	4b09      	ldr	r3, [pc, #36]	; (8009344 <prvHeapInit+0xc0>)
 800931e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009322:	601a      	str	r2, [r3, #0]
}
 8009324:	bf00      	nop
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	2000052c 	.word	0x2000052c
 8009334:	2000412c 	.word	0x2000412c
 8009338:	20004134 	.word	0x20004134
 800933c:	2000413c 	.word	0x2000413c
 8009340:	20004138 	.word	0x20004138
 8009344:	20004148 	.word	0x20004148

08009348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009350:	4b28      	ldr	r3, [pc, #160]	; (80093f4 <prvInsertBlockIntoFreeList+0xac>)
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	e002      	b.n	800935c <prvInsertBlockIntoFreeList+0x14>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	60fb      	str	r3, [r7, #12]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	429a      	cmp	r2, r3
 8009364:	d8f7      	bhi.n	8009356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	4413      	add	r3, r2
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	429a      	cmp	r2, r3
 8009376:	d108      	bne.n	800938a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	441a      	add	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	441a      	add	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	429a      	cmp	r2, r3
 800939c:	d118      	bne.n	80093d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	4b15      	ldr	r3, [pc, #84]	; (80093f8 <prvInsertBlockIntoFreeList+0xb0>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d00d      	beq.n	80093c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	441a      	add	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	e008      	b.n	80093d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093c6:	4b0c      	ldr	r3, [pc, #48]	; (80093f8 <prvInsertBlockIntoFreeList+0xb0>)
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	601a      	str	r2, [r3, #0]
 80093ce:	e003      	b.n	80093d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d002      	beq.n	80093e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093e6:	bf00      	nop
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	2000412c 	.word	0x2000412c
 80093f8:	20004134 	.word	0x20004134

080093fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009400:	2200      	movs	r2, #0
 8009402:	4912      	ldr	r1, [pc, #72]	; (800944c <MX_USB_DEVICE_Init+0x50>)
 8009404:	4812      	ldr	r0, [pc, #72]	; (8009450 <MX_USB_DEVICE_Init+0x54>)
 8009406:	f7fd fc45 	bl	8006c94 <USBD_Init>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009410:	f7f7 fbec 	bl	8000bec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009414:	490f      	ldr	r1, [pc, #60]	; (8009454 <MX_USB_DEVICE_Init+0x58>)
 8009416:	480e      	ldr	r0, [pc, #56]	; (8009450 <MX_USB_DEVICE_Init+0x54>)
 8009418:	f7fd fc6c 	bl	8006cf4 <USBD_RegisterClass>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d001      	beq.n	8009426 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009422:	f7f7 fbe3 	bl	8000bec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009426:	490c      	ldr	r1, [pc, #48]	; (8009458 <MX_USB_DEVICE_Init+0x5c>)
 8009428:	4809      	ldr	r0, [pc, #36]	; (8009450 <MX_USB_DEVICE_Init+0x54>)
 800942a:	f7fd fbbd 	bl	8006ba8 <USBD_CDC_RegisterInterface>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009434:	f7f7 fbda 	bl	8000bec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009438:	4805      	ldr	r0, [pc, #20]	; (8009450 <MX_USB_DEVICE_Init+0x54>)
 800943a:	f7fd fc82 	bl	8006d42 <USBD_Start>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d001      	beq.n	8009448 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009444:	f7f7 fbd2 	bl	8000bec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009448:	bf00      	nop
 800944a:	bd80      	pop	{r7, pc}
 800944c:	20000134 	.word	0x20000134
 8009450:	200045d4 	.word	0x200045d4
 8009454:	20000018 	.word	0x20000018
 8009458:	20000120 	.word	0x20000120

0800945c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009460:	2200      	movs	r2, #0
 8009462:	4905      	ldr	r1, [pc, #20]	; (8009478 <CDC_Init_FS+0x1c>)
 8009464:	4805      	ldr	r0, [pc, #20]	; (800947c <CDC_Init_FS+0x20>)
 8009466:	f7fd fbb4 	bl	8006bd2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800946a:	4905      	ldr	r1, [pc, #20]	; (8009480 <CDC_Init_FS+0x24>)
 800946c:	4803      	ldr	r0, [pc, #12]	; (800947c <CDC_Init_FS+0x20>)
 800946e:	f7fd fbce 	bl	8006c0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009472:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009474:	4618      	mov	r0, r3
 8009476:	bd80      	pop	{r7, pc}
 8009478:	200050a4 	.word	0x200050a4
 800947c:	200045d4 	.word	0x200045d4
 8009480:	200048a4 	.word	0x200048a4

08009484 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009484:	b480      	push	{r7}
 8009486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009488:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800948a:	4618      	mov	r0, r3
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	6039      	str	r1, [r7, #0]
 800949e:	71fb      	strb	r3, [r7, #7]
 80094a0:	4613      	mov	r3, r2
 80094a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80094a4:	79fb      	ldrb	r3, [r7, #7]
 80094a6:	2b23      	cmp	r3, #35	; 0x23
 80094a8:	d84a      	bhi.n	8009540 <CDC_Control_FS+0xac>
 80094aa:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <CDC_Control_FS+0x1c>)
 80094ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b0:	08009541 	.word	0x08009541
 80094b4:	08009541 	.word	0x08009541
 80094b8:	08009541 	.word	0x08009541
 80094bc:	08009541 	.word	0x08009541
 80094c0:	08009541 	.word	0x08009541
 80094c4:	08009541 	.word	0x08009541
 80094c8:	08009541 	.word	0x08009541
 80094cc:	08009541 	.word	0x08009541
 80094d0:	08009541 	.word	0x08009541
 80094d4:	08009541 	.word	0x08009541
 80094d8:	08009541 	.word	0x08009541
 80094dc:	08009541 	.word	0x08009541
 80094e0:	08009541 	.word	0x08009541
 80094e4:	08009541 	.word	0x08009541
 80094e8:	08009541 	.word	0x08009541
 80094ec:	08009541 	.word	0x08009541
 80094f0:	08009541 	.word	0x08009541
 80094f4:	08009541 	.word	0x08009541
 80094f8:	08009541 	.word	0x08009541
 80094fc:	08009541 	.word	0x08009541
 8009500:	08009541 	.word	0x08009541
 8009504:	08009541 	.word	0x08009541
 8009508:	08009541 	.word	0x08009541
 800950c:	08009541 	.word	0x08009541
 8009510:	08009541 	.word	0x08009541
 8009514:	08009541 	.word	0x08009541
 8009518:	08009541 	.word	0x08009541
 800951c:	08009541 	.word	0x08009541
 8009520:	08009541 	.word	0x08009541
 8009524:	08009541 	.word	0x08009541
 8009528:	08009541 	.word	0x08009541
 800952c:	08009541 	.word	0x08009541
 8009530:	08009541 	.word	0x08009541
 8009534:	08009541 	.word	0x08009541
 8009538:	08009541 	.word	0x08009541
 800953c:	08009541 	.word	0x08009541
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009540:	bf00      	nop
  }

  return (USBD_OK);
 8009542:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009544:	4618      	mov	r0, r3
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800955a:	6879      	ldr	r1, [r7, #4]
 800955c:	4805      	ldr	r0, [pc, #20]	; (8009574 <CDC_Receive_FS+0x24>)
 800955e:	f7fd fb56 	bl	8006c0e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009562:	4804      	ldr	r0, [pc, #16]	; (8009574 <CDC_Receive_FS+0x24>)
 8009564:	f7fd fb6c 	bl	8006c40 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009568:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	200045d4 	.word	0x200045d4

08009578 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	4613      	mov	r3, r2
 8009584:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009586:	2300      	movs	r3, #0
 8009588:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800958a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800958e:	4618      	mov	r0, r3
 8009590:	371c      	adds	r7, #28
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
	...

0800959c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	4603      	mov	r3, r0
 80095a4:	6039      	str	r1, [r7, #0]
 80095a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2212      	movs	r2, #18
 80095ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80095ae:	4b03      	ldr	r3, [pc, #12]	; (80095bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	20000150 	.word	0x20000150

080095c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	4603      	mov	r3, r0
 80095c8:	6039      	str	r1, [r7, #0]
 80095ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2204      	movs	r2, #4
 80095d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095d2:	4b03      	ldr	r3, [pc, #12]	; (80095e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	20000164 	.word	0x20000164

080095e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	4603      	mov	r3, r0
 80095ec:	6039      	str	r1, [r7, #0]
 80095ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095f0:	79fb      	ldrb	r3, [r7, #7]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d105      	bne.n	8009602 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	4907      	ldr	r1, [pc, #28]	; (8009618 <USBD_FS_ProductStrDescriptor+0x34>)
 80095fa:	4808      	ldr	r0, [pc, #32]	; (800961c <USBD_FS_ProductStrDescriptor+0x38>)
 80095fc:	f7fe fbd3 	bl	8007da6 <USBD_GetString>
 8009600:	e004      	b.n	800960c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	4904      	ldr	r1, [pc, #16]	; (8009618 <USBD_FS_ProductStrDescriptor+0x34>)
 8009606:	4805      	ldr	r0, [pc, #20]	; (800961c <USBD_FS_ProductStrDescriptor+0x38>)
 8009608:	f7fe fbcd 	bl	8007da6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800960c:	4b02      	ldr	r3, [pc, #8]	; (8009618 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	200058a4 	.word	0x200058a4
 800961c:	08009e88 	.word	0x08009e88

08009620 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	4603      	mov	r3, r0
 8009628:	6039      	str	r1, [r7, #0]
 800962a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800962c:	683a      	ldr	r2, [r7, #0]
 800962e:	4904      	ldr	r1, [pc, #16]	; (8009640 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009630:	4804      	ldr	r0, [pc, #16]	; (8009644 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009632:	f7fe fbb8 	bl	8007da6 <USBD_GetString>
  return USBD_StrDesc;
 8009636:	4b02      	ldr	r3, [pc, #8]	; (8009640 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009638:	4618      	mov	r0, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	200058a4 	.word	0x200058a4
 8009644:	08009ea0 	.word	0x08009ea0

08009648 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	4603      	mov	r3, r0
 8009650:	6039      	str	r1, [r7, #0]
 8009652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	221a      	movs	r2, #26
 8009658:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800965a:	f000 f843 	bl	80096e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800965e:	4b02      	ldr	r3, [pc, #8]	; (8009668 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	20000168 	.word	0x20000168

0800966c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	4603      	mov	r3, r0
 8009674:	6039      	str	r1, [r7, #0]
 8009676:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009678:	79fb      	ldrb	r3, [r7, #7]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d105      	bne.n	800968a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	4907      	ldr	r1, [pc, #28]	; (80096a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009682:	4808      	ldr	r0, [pc, #32]	; (80096a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009684:	f7fe fb8f 	bl	8007da6 <USBD_GetString>
 8009688:	e004      	b.n	8009694 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800968a:	683a      	ldr	r2, [r7, #0]
 800968c:	4904      	ldr	r1, [pc, #16]	; (80096a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800968e:	4805      	ldr	r0, [pc, #20]	; (80096a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009690:	f7fe fb89 	bl	8007da6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009694:	4b02      	ldr	r3, [pc, #8]	; (80096a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	200058a4 	.word	0x200058a4
 80096a4:	08009eb4 	.word	0x08009eb4

080096a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	4603      	mov	r3, r0
 80096b0:	6039      	str	r1, [r7, #0]
 80096b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096b4:	79fb      	ldrb	r3, [r7, #7]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d105      	bne.n	80096c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096ba:	683a      	ldr	r2, [r7, #0]
 80096bc:	4907      	ldr	r1, [pc, #28]	; (80096dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096be:	4808      	ldr	r0, [pc, #32]	; (80096e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096c0:	f7fe fb71 	bl	8007da6 <USBD_GetString>
 80096c4:	e004      	b.n	80096d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	4904      	ldr	r1, [pc, #16]	; (80096dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096ca:	4805      	ldr	r0, [pc, #20]	; (80096e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096cc:	f7fe fb6b 	bl	8007da6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096d0:	4b02      	ldr	r3, [pc, #8]	; (80096dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	200058a4 	.word	0x200058a4
 80096e0:	08009ec0 	.word	0x08009ec0

080096e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096ea:	4b0f      	ldr	r3, [pc, #60]	; (8009728 <Get_SerialNum+0x44>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096f0:	4b0e      	ldr	r3, [pc, #56]	; (800972c <Get_SerialNum+0x48>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096f6:	4b0e      	ldr	r3, [pc, #56]	; (8009730 <Get_SerialNum+0x4c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4413      	add	r3, r2
 8009702:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d009      	beq.n	800971e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800970a:	2208      	movs	r2, #8
 800970c:	4909      	ldr	r1, [pc, #36]	; (8009734 <Get_SerialNum+0x50>)
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 f814 	bl	800973c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009714:	2204      	movs	r2, #4
 8009716:	4908      	ldr	r1, [pc, #32]	; (8009738 <Get_SerialNum+0x54>)
 8009718:	68b8      	ldr	r0, [r7, #8]
 800971a:	f000 f80f 	bl	800973c <IntToUnicode>
  }
}
 800971e:	bf00      	nop
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	1fff7a10 	.word	0x1fff7a10
 800972c:	1fff7a14 	.word	0x1fff7a14
 8009730:	1fff7a18 	.word	0x1fff7a18
 8009734:	2000016a 	.word	0x2000016a
 8009738:	2000017a 	.word	0x2000017a

0800973c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	4613      	mov	r3, r2
 8009748:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800974e:	2300      	movs	r3, #0
 8009750:	75fb      	strb	r3, [r7, #23]
 8009752:	e027      	b.n	80097a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	0f1b      	lsrs	r3, r3, #28
 8009758:	2b09      	cmp	r3, #9
 800975a:	d80b      	bhi.n	8009774 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	0f1b      	lsrs	r3, r3, #28
 8009760:	b2da      	uxtb	r2, r3
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	005b      	lsls	r3, r3, #1
 8009766:	4619      	mov	r1, r3
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	440b      	add	r3, r1
 800976c:	3230      	adds	r2, #48	; 0x30
 800976e:	b2d2      	uxtb	r2, r2
 8009770:	701a      	strb	r2, [r3, #0]
 8009772:	e00a      	b.n	800978a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	0f1b      	lsrs	r3, r3, #28
 8009778:	b2da      	uxtb	r2, r3
 800977a:	7dfb      	ldrb	r3, [r7, #23]
 800977c:	005b      	lsls	r3, r3, #1
 800977e:	4619      	mov	r1, r3
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	440b      	add	r3, r1
 8009784:	3237      	adds	r2, #55	; 0x37
 8009786:	b2d2      	uxtb	r2, r2
 8009788:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	011b      	lsls	r3, r3, #4
 800978e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009790:	7dfb      	ldrb	r3, [r7, #23]
 8009792:	005b      	lsls	r3, r3, #1
 8009794:	3301      	adds	r3, #1
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	4413      	add	r3, r2
 800979a:	2200      	movs	r2, #0
 800979c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	3301      	adds	r3, #1
 80097a2:	75fb      	strb	r3, [r7, #23]
 80097a4:	7dfa      	ldrb	r2, [r7, #23]
 80097a6:	79fb      	ldrb	r3, [r7, #7]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d3d3      	bcc.n	8009754 <IntToUnicode+0x18>
  }
}
 80097ac:	bf00      	nop
 80097ae:	bf00      	nop
 80097b0:	371c      	adds	r7, #28
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
	...

080097bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b08a      	sub	sp, #40	; 0x28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097c4:	f107 0314 	add.w	r3, r7, #20
 80097c8:	2200      	movs	r2, #0
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	605a      	str	r2, [r3, #4]
 80097ce:	609a      	str	r2, [r3, #8]
 80097d0:	60da      	str	r2, [r3, #12]
 80097d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097dc:	d13a      	bne.n	8009854 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097de:	2300      	movs	r3, #0
 80097e0:	613b      	str	r3, [r7, #16]
 80097e2:	4b1e      	ldr	r3, [pc, #120]	; (800985c <HAL_PCD_MspInit+0xa0>)
 80097e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e6:	4a1d      	ldr	r2, [pc, #116]	; (800985c <HAL_PCD_MspInit+0xa0>)
 80097e8:	f043 0301 	orr.w	r3, r3, #1
 80097ec:	6313      	str	r3, [r2, #48]	; 0x30
 80097ee:	4b1b      	ldr	r3, [pc, #108]	; (800985c <HAL_PCD_MspInit+0xa0>)
 80097f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	613b      	str	r3, [r7, #16]
 80097f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80097fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80097fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009800:	2302      	movs	r3, #2
 8009802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009804:	2300      	movs	r3, #0
 8009806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009808:	2303      	movs	r3, #3
 800980a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800980c:	230a      	movs	r3, #10
 800980e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009810:	f107 0314 	add.w	r3, r7, #20
 8009814:	4619      	mov	r1, r3
 8009816:	4812      	ldr	r0, [pc, #72]	; (8009860 <HAL_PCD_MspInit+0xa4>)
 8009818:	f7f8 fadc 	bl	8001dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800981c:	4b0f      	ldr	r3, [pc, #60]	; (800985c <HAL_PCD_MspInit+0xa0>)
 800981e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009820:	4a0e      	ldr	r2, [pc, #56]	; (800985c <HAL_PCD_MspInit+0xa0>)
 8009822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009826:	6353      	str	r3, [r2, #52]	; 0x34
 8009828:	2300      	movs	r3, #0
 800982a:	60fb      	str	r3, [r7, #12]
 800982c:	4b0b      	ldr	r3, [pc, #44]	; (800985c <HAL_PCD_MspInit+0xa0>)
 800982e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009830:	4a0a      	ldr	r2, [pc, #40]	; (800985c <HAL_PCD_MspInit+0xa0>)
 8009832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009836:	6453      	str	r3, [r2, #68]	; 0x44
 8009838:	4b08      	ldr	r3, [pc, #32]	; (800985c <HAL_PCD_MspInit+0xa0>)
 800983a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800983c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009840:	60fb      	str	r3, [r7, #12]
 8009842:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009844:	2200      	movs	r2, #0
 8009846:	2105      	movs	r1, #5
 8009848:	2043      	movs	r0, #67	; 0x43
 800984a:	f7f8 f9b9 	bl	8001bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800984e:	2043      	movs	r0, #67	; 0x43
 8009850:	f7f8 f9d2 	bl	8001bf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009854:	bf00      	nop
 8009856:	3728      	adds	r7, #40	; 0x28
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	40023800 	.word	0x40023800
 8009860:	40020000 	.word	0x40020000

08009864 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009878:	4619      	mov	r1, r3
 800987a:	4610      	mov	r0, r2
 800987c:	f7fd faac 	bl	8006dd8 <USBD_LL_SetupStage>
}
 8009880:	bf00      	nop
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800989a:	78fa      	ldrb	r2, [r7, #3]
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	4613      	mov	r3, r2
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	1a9b      	subs	r3, r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	440b      	add	r3, r1
 80098a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	78fb      	ldrb	r3, [r7, #3]
 80098b0:	4619      	mov	r1, r3
 80098b2:	f7fd fae6 	bl	8006e82 <USBD_LL_DataOutStage>
}
 80098b6:	bf00      	nop
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b082      	sub	sp, #8
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	460b      	mov	r3, r1
 80098c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80098d0:	78fa      	ldrb	r2, [r7, #3]
 80098d2:	6879      	ldr	r1, [r7, #4]
 80098d4:	4613      	mov	r3, r2
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	1a9b      	subs	r3, r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	440b      	add	r3, r1
 80098de:	3348      	adds	r3, #72	; 0x48
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	78fb      	ldrb	r3, [r7, #3]
 80098e4:	4619      	mov	r1, r3
 80098e6:	f7fd fb2f 	bl	8006f48 <USBD_LL_DataInStage>
}
 80098ea:	bf00      	nop
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b082      	sub	sp, #8
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009900:	4618      	mov	r0, r3
 8009902:	f7fd fc43 	bl	800718c <USBD_LL_SOF>
}
 8009906:	bf00      	nop
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009916:	2301      	movs	r3, #1
 8009918:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d102      	bne.n	8009928 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009922:	2300      	movs	r3, #0
 8009924:	73fb      	strb	r3, [r7, #15]
 8009926:	e008      	b.n	800993a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	2b02      	cmp	r3, #2
 800992e:	d102      	bne.n	8009936 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009930:	2301      	movs	r3, #1
 8009932:	73fb      	strb	r3, [r7, #15]
 8009934:	e001      	b.n	800993a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009936:	f7f7 f959 	bl	8000bec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009940:	7bfa      	ldrb	r2, [r7, #15]
 8009942:	4611      	mov	r1, r2
 8009944:	4618      	mov	r0, r3
 8009946:	f7fd fbe3 	bl	8007110 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009950:	4618      	mov	r0, r3
 8009952:	f7fd fb8f 	bl	8007074 <USBD_LL_Reset>
}
 8009956:	bf00      	nop
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
	...

08009960 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800996e:	4618      	mov	r0, r3
 8009970:	f7fd fbde 	bl	8007130 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	6812      	ldr	r2, [r2, #0]
 8009982:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009986:	f043 0301 	orr.w	r3, r3, #1
 800998a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a1b      	ldr	r3, [r3, #32]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d005      	beq.n	80099a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009994:	4b04      	ldr	r3, [pc, #16]	; (80099a8 <HAL_PCD_SuspendCallback+0x48>)
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	4a03      	ldr	r2, [pc, #12]	; (80099a8 <HAL_PCD_SuspendCallback+0x48>)
 800999a:	f043 0306 	orr.w	r3, r3, #6
 800999e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80099a0:	bf00      	nop
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	e000ed00 	.word	0xe000ed00

080099ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fd fbce 	bl	800715c <USBD_LL_Resume>
}
 80099c0:	bf00      	nop
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099da:	78fa      	ldrb	r2, [r7, #3]
 80099dc:	4611      	mov	r1, r2
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fd fc1c 	bl	800721c <USBD_LL_IsoOUTIncomplete>
}
 80099e4:	bf00      	nop
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099fe:	78fa      	ldrb	r2, [r7, #3]
 8009a00:	4611      	mov	r1, r2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fd fbe4 	bl	80071d0 <USBD_LL_IsoINIncomplete>
}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fd fc22 	bl	8007268 <USBD_LL_DevConnected>
}
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fd fc1f 	bl	800727e <USBD_LL_DevDisconnected>
}
 8009a40:	bf00      	nop
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d13c      	bne.n	8009ad2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009a58:	4a20      	ldr	r2, [pc, #128]	; (8009adc <USBD_LL_Init+0x94>)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a1e      	ldr	r2, [pc, #120]	; (8009adc <USBD_LL_Init+0x94>)
 8009a64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a68:	4b1c      	ldr	r3, [pc, #112]	; (8009adc <USBD_LL_Init+0x94>)
 8009a6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009a70:	4b1a      	ldr	r3, [pc, #104]	; (8009adc <USBD_LL_Init+0x94>)
 8009a72:	2204      	movs	r2, #4
 8009a74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009a76:	4b19      	ldr	r3, [pc, #100]	; (8009adc <USBD_LL_Init+0x94>)
 8009a78:	2202      	movs	r2, #2
 8009a7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009a7c:	4b17      	ldr	r3, [pc, #92]	; (8009adc <USBD_LL_Init+0x94>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a82:	4b16      	ldr	r3, [pc, #88]	; (8009adc <USBD_LL_Init+0x94>)
 8009a84:	2202      	movs	r2, #2
 8009a86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a88:	4b14      	ldr	r3, [pc, #80]	; (8009adc <USBD_LL_Init+0x94>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a8e:	4b13      	ldr	r3, [pc, #76]	; (8009adc <USBD_LL_Init+0x94>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009a94:	4b11      	ldr	r3, [pc, #68]	; (8009adc <USBD_LL_Init+0x94>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009a9a:	4b10      	ldr	r3, [pc, #64]	; (8009adc <USBD_LL_Init+0x94>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009aa0:	4b0e      	ldr	r3, [pc, #56]	; (8009adc <USBD_LL_Init+0x94>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009aa6:	480d      	ldr	r0, [pc, #52]	; (8009adc <USBD_LL_Init+0x94>)
 8009aa8:	f7f8 fb63 	bl	8002172 <HAL_PCD_Init>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009ab2:	f7f7 f89b 	bl	8000bec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009ab6:	2180      	movs	r1, #128	; 0x80
 8009ab8:	4808      	ldr	r0, [pc, #32]	; (8009adc <USBD_LL_Init+0x94>)
 8009aba:	f7f9 fcc0 	bl	800343e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009abe:	2240      	movs	r2, #64	; 0x40
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	4806      	ldr	r0, [pc, #24]	; (8009adc <USBD_LL_Init+0x94>)
 8009ac4:	f7f9 fc74 	bl	80033b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009ac8:	2280      	movs	r2, #128	; 0x80
 8009aca:	2101      	movs	r1, #1
 8009acc:	4803      	ldr	r0, [pc, #12]	; (8009adc <USBD_LL_Init+0x94>)
 8009ace:	f7f9 fc6f 	bl	80033b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	20005aa4 	.word	0x20005aa4

08009ae0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7f8 fc58 	bl	80023ac <HAL_PCD_Start>
 8009afc:	4603      	mov	r3, r0
 8009afe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 f942 	bl	8009d8c <USBD_Get_USB_Status>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b084      	sub	sp, #16
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	4608      	mov	r0, r1
 8009b20:	4611      	mov	r1, r2
 8009b22:	461a      	mov	r2, r3
 8009b24:	4603      	mov	r3, r0
 8009b26:	70fb      	strb	r3, [r7, #3]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	70bb      	strb	r3, [r7, #2]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b3e:	78bb      	ldrb	r3, [r7, #2]
 8009b40:	883a      	ldrh	r2, [r7, #0]
 8009b42:	78f9      	ldrb	r1, [r7, #3]
 8009b44:	f7f9 f83c 	bl	8002bc0 <HAL_PCD_EP_Open>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 f91c 	bl	8009d8c <USBD_Get_USB_Status>
 8009b54:	4603      	mov	r3, r0
 8009b56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b7c:	78fa      	ldrb	r2, [r7, #3]
 8009b7e:	4611      	mov	r1, r2
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7f9 f885 	bl	8002c90 <HAL_PCD_EP_Close>
 8009b86:	4603      	mov	r3, r0
 8009b88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f000 f8fd 	bl	8009d8c <USBD_Get_USB_Status>
 8009b92:	4603      	mov	r3, r0
 8009b94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b96:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bba:	78fa      	ldrb	r2, [r7, #3]
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7f9 f95d 	bl	8002e7e <HAL_PCD_EP_SetStall>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 f8de 	bl	8009d8c <USBD_Get_USB_Status>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	460b      	mov	r3, r1
 8009be8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bf8:	78fa      	ldrb	r2, [r7, #3]
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7f9 f9a2 	bl	8002f46 <HAL_PCD_EP_ClrStall>
 8009c02:	4603      	mov	r3, r0
 8009c04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 f8bf 	bl	8009d8c <USBD_Get_USB_Status>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	da0b      	bge.n	8009c50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c3e:	68f9      	ldr	r1, [r7, #12]
 8009c40:	4613      	mov	r3, r2
 8009c42:	00db      	lsls	r3, r3, #3
 8009c44:	1a9b      	subs	r3, r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	440b      	add	r3, r1
 8009c4a:	333e      	adds	r3, #62	; 0x3e
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	e00b      	b.n	8009c68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c50:	78fb      	ldrb	r3, [r7, #3]
 8009c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c56:	68f9      	ldr	r1, [r7, #12]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	00db      	lsls	r3, r3, #3
 8009c5c:	1a9b      	subs	r3, r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	440b      	add	r3, r1
 8009c62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3714      	adds	r7, #20
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c8e:	78fa      	ldrb	r2, [r7, #3]
 8009c90:	4611      	mov	r1, r2
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7f8 ff6f 	bl	8002b76 <HAL_PCD_SetAddress>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 f874 	bl	8009d8c <USBD_Get_USB_Status>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b086      	sub	sp, #24
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	60f8      	str	r0, [r7, #12]
 8009cba:	607a      	str	r2, [r7, #4]
 8009cbc:	603b      	str	r3, [r7, #0]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009cd0:	7af9      	ldrb	r1, [r7, #11]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	f7f9 f888 	bl	8002dea <HAL_PCD_EP_Transmit>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cde:	7dfb      	ldrb	r3, [r7, #23]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 f853 	bl	8009d8c <USBD_Get_USB_Status>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cea:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3718      	adds	r7, #24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	607a      	str	r2, [r7, #4]
 8009cfe:	603b      	str	r3, [r7, #0]
 8009d00:	460b      	mov	r3, r1
 8009d02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d04:	2300      	movs	r3, #0
 8009d06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d12:	7af9      	ldrb	r1, [r7, #11]
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	f7f9 f804 	bl	8002d24 <HAL_PCD_EP_Receive>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d20:	7dfb      	ldrb	r3, [r7, #23]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 f832 	bl	8009d8c <USBD_Get_USB_Status>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3718      	adds	r7, #24
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
 8009d3e:	460b      	mov	r3, r1
 8009d40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d48:	78fa      	ldrb	r2, [r7, #3]
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7f9 f834 	bl	8002dba <HAL_PCD_EP_GetRxCount>
 8009d52:	4603      	mov	r3, r0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3708      	adds	r7, #8
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009d64:	4b03      	ldr	r3, [pc, #12]	; (8009d74 <USBD_static_malloc+0x18>)
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	370c      	adds	r7, #12
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	2000414c 	.word	0x2000414c

08009d78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]

}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	4603      	mov	r3, r0
 8009d94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d9a:	79fb      	ldrb	r3, [r7, #7]
 8009d9c:	2b03      	cmp	r3, #3
 8009d9e:	d817      	bhi.n	8009dd0 <USBD_Get_USB_Status+0x44>
 8009da0:	a201      	add	r2, pc, #4	; (adr r2, 8009da8 <USBD_Get_USB_Status+0x1c>)
 8009da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da6:	bf00      	nop
 8009da8:	08009db9 	.word	0x08009db9
 8009dac:	08009dbf 	.word	0x08009dbf
 8009db0:	08009dc5 	.word	0x08009dc5
 8009db4:	08009dcb 	.word	0x08009dcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	73fb      	strb	r3, [r7, #15]
    break;
 8009dbc:	e00b      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc2:	e008      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc8:	e005      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	73fb      	strb	r3, [r7, #15]
    break;
 8009dce:	e002      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8009dd4:	bf00      	nop
  }
  return usb_status;
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <__libc_init_array>:
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	4d0d      	ldr	r5, [pc, #52]	; (8009e1c <__libc_init_array+0x38>)
 8009de8:	4c0d      	ldr	r4, [pc, #52]	; (8009e20 <__libc_init_array+0x3c>)
 8009dea:	1b64      	subs	r4, r4, r5
 8009dec:	10a4      	asrs	r4, r4, #2
 8009dee:	2600      	movs	r6, #0
 8009df0:	42a6      	cmp	r6, r4
 8009df2:	d109      	bne.n	8009e08 <__libc_init_array+0x24>
 8009df4:	4d0b      	ldr	r5, [pc, #44]	; (8009e24 <__libc_init_array+0x40>)
 8009df6:	4c0c      	ldr	r4, [pc, #48]	; (8009e28 <__libc_init_array+0x44>)
 8009df8:	f000 f820 	bl	8009e3c <_init>
 8009dfc:	1b64      	subs	r4, r4, r5
 8009dfe:	10a4      	asrs	r4, r4, #2
 8009e00:	2600      	movs	r6, #0
 8009e02:	42a6      	cmp	r6, r4
 8009e04:	d105      	bne.n	8009e12 <__libc_init_array+0x2e>
 8009e06:	bd70      	pop	{r4, r5, r6, pc}
 8009e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e0c:	4798      	blx	r3
 8009e0e:	3601      	adds	r6, #1
 8009e10:	e7ee      	b.n	8009df0 <__libc_init_array+0xc>
 8009e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e16:	4798      	blx	r3
 8009e18:	3601      	adds	r6, #1
 8009e1a:	e7f2      	b.n	8009e02 <__libc_init_array+0x1e>
 8009e1c:	08009ef0 	.word	0x08009ef0
 8009e20:	08009ef0 	.word	0x08009ef0
 8009e24:	08009ef0 	.word	0x08009ef0
 8009e28:	08009ef4 	.word	0x08009ef4

08009e2c <memset>:
 8009e2c:	4402      	add	r2, r0
 8009e2e:	4603      	mov	r3, r0
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d100      	bne.n	8009e36 <memset+0xa>
 8009e34:	4770      	bx	lr
 8009e36:	f803 1b01 	strb.w	r1, [r3], #1
 8009e3a:	e7f9      	b.n	8009e30 <memset+0x4>

08009e3c <_init>:
 8009e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3e:	bf00      	nop
 8009e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e42:	bc08      	pop	{r3}
 8009e44:	469e      	mov	lr, r3
 8009e46:	4770      	bx	lr

08009e48 <_fini>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	bf00      	nop
 8009e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4e:	bc08      	pop	{r3}
 8009e50:	469e      	mov	lr, r3
 8009e52:	4770      	bx	lr
